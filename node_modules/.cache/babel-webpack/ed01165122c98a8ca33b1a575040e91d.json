{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar firebase = require('@firebase/app');\n\nvar tslib = require('tslib');\n\nvar util = require('@firebase/util');\n\nvar logger$1 = require('@firebase/logger');\n\nvar component = require('@firebase/component');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar firebase__default = /*#__PURE__*/_interopDefaultLegacy(firebase);\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n * @constructor\r\n */\n\n\nvar DOMStorageWrapper =\n/** @class */\nfunction () {\n  /**\r\n   * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)\r\n   */\n  function DOMStorageWrapper(domStorage_) {\n    this.domStorage_ = domStorage_; // Use a prefix to avoid collisions with other stuff saved by the app.\n\n    this.prefix_ = 'firebase:';\n  }\n  /**\r\n   * @param {string} key The key to save the value under\r\n   * @param {?Object} value The value being stored, or null to remove the key.\r\n   */\n\n\n  DOMStorageWrapper.prototype.set = function (key, value) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), util.stringify(value));\n    }\n  };\n  /**\r\n   * @param {string} key\r\n   * @return {*} The value that was stored under this key, or null\r\n   */\n\n\n  DOMStorageWrapper.prototype.get = function (key) {\n    var storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n\n    if (storedVal == null) {\n      return null;\n    } else {\n      return util.jsonEval(storedVal);\n    }\n  };\n  /**\r\n   * @param {string} key\r\n   */\n\n\n  DOMStorageWrapper.prototype.remove = function (key) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  };\n  /**\r\n   * @param {string} name\r\n   * @return {string}\r\n   */\n\n\n  DOMStorageWrapper.prototype.prefixedName_ = function (name) {\n    return this.prefix_ + name;\n  };\n\n  DOMStorageWrapper.prototype.toString = function () {\n    return this.domStorage_.toString();\n  };\n\n  return DOMStorageWrapper;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n *\r\n * @constructor\r\n */\n\n\nvar MemoryStorage =\n/** @class */\nfunction () {\n  function MemoryStorage() {\n    this.cache_ = {};\n    this.isInMemoryStorage = true;\n  }\n\n  MemoryStorage.prototype.set = function (key, value) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  };\n\n  MemoryStorage.prototype.get = function (key) {\n    if (util.contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n\n    return null;\n  };\n\n  MemoryStorage.prototype.remove = function (key) {\n    delete this.cache_[key];\n  };\n\n  return MemoryStorage;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param {string} domStorageName Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @return {?} Turning off type information until a common interface is defined.\r\n */\n\n\nvar createStoragefor = function (domStorageName) {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (typeof window !== 'undefined' && typeof window[domStorageName] !== 'undefined') {\n      // Need to test cache. Just because it's here doesn't mean it works\n      var domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {} // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n\n\n  return new MemoryStorage();\n};\n/** A storage object that lasts across sessions */\n\n\nvar PersistentStorage = createStoragefor('localStorage');\n/** A storage object that only lasts one session */\n\nvar SessionStorage = createStoragefor('sessionStorage');\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar logClient = new logger$1.Logger('@firebase/database');\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n * @type {function(): number} Generated ID.\r\n */\n\nvar LUIDGenerator = function () {\n  var id = 1;\n  return function () {\n    return id++;\n  };\n}();\n/**\r\n * Sha1 hash of the input string\r\n * @param {!string} str The string to hash\r\n * @return {!string} The resulting hash\r\n */\n\n\nvar sha1 = function (str) {\n  var utf8Bytes = util.stringToByteArray(str);\n  var sha1 = new util.Sha1();\n  sha1.update(utf8Bytes);\n  var sha1Bytes = sha1.digest();\n  return util.base64.encodeByteArray(sha1Bytes);\n};\n/**\r\n * @param {...*} varArgs\r\n * @return {string}\r\n * @private\r\n */\n\n\nvar buildLogMessage_ = function () {\n  var varArgs = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    varArgs[_i] = arguments[_i];\n  }\n\n  var message = '';\n\n  for (var i = 0; i < varArgs.length; i++) {\n    var arg = varArgs[i];\n\n    if (Array.isArray(arg) || arg && typeof arg === 'object' && // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    typeof arg.length === 'number') {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += util.stringify(arg);\n    } else {\n      message += arg;\n    }\n\n    message += ' ';\n  }\n\n  return message;\n};\n/**\r\n * Use this for all debug messages in Firebase.\r\n * @type {?function(string)}\r\n */\n\n\nvar logger = null;\n/**\r\n * Flag to check for log availability on first log message\r\n * @type {boolean}\r\n * @private\r\n */\n\nvar firstLog_ = true;\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger\r\n * @param {boolean=} persistent Whether or not to persist logging settings across refreshes\r\n */\n\nvar enableLogging = function (logger_, persistent) {\n  util.assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\n\n  if (logger_ === true) {\n    logClient.logLevel = logger$1.LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n/**\r\n *\r\n * @param {...(string|Arguments)} varArgs\r\n */\n\n\nvar log = function () {\n  var varArgs = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    varArgs[_i] = arguments[_i];\n  }\n\n  if (firstLog_ === true) {\n    firstLog_ = false;\n\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    var message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n/**\r\n * @param {!string} prefix\r\n * @return {function(...[*])}\r\n */\n\n\nvar logWrapper = function (prefix) {\n  return function () {\n    var varArgs = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      varArgs[_i] = arguments[_i];\n    }\n\n    log.apply(void 0, tslib.__spread([prefix], varArgs));\n  };\n};\n/**\r\n * @param {...string} varArgs\r\n */\n\n\nvar error = function () {\n  var varArgs = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    varArgs[_i] = arguments[_i];\n  }\n\n  var message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_.apply(void 0, tslib.__spread(varArgs));\n  logClient.error(message);\n};\n/**\r\n * @param {...string} varArgs\r\n */\n\n\nvar fatal = function () {\n  var varArgs = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    varArgs[_i] = arguments[_i];\n  }\n\n  var message = \"FIREBASE FATAL ERROR: \" + buildLogMessage_.apply(void 0, tslib.__spread(varArgs));\n  logClient.error(message);\n  throw new Error(message);\n};\n/**\r\n * @param {...*} varArgs\r\n */\n\n\nvar warn = function () {\n  var varArgs = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    varArgs[_i] = arguments[_i];\n  }\n\n  var message = 'FIREBASE WARNING: ' + buildLogMessage_.apply(void 0, tslib.__spread(varArgs));\n  logClient.warn(message);\n};\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\n\n\nvar warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (typeof window !== 'undefined' && window.location && window.location.protocol && window.location.protocol.indexOf('https:') !== -1) {\n    warn('Insecure Firebase access from a secure page. ' + 'Please use https in calls to new Firebase().');\n  }\n};\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n * @param {*} data\r\n * @return {boolean}\r\n */\n\n\nvar isInvalidJSONNumber = function (data) {\n  return typeof data === 'number' && (data !== data || // NaN\n  data === Number.POSITIVE_INFINITY || data === Number.NEGATIVE_INFINITY);\n};\n/**\r\n * @param {function()} fn\r\n */\n\n\nvar executeWhenDOMReady = function (fn) {\n  if (util.isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n    var called_1 = false;\n\n    var wrappedFn_1 = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn_1, Math.floor(10));\n        return;\n      }\n\n      if (!called_1) {\n        called_1 = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn_1, false); // fallback to onload.\n\n      window.addEventListener('load', wrappedFn_1, false); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if (document.attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      document.attachEvent('onreadystatechange', function () {\n        if (document.readyState === 'complete') {\n          wrappedFn_1();\n        }\n      }); // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      window.attachEvent('onload', wrappedFn_1); // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n * @type {!string}\r\n */\n\n\nvar MIN_NAME = '[MIN_NAME]';\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n * @type {!string}\r\n */\n\nvar MAX_NAME = '[MAX_NAME]';\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number}\r\n */\n\nvar nameCompare = function (a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    var aAsInt = tryParseInt(a),\n        bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n/**\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number} comparison result.\r\n */\n\n\nvar stringCompare = function (a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n/**\r\n * @param {string} key\r\n * @param {Object} obj\r\n * @return {*}\r\n */\n\n\nvar requireKey = function (key, obj) {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error('Missing required key (' + key + ') in object: ' + util.stringify(obj));\n  }\n};\n/**\r\n * @param {*} obj\r\n * @return {string}\r\n */\n\n\nvar ObjectToUniqueKey = function (obj) {\n  if (typeof obj !== 'object' || obj === null) {\n    return util.stringify(obj);\n  }\n\n  var keys = []; // eslint-disable-next-line guard-for-in\n\n  for (var k in obj) {\n    keys.push(k);\n  } // Export as json, but with the keys sorted.\n\n\n  keys.sort();\n  var key = '{';\n\n  for (var i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n\n    key += util.stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param {!string} str The string\r\n * @param {!number} segsize The maximum number of chars in the string.\r\n * @return {Array.<string>} The string, split into appropriately-sized chunks\r\n */\n\n\nvar splitStringBySize = function (str, segsize) {\n  var len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  var dataSegs = [];\n\n  for (var c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n\n  return dataSegs;\n};\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj The object or array to iterate over\r\n * @param fn The function to apply\r\n */\n\n\nfunction each(obj, fn) {\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param {!number} v A double\r\n * @return {string}\r\n */\n\n\nvar doubleToIEEE754String = function (v) {\n  util.assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  var ebits = 11,\n      fbits = 52;\n  var bias = (1 << ebits - 1) - 1;\n  var s, e, f, ln, i; // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  } // Pack sign, exponent, fraction\n\n\n  var bits = [];\n\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  var str = bits.join(''); // Return the data as a hex string. --MJL\n\n  var hexByteString = '';\n\n  for (i = 0; i < 64; i += 8) {\n    var hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n\n    hexByteString = hexByteString + hexByte;\n  }\n\n  return hexByteString.toLowerCase();\n};\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n * @return {boolean}\r\n */\n\n\nvar isChromeExtensionContentScript = function () {\n  return !!(typeof window === 'object' && window['chrome'] && window['chrome']['extension'] && !/^chrome/.test(window.location.href));\n};\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n * @return {boolean}\r\n */\n\n\nvar isWindowsStoreApp = function () {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n/**\r\n * Converts a server error code to a Javascript Error\r\n * @param {!string} code\r\n * @param {!Query} query\r\n * @return {Error}\r\n */\n\n\nvar errorForServerCode = function (code, query) {\n  var reason = 'Unknown Error';\n\n  if (code === 'too_big') {\n    reason = 'The data requested exceeds the maximum size ' + 'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  var error = new Error(code + ' at ' + query.path.toString() + ': ' + reason); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  error.code = code.toUpperCase();\n  return error;\n};\n/**\r\n * Used to test for integer-looking strings\r\n * @type {RegExp}\r\n * @private\r\n */\n\n\nvar INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n * @param {!string} str\r\n * @return {?number}\r\n */\n\nvar tryParseInt = function (str) {\n  if (INTEGER_REGEXP_.test(str)) {\n    var intVal = Number(str);\n\n    if (intVal >= -2147483648 && intVal <= 2147483647) {\n      return intVal;\n    }\n  }\n\n  return null;\n};\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param {!function()} fn The code to guard.\r\n */\n\n\nvar exceptionGuard = function (fn) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(function () {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      var stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n/**\r\n * @return {boolean} true if we think we're currently being crawled.\r\n */\n\n\nvar beingCrawled = function () {\n  var userAgent = typeof window === 'object' && window['navigator'] && window['navigator']['userAgent'] || ''; // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n\n  return userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0;\n};\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param {Function} fn Function to run.\r\n * @param {number} time Milliseconds to wait before running.\r\n * @return {number|Object} The setTimeout() return value.\r\n */\n\n\nvar setTimeoutNonBlocking = function (fn, time) {\n  var timeout = setTimeout(fn, time); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  if (typeof timeout === 'object' && timeout['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    timeout['unref']();\n  }\n\n  return timeout;\n};\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\n\n\nvar Path =\n/** @class */\nfunction () {\n  /**\r\n   * @param {string|Array.<string>} pathOrString Path string to parse,\r\n   *      or another path, or the raw tokens array\r\n   * @param {number=} pieceNum\r\n   */\n  function Path(pathOrString, pieceNum) {\n    if (pieceNum === void 0) {\n      this.pieces_ = pathOrString.split('/'); // Remove empty pieces.\n\n      var copyTo = 0;\n\n      for (var i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n\n      this.pieces_.length = copyTo;\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString;\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  Object.defineProperty(Path, \"Empty\", {\n    /**\r\n     * Singleton to represent an empty path\r\n     *\r\n     * @const\r\n     */\n    get: function () {\n      return new Path('');\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Path.prototype.getFront = function () {\n    if (this.pieceNum_ >= this.pieces_.length) {\n      return null;\n    }\n\n    return this.pieces_[this.pieceNum_];\n  };\n  /**\r\n   * @return {number} The number of segments in this path\r\n   */\n\n\n  Path.prototype.getLength = function () {\n    return this.pieces_.length - this.pieceNum_;\n  };\n  /**\r\n   * @return {!Path}\r\n   */\n\n\n  Path.prototype.popFront = function () {\n    var pieceNum = this.pieceNum_;\n\n    if (pieceNum < this.pieces_.length) {\n      pieceNum++;\n    }\n\n    return new Path(this.pieces_, pieceNum);\n  };\n  /**\r\n   * @return {?string}\r\n   */\n\n\n  Path.prototype.getBack = function () {\n    if (this.pieceNum_ < this.pieces_.length) {\n      return this.pieces_[this.pieces_.length - 1];\n    }\n\n    return null;\n  };\n\n  Path.prototype.toString = function () {\n    var pathString = '';\n\n    for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  };\n\n  Path.prototype.toUrlEncodedString = function () {\n    var pathString = '';\n\n    for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + encodeURIComponent(String(this.pieces_[i]));\n      }\n    }\n\n    return pathString || '/';\n  };\n  /**\r\n   * Shallow copy of the parts of the path.\r\n   *\r\n   * @param {number=} begin\r\n   * @return {!Array<string>}\r\n   */\n\n\n  Path.prototype.slice = function (begin) {\n    if (begin === void 0) {\n      begin = 0;\n    }\n\n    return this.pieces_.slice(this.pieceNum_ + begin);\n  };\n  /**\r\n   * @return {?Path}\r\n   */\n\n\n  Path.prototype.parent = function () {\n    if (this.pieceNum_ >= this.pieces_.length) {\n      return null;\n    }\n\n    var pieces = [];\n\n    for (var i = this.pieceNum_; i < this.pieces_.length - 1; i++) {\n      pieces.push(this.pieces_[i]);\n    }\n\n    return new Path(pieces, 0);\n  };\n  /**\r\n   * @param {string|!Path} childPathObj\r\n   * @return {!Path}\r\n   */\n\n\n  Path.prototype.child = function (childPathObj) {\n    var pieces = [];\n\n    for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\n      pieces.push(this.pieces_[i]);\n    }\n\n    if (childPathObj instanceof Path) {\n      for (var i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n        pieces.push(childPathObj.pieces_[i]);\n      }\n    } else {\n      var childPieces = childPathObj.split('/');\n\n      for (var i = 0; i < childPieces.length; i++) {\n        if (childPieces[i].length > 0) {\n          pieces.push(childPieces[i]);\n        }\n      }\n    }\n\n    return new Path(pieces, 0);\n  };\n  /**\r\n   * @return {boolean} True if there are no segments in this path\r\n   */\n\n\n  Path.prototype.isEmpty = function () {\n    return this.pieceNum_ >= this.pieces_.length;\n  };\n  /**\r\n   * @param {!Path} outerPath\r\n   * @param {!Path} innerPath\r\n   * @return {!Path} The path from outerPath to innerPath\r\n   */\n\n\n  Path.relativePath = function (outerPath, innerPath) {\n    var outer = outerPath.getFront(),\n        inner = innerPath.getFront();\n\n    if (outer === null) {\n      return innerPath;\n    } else if (outer === inner) {\n      return Path.relativePath(outerPath.popFront(), innerPath.popFront());\n    } else {\n      throw new Error('INTERNAL ERROR: innerPath (' + innerPath + ') is not within ' + 'outerPath (' + outerPath + ')');\n    }\n  };\n  /**\r\n   * @param {!Path} left\r\n   * @param {!Path} right\r\n   * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.\r\n   */\n\n\n  Path.comparePaths = function (left, right) {\n    var leftKeys = left.slice();\n    var rightKeys = right.slice();\n\n    for (var i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n      var cmp = nameCompare(leftKeys[i], rightKeys[i]);\n\n      if (cmp !== 0) {\n        return cmp;\n      }\n    }\n\n    if (leftKeys.length === rightKeys.length) {\n      return 0;\n    }\n\n    return leftKeys.length < rightKeys.length ? -1 : 1;\n  };\n  /**\r\n   *\r\n   * @param {Path} other\r\n   * @return {boolean} true if paths are the same.\r\n   */\n\n\n  Path.prototype.equals = function (other) {\n    if (this.getLength() !== other.getLength()) {\n      return false;\n    }\n\n    for (var i = this.pieceNum_, j = other.pieceNum_; i <= this.pieces_.length; i++, j++) {\n      if (this.pieces_[i] !== other.pieces_[j]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\r\n   *\r\n   * @param {!Path} other\r\n   * @return {boolean} True if this path is a parent (or the same as) other\r\n   */\n\n\n  Path.prototype.contains = function (other) {\n    var i = this.pieceNum_;\n    var j = other.pieceNum_;\n\n    if (this.getLength() > other.getLength()) {\n      return false;\n    }\n\n    while (i < this.pieces_.length) {\n      if (this.pieces_[i] !== other.pieces_[j]) {\n        return false;\n      }\n\n      ++i;\n      ++j;\n    }\n\n    return true;\n  };\n\n  return Path;\n}(); // end Path\n\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\n\n\nvar ValidationPath =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!Path} path Initial Path.\r\n   * @param {string} errorPrefix_ Prefix for any error messages.\r\n   */\n  function ValidationPath(path, errorPrefix_) {\n    this.errorPrefix_ = errorPrefix_;\n    /** @type {!Array<string>} */\n\n    this.parts_ = path.slice();\n    /** @type {number} Initialize to number of '/' chars needed in path. */\n\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (var i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += util.stringLength(this.parts_[i]);\n    }\n\n    this.checkValid_();\n  }\n\n  Object.defineProperty(ValidationPath, \"MAX_PATH_DEPTH\", {\n    /** @const {number} Maximum key depth. */\n    get: function () {\n      return 32;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ValidationPath, \"MAX_PATH_LENGTH_BYTES\", {\n    /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */\n    get: function () {\n      return 768;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** @param {string} child */\n\n  ValidationPath.prototype.push = function (child) {\n    // Count the needed '/'\n    if (this.parts_.length > 0) {\n      this.byteLength_ += 1;\n    }\n\n    this.parts_.push(child);\n    this.byteLength_ += util.stringLength(child);\n    this.checkValid_();\n  };\n\n  ValidationPath.prototype.pop = function () {\n    var last = this.parts_.pop();\n    this.byteLength_ -= util.stringLength(last); // Un-count the previous '/'\n\n    if (this.parts_.length > 0) {\n      this.byteLength_ -= 1;\n    }\n  };\n\n  ValidationPath.prototype.checkValid_ = function () {\n    if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {\n      throw new Error(this.errorPrefix_ + 'has a key path longer than ' + ValidationPath.MAX_PATH_LENGTH_BYTES + ' bytes (' + this.byteLength_ + ').');\n    }\n\n    if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {\n      throw new Error(this.errorPrefix_ + 'path specified exceeds the maximum depth that can be written (' + ValidationPath.MAX_PATH_DEPTH + ') or object contains a cycle ' + this.toErrorString());\n    }\n  };\n  /**\r\n   * String for use in error messages - uses '.' notation for path.\r\n   *\r\n   * @return {string}\r\n   */\n\n\n  ValidationPath.prototype.toErrorString = function () {\n    if (this.parts_.length === 0) {\n      return '';\n    }\n\n    return \"in property '\" + this.parts_.join('.') + \"'\";\n  };\n\n  return ValidationPath;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar PROTOCOL_VERSION = '5';\nvar VERSION_PARAM = 'v';\nvar TRANSPORT_SESSION_PARAM = 's';\nvar REFERER_PARAM = 'r';\nvar FORGE_REF = 'f';\nvar FORGE_DOMAIN = 'firebaseio.com';\nvar LAST_SESSION_PARAM = 'ls';\nvar APPLICATION_ID_PARAM = 'p';\nvar WEBSOCKET = 'websocket';\nvar LONG_POLLING = 'long_polling';\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A class that holds metadata about a Repo object\r\n *\r\n * @constructor\r\n */\n\nvar RepoInfo =\n/** @class */\nfunction () {\n  /**\r\n   * @param host Hostname portion of the url for the repo\r\n   * @param secure Whether or not this repo is accessed over ssl\r\n   * @param namespace The namespace represented by the repo\r\n   * @param webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\r\n   * @param nodeAdmin Whether this instance uses Admin SDK credentials\r\n   * @param persistenceKey Override the default session persistence storage key\r\n   */\n  function RepoInfo(host, secure, namespace, webSocketOnly, nodeAdmin, persistenceKey, includeNamespaceInQueryParams) {\n    if (nodeAdmin === void 0) {\n      nodeAdmin = false;\n    }\n\n    if (persistenceKey === void 0) {\n      persistenceKey = '';\n    }\n\n    if (includeNamespaceInQueryParams === void 0) {\n      includeNamespaceInQueryParams = false;\n    }\n\n    this.secure = secure;\n    this.namespace = namespace;\n    this.webSocketOnly = webSocketOnly;\n    this.nodeAdmin = nodeAdmin;\n    this.persistenceKey = persistenceKey;\n    this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\n    this.host = host.toLowerCase();\n    this.domain = this.host.substr(this.host.indexOf('.') + 1);\n    this.internalHost = PersistentStorage.get('host:' + host) || this.host;\n  }\n\n  RepoInfo.prototype.needsQueryParam = function () {\n    return this.host !== this.internalHost || this.isCustomHost() || this.includeNamespaceInQueryParams;\n  };\n\n  RepoInfo.prototype.isCacheableHost = function () {\n    return this.internalHost.substr(0, 2) === 's-';\n  };\n\n  RepoInfo.prototype.isDemoHost = function () {\n    return this.domain === 'firebaseio-demo.com';\n  };\n\n  RepoInfo.prototype.isCustomHost = function () {\n    return this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com';\n  };\n\n  RepoInfo.prototype.updateHost = function (newHost) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this.host, this.internalHost);\n      }\n    }\n  };\n  /**\r\n   * Returns the websocket URL for this repo\r\n   * @param {string} type of connection\r\n   * @param {Object} params list\r\n   * @return {string} The URL for this repo\r\n   */\n\n\n  RepoInfo.prototype.connectionURL = function (type, params) {\n    util.assert(typeof type === 'string', 'typeof type must == string');\n    util.assert(typeof params === 'object', 'typeof params must == object');\n    var connURL;\n\n    if (type === WEBSOCKET) {\n      connURL = (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';\n    } else if (type === LONG_POLLING) {\n      connURL = (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';\n    } else {\n      throw new Error('Unknown connection type: ' + type);\n    }\n\n    if (this.needsQueryParam()) {\n      params['ns'] = this.namespace;\n    }\n\n    var pairs = [];\n    each(params, function (key, value) {\n      pairs.push(key + '=' + value);\n    });\n    return connURL + pairs.join('&');\n  };\n  /** @return {string} */\n\n\n  RepoInfo.prototype.toString = function () {\n    var str = this.toURLString();\n\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n\n    return str;\n  };\n  /** @return {string} */\n\n\n  RepoInfo.prototype.toURLString = function () {\n    return (this.secure ? 'https://' : 'http://') + this.host;\n  };\n\n  return RepoInfo;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param {!string} pathString\r\n * @return {string}\r\n */\n\n\nfunction decodePath(pathString) {\n  var pathStringDecoded = '';\n  var pieces = pathString.split('/');\n\n  for (var i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      var piece = pieces[i];\n\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n\n      pathStringDecoded += '/' + piece;\n    }\n  }\n\n  return pathStringDecoded;\n}\n/**\r\n * @param {!string} queryString\r\n * @return {!{[key:string]:string}} key value hash\r\n */\n\n\nfunction decodeQuery(queryString) {\n  var e_1, _a;\n\n  var results = {};\n\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n\n  try {\n    for (var _b = tslib.__values(queryString.split('&')), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var segment = _c.value;\n\n      if (segment.length === 0) {\n        continue;\n      }\n\n      var kv = segment.split('=');\n\n      if (kv.length === 2) {\n        results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n      } else {\n        warn(\"Invalid query segment '\" + segment + \"' in query '\" + queryString + \"'\");\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return results;\n}\n\nvar parseRepoInfo = function (dataURL, nodeAdmin) {\n  var parsedUrl = parseDatabaseURL(dataURL),\n      namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(parsedUrl.host + ' is no longer supported. ' + 'Please use <YOUR FIREBASE>.firebaseio.com instead');\n  } // Catch common error of uninitialized namespace value.\n\n\n  if ((!namespace || namespace === 'undefined') && parsedUrl.domain !== 'localhost') {\n    fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  var webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n  return {\n    repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, nodeAdmin, webSocketOnly,\n    /*persistenceKey=*/\n    '',\n    /*includeNamespaceInQueryParams=*/\n    namespace !== parsedUrl.subdomain),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n/**\r\n *\r\n * @param {!string} dataURL\r\n * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string, namespace: string}}\r\n */\n\n\nvar parseDatabaseURL = function (dataURL) {\n  // Default to empty strings in the event of a malformed string.\n  var host = '',\n      domain = '',\n      subdomain = '',\n      pathString = '',\n      namespace = ''; // Always default to SSL, unless otherwise specified.\n\n  var secure = true,\n      scheme = 'https',\n      port = 443; // Don't do any validation here. The caller is responsible for validating the result of parsing.\n\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    var colonInd = dataURL.indexOf('//');\n\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    } // Parse host, path, and query string.\n\n\n    var slashInd = dataURL.indexOf('/');\n\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n\n    var questionMarkInd = dataURL.indexOf('?');\n\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n\n    var queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd))); // If we have a port, use scheme for determining if it's secure.\n\n    colonInd = host.indexOf(':');\n\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    var hostWithoutPort = host.slice(0, colonInd);\n\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      var dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1); // Normalize namespaces to lowercase to share storage / connection.\n\n      namespace = subdomain;\n    } // Always treat the value of the `ns` as the namespace name if it is present.\n\n\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host: host,\n    port: port,\n    domain: domain,\n    subdomain: subdomain,\n    secure: secure,\n    scheme: scheme,\n    pathString: pathString,\n    namespace: namespace\n  };\n};\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * True for invalid Firebase keys\r\n * @type {RegExp}\r\n * @private\r\n */\n\n\nvar INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n * @type {RegExp}\r\n * @private\r\n */\n\nvar INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n/**\r\n * Maximum number of characters to allow in leaf value\r\n * @type {number}\r\n * @private\r\n */\n\nvar MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n/**\r\n * @param {*} key\r\n * @return {boolean}\r\n */\n\nvar isValidKey = function (key) {\n  return typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key);\n};\n/**\r\n * @param {string} pathString\r\n * @return {boolean}\r\n */\n\n\nvar isValidPathString = function (pathString) {\n  return typeof pathString === 'string' && pathString.length !== 0 && !INVALID_PATH_REGEX_.test(pathString);\n};\n/**\r\n * @param {string} pathString\r\n * @return {boolean}\r\n */\n\n\nvar isValidRootPathString = function (pathString) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n/**\r\n * @param {*} priority\r\n * @return {boolean}\r\n */\n\n\nvar isValidPriority = function (priority) {\n  return priority === null || typeof priority === 'string' || typeof priority === 'number' && !isInvalidJSONNumber(priority) || priority && typeof priority === 'object' && // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  util.contains(priority, '.sv');\n};\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n *\r\n * @param {string} fnName\r\n * @param {number} argumentNumber\r\n * @param {*} data\r\n * @param {!Path} path\r\n * @param {boolean} optional\r\n */\n\n\nvar validateFirebaseDataArg = function (fnName, argumentNumber, data, path, optional) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  validateFirebaseData(util.errorPrefix(fnName, argumentNumber, optional), data, path);\n};\n/**\r\n * Validate a data object client-side before sending to server.\r\n *\r\n * @param {string} errorPrefix\r\n * @param {*} data\r\n * @param {!Path|!ValidationPath} path_\r\n */\n\n\nvar validateFirebaseData = function (errorPrefix, data, path_) {\n  var path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());\n  }\n\n  if (typeof data === 'function') {\n    throw new Error(errorPrefix + 'contains a function ' + path.toErrorString() + ' with contents = ' + data.toString());\n  }\n\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString());\n  } // Check max leaf size, but try to avoid the utf8 conversion if we can.\n\n\n  if (typeof data === 'string' && data.length > MAX_LEAF_SIZE_ / 3 && util.stringLength(data) > MAX_LEAF_SIZE_) {\n    throw new Error(errorPrefix + 'contains a string greater than ' + MAX_LEAF_SIZE_ + ' utf8 bytes ' + path.toErrorString() + \" ('\" + data.substring(0, 50) + \"...')\");\n  } // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n\n\n  if (data && typeof data === 'object') {\n    var hasDotValue_1 = false;\n    var hasActualChild_1 = false;\n    each(data, function (key, value) {\n      if (key === '.value') {\n        hasDotValue_1 = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild_1 = true;\n\n        if (!isValidKey(key)) {\n          throw new Error(errorPrefix + ' contains an invalid key (' + key + ') ' + path.toErrorString() + '.  Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n        }\n      }\n\n      path.push(key);\n      validateFirebaseData(errorPrefix, value, path);\n      path.pop();\n    });\n\n    if (hasDotValue_1 && hasActualChild_1) {\n      throw new Error(errorPrefix + ' contains \".value\" child ' + path.toErrorString() + ' in addition to actual children.');\n    }\n  }\n};\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n *\r\n * @param {string} errorPrefix\r\n * @param {Array<!Path>} mergePaths\r\n */\n\n\nvar validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\n  var i, curPath;\n\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    var keys = curPath.slice();\n\n    for (var j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) ;else if (!isValidKey(keys[j])) {\n        throw new Error(errorPrefix + 'contains an invalid key (' + keys[j] + ') in path ' + curPath.toString() + '. Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n      }\n    }\n  } // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n\n\n  mergePaths.sort(Path.comparePaths);\n  var prevPath = null;\n\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n\n    if (prevPath !== null && prevPath.contains(curPath)) {\n      throw new Error(errorPrefix + 'contains a path ' + prevPath.toString() + ' that is ancestor of another path ' + curPath.toString());\n    }\n\n    prevPath = curPath;\n  }\n};\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n *\r\n * @param {string} fnName\r\n * @param {number} argumentNumber\r\n * @param {*} data\r\n * @param {!Path} path\r\n * @param {boolean} optional\r\n */\n\n\nvar validateFirebaseMergeDataArg = function (fnName, argumentNumber, data, path, optional) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  var errorPrefix = util.errorPrefix(fnName, argumentNumber, optional);\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(errorPrefix + ' must be an object containing the children to replace.');\n  }\n\n  var mergePaths = [];\n  each(data, function (key, value) {\n    var curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, path.child(curPath));\n\n    if (curPath.getBack() === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(errorPrefix + \"contains an invalid value for '\" + curPath.toString() + \"', which must be a valid \" + 'Firebase priority (a string, finite number, server value, or null).');\n      }\n    }\n\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nvar validatePriority = function (fnName, argumentNumber, priority, optional) {\n  if (optional && priority === undefined) {\n    return;\n  }\n\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'is ' + priority.toString() + ', but must be a valid Firebase priority (a string, finite number, ' + 'server value, or null).');\n  } // Special case to allow importing data with a .sv.\n\n\n  if (!isValidPriority(priority)) {\n    throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'must be a valid Firebase priority ' + '(a string, finite number, server value, or null).');\n  }\n};\n\nvar validateEventType = function (fnName, argumentNumber, eventType, optional) {\n  if (optional && eventType === undefined) {\n    return;\n  }\n\n  switch (eventType) {\n    case 'value':\n    case 'child_added':\n    case 'child_removed':\n    case 'child_changed':\n    case 'child_moved':\n      break;\n\n    default:\n      throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' + '\"child_changed\", or \"child_moved\".');\n  }\n};\n\nvar validateKey = function (fnName, argumentNumber, key, optional) {\n  if (optional && key === undefined) {\n    return;\n  }\n\n  if (!isValidKey(key)) {\n    throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'was an invalid key = \"' + key + '\".  Firebase keys must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\n  }\n};\n\nvar validatePathString = function (fnName, argumentNumber, pathString, optional) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'was an invalid path = \"' + pathString + '\". Paths must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\n  }\n};\n\nvar validateRootPathString = function (fnName, argumentNumber, pathString, optional) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentNumber, pathString, optional);\n};\n\nvar validateWritablePath = function (fnName, path) {\n  if (path.getFront() === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nvar validateUrl = function (fnName, argumentNumber, parsedUrl) {\n  // TODO = Validate server better.\n  var pathString = parsedUrl.path.toString();\n\n  if (!(typeof parsedUrl.repoInfo.host === 'string') || parsedUrl.repoInfo.host.length === 0 || !isValidKey(parsedUrl.repoInfo.namespace) && parsedUrl.repoInfo.host.split(':')[0] !== 'localhost' || pathString.length !== 0 && !isValidRootPathString(pathString)) {\n    throw new Error(util.errorPrefix(fnName, argumentNumber, false) + 'must be a valid firebase URL and ' + 'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\n  }\n};\n\nvar validateBoolean = function (fnName, argumentNumber, bool, optional) {\n  if (optional && bool === undefined) {\n    return;\n  }\n\n  if (typeof bool !== 'boolean') {\n    throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'must be a boolean.');\n  }\n};\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @constructor\r\n */\n\n\nvar OnDisconnect =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!Repo} repo_\r\n   * @param {!Path} path_\r\n   */\n  function OnDisconnect(repo_, path_) {\n    this.repo_ = repo_;\n    this.path_ = path_;\n  }\n  /**\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!firebase.Promise}\r\n   */\n\n\n  OnDisconnect.prototype.cancel = function (onComplete) {\n    util.validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n    util.validateCallback('OnDisconnect.cancel', 1, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo_.onDisconnectCancel(this.path_, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!firebase.Promise}\r\n   */\n\n\n  OnDisconnect.prototype.remove = function (onComplete) {\n    util.validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n    validateWritablePath('OnDisconnect.remove', this.path_);\n    util.validateCallback('OnDisconnect.remove', 1, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo_.onDisconnectSet(this.path_, null, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {*} value\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!firebase.Promise}\r\n   */\n\n\n  OnDisconnect.prototype.set = function (value, onComplete) {\n    util.validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.set', this.path_);\n    validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\n    util.validateCallback('OnDisconnect.set', 2, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo_.onDisconnectSet(this.path_, value, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {*} value\r\n   * @param {number|string|null} priority\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!firebase.Promise}\r\n   */\n\n\n  OnDisconnect.prototype.setWithPriority = function (value, priority, onComplete) {\n    util.validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('OnDisconnect.setWithPriority', this.path_);\n    validateFirebaseDataArg('OnDisconnect.setWithPriority', 1, value, this.path_, false);\n    validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\n    util.validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo_.onDisconnectSetWithPriority(this.path_, value, priority, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {!Object} objectToMerge\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!firebase.Promise}\r\n   */\n\n\n  OnDisconnect.prototype.update = function (objectToMerge, onComplete) {\n    util.validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.update', this.path_);\n\n    if (Array.isArray(objectToMerge)) {\n      var newObjectToMerge = {};\n\n      for (var i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n\n      objectToMerge = newObjectToMerge;\n      warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' + 'existing data, or an Object with integer keys if you really do want to only update some of the children.');\n    }\n\n    validateFirebaseMergeDataArg('OnDisconnect.update', 1, objectToMerge, this.path_, false);\n    util.validateCallback('OnDisconnect.update', 2, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo_.onDisconnectUpdate(this.path_, objectToMerge, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n\n  return OnDisconnect;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar TransactionResult =\n/** @class */\nfunction () {\n  /**\r\n   * A type for the resolve value of Firebase.transaction.\r\n   * @constructor\r\n   * @dict\r\n   * @param {boolean} committed\r\n   * @param {DataSnapshot} snapshot\r\n   */\n  function TransactionResult(committed, snapshot) {\n    this.committed = committed;\n    this.snapshot = snapshot;\n  } // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n\n\n  TransactionResult.prototype.toJSON = function () {\n    util.validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\n    return {\n      committed: this.committed,\n      snapshot: this.snapshot.toJSON()\n    };\n  };\n\n  return TransactionResult;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\n\n\nvar nextPushId = function () {\n  // Modeled after base64 web-safe chars, but ordered by ASCII.\n  var PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz'; // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n\n  var lastPushTime = 0; // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n\n  var lastRandChars = [];\n  return function (now) {\n    var duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n    var i;\n    var timeStampChars = new Array(8);\n\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64); // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n\n      now = Math.floor(now / 64);\n    }\n\n    util.assert(now === 0, 'Cannot push at time == 0');\n    var id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n\n      lastRandChars[i]++;\n    }\n\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n\n    util.assert(id.length === 20, 'nextPushId: Length should be 20.');\n    return id;\n  };\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n *\r\n * @param {!string} name\r\n * @param {!Node} node\r\n * @constructor\r\n * @struct\r\n */\n\n\nvar NamedNode =\n/** @class */\nfunction () {\n  function NamedNode(name, node) {\n    this.name = name;\n    this.node = node;\n  }\n  /**\r\n   *\r\n   * @param {!string} name\r\n   * @param {!Node} node\r\n   * @return {NamedNode}\r\n   */\n\n\n  NamedNode.Wrap = function (name, node) {\n    return new NamedNode(name, node);\n  };\n\n  return NamedNode;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n *\r\n * @constructor\r\n */\n\n\nvar Index =\n/** @class */\nfunction () {\n  function Index() {}\n  /**\r\n   * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for\r\n   * this index\r\n   */\n\n\n  Index.prototype.getCompare = function () {\n    return this.compare.bind(this);\n  };\n  /**\r\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n   *\r\n   * @param {!Node} oldNode\r\n   * @param {!Node} newNode\r\n   * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n   */\n\n\n  Index.prototype.indexedValueChanged = function (oldNode, newNode) {\n    var oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    var newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  };\n  /**\r\n   * @return {!NamedNode} a node wrapper that will sort equal to or less than\r\n   * any other node wrapper, using this index\r\n   */\n\n\n  Index.prototype.minPost = function () {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  };\n\n  return Index;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar __EMPTY_NODE;\n\nvar KeyIndex =\n/** @class */\nfunction (_super) {\n  tslib.__extends(KeyIndex, _super);\n\n  function KeyIndex() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(KeyIndex, \"__EMPTY_NODE\", {\n    get: function () {\n      return __EMPTY_NODE;\n    },\n    set: function (val) {\n      __EMPTY_NODE = val;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * @inheritDoc\r\n   */\n\n  KeyIndex.prototype.compare = function (a, b) {\n    return nameCompare(a.name, b.name);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  KeyIndex.prototype.isDefinedOn = function (node) {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw util.assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  KeyIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n    return false; // The key for a node never changes.\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  KeyIndex.prototype.minPost = function () {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  KeyIndex.prototype.maxPost = function () {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  };\n  /**\r\n   * @param {*} indexValue\r\n   * @param {string} name\r\n   * @return {!NamedNode}\r\n   */\n\n\n  KeyIndex.prototype.makePost = function (indexValue, name) {\n    util.assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.'); // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  };\n  /**\r\n   * @return {!string} String representation for inclusion in a query spec\r\n   */\n\n\n  KeyIndex.prototype.toString = function () {\n    return '.key';\n  };\n\n  return KeyIndex;\n}(Index);\n\nvar KEY_INDEX = new KeyIndex();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar MAX_NODE;\n\nfunction setMaxNode(val) {\n  MAX_NODE = val;\n}\n/**\r\n * @param {(!string|!number)} priority\r\n * @return {!string}\r\n */\n\n\nvar priorityHashText = function (priority) {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n *\r\n * @param {!Node} priorityNode\r\n */\n\n\nvar validatePriorityNode = function (priorityNode) {\n  if (priorityNode.isLeafNode()) {\n    var val = priorityNode.val();\n    util.assert(typeof val === 'string' || typeof val === 'number' || typeof val === 'object' && util.contains(val, '.sv'), 'Priority must be a string or number.');\n  } else {\n    util.assert(priorityNode === MAX_NODE || priorityNode.isEmpty(), 'priority of unexpected type.');\n  } // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n\n\n  util.assert(priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\n};\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar __childrenNodeConstructor;\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\n\n\nvar LeafNode =\n/** @class */\nfunction () {\n  /**\r\n   * @implements {Node}\r\n   * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.\r\n   *                                         The object type is possible in the event of a deferred value\r\n   * @param {!Node=} priorityNode_ The priority of this node.\r\n   */\n  function LeafNode(value_, priorityNode_) {\n    if (priorityNode_ === void 0) {\n      priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n\n    this.value_ = value_;\n    this.priorityNode_ = priorityNode_;\n    this.lazyHash_ = null;\n    util.assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  Object.defineProperty(LeafNode, \"__childrenNodeConstructor\", {\n    get: function () {\n      return __childrenNodeConstructor;\n    },\n    set: function (val) {\n      __childrenNodeConstructor = val;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** @inheritDoc */\n\n  LeafNode.prototype.isLeafNode = function () {\n    return true;\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.getPriority = function () {\n    return this.priorityNode_;\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.updatePriority = function (newPriorityNode) {\n    return new LeafNode(this.value_, newPriorityNode);\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.getImmediateChild = function (childName) {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.getChild = function (path) {\n    if (path.isEmpty()) {\n      return this;\n    } else if (path.getFront() === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LeafNode.prototype.hasChild = function () {\n    return false;\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.getPredecessorChildName = function (childName, childNode) {\n    return null;\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.updateImmediateChild = function (childName, newChildNode) {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\n    }\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.updateChild = function (path, newChildNode) {\n    var front = path.getFront();\n\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      util.assert(front !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\n      return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(path.popFront(), newChildNode));\n    }\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.isEmpty = function () {\n    return false;\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.numChildren = function () {\n    return 0;\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.forEachChild = function (index, action) {\n    return false;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LeafNode.prototype.val = function (exportFormat) {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.hash = function () {\n    if (this.lazyHash_ === null) {\n      var toHash = '';\n\n      if (!this.priorityNode_.isEmpty()) {\n        toHash += 'priority:' + priorityHashText(this.priorityNode_.val()) + ':';\n      }\n\n      var type = typeof this.value_;\n      toHash += type + ':';\n\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_);\n      } else {\n        toHash += this.value_;\n      }\n\n      this.lazyHash_ = sha1(toHash);\n    }\n\n    return this.lazyHash_;\n  };\n  /**\r\n   * Returns the value of the leaf node.\r\n   * @return {Object|string|number|boolean} The value of the node.\r\n   */\n\n\n  LeafNode.prototype.getValue = function () {\n    return this.value_;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LeafNode.prototype.compareTo = function (other) {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      util.assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other);\n    }\n  };\n  /**\r\n   * Comparison specifically for two leaf nodes\r\n   * @param {!LeafNode} otherLeaf\r\n   * @return {!number}\r\n   * @private\r\n   */\n\n\n  LeafNode.prototype.compareToLeafNode_ = function (otherLeaf) {\n    var otherLeafType = typeof otherLeaf.value_;\n    var thisLeafType = typeof this.value_;\n    var otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    var thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    util.assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    util.assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LeafNode.prototype.withIndex = function () {\n    return this;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LeafNode.prototype.isIndexed = function () {\n    return true;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LeafNode.prototype.equals = function (other) {\n    /**\r\n     * @inheritDoc\r\n     */\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      var otherLeaf = other;\n      return this.value_ === otherLeaf.value_ && this.priorityNode_.equals(otherLeaf.priorityNode_);\n    } else {\n      return false;\n    }\n  };\n  /**\r\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n   * the same type, the comparison falls back to their value\r\n   * @type {Array.<!string>}\r\n   * @const\r\n   */\n\n\n  LeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n  return LeafNode;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar nodeFromJSON;\nvar MAX_NODE$1;\n\nfunction setNodeFromJSON(val) {\n  nodeFromJSON = val;\n}\n\nfunction setMaxNode$1(val) {\n  MAX_NODE$1 = val;\n}\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\n\n\nvar PriorityIndex =\n/** @class */\nfunction (_super) {\n  tslib.__extends(PriorityIndex, _super);\n\n  function PriorityIndex() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PriorityIndex.prototype.compare = function (a, b) {\n    var aPriority = a.node.getPriority();\n    var bPriority = b.node.getPriority();\n    var indexCmp = aPriority.compareTo(bPriority);\n\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PriorityIndex.prototype.isDefinedOn = function (node) {\n    return !node.getPriority().isEmpty();\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PriorityIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PriorityIndex.prototype.minPost = function () {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PriorityIndex.prototype.maxPost = function () {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\n  };\n  /**\r\n   * @param {*} indexValue\r\n   * @param {string} name\r\n   * @return {!NamedNode}\r\n   */\n\n\n  PriorityIndex.prototype.makePost = function (indexValue, name) {\n    var priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  };\n  /**\r\n   * @return {!string} String representation for inclusion in a query spec\r\n   */\n\n\n  PriorityIndex.prototype.toString = function () {\n    return '.priority';\n  };\n\n  return PriorityIndex;\n}(Index);\n\nvar PRIORITY_INDEX = new PriorityIndex();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An iterator over an LLRBNode.\r\n */\n\nvar SortedMapIterator =\n/** @class */\nfunction () {\n  /**\r\n   * @template K, V, T\r\n   * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.\r\n   * @param {?K} startKey\r\n   * @param {function(K, K): number} comparator\r\n   * @param {boolean} isReverse_ Whether or not to iterate in reverse\r\n   * @param {(function(K, V):T)=} resultGenerator_\r\n   */\n  function SortedMapIterator(node, startKey, comparator, isReverse_, resultGenerator_) {\n    if (resultGenerator_ === void 0) {\n      resultGenerator_ = null;\n    }\n\n    this.isReverse_ = isReverse_;\n    this.resultGenerator_ = resultGenerator_;\n    /** @private\r\n     * @type {Array.<!LLRBNode>}\r\n     */\n\n    this.nodeStack_ = [];\n    var cmp = 1;\n\n    while (!node.isEmpty()) {\n      node = node;\n      cmp = startKey ? comparator(node.key, startKey) : 1; // flip the comparison if we're going in reverse\n\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  SortedMapIterator.prototype.getNext = function () {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    var node = this.nodeStack_.pop();\n    var result;\n\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = {\n        key: node.key,\n        value: node.value\n      };\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  };\n\n  SortedMapIterator.prototype.hasNext = function () {\n    return this.nodeStack_.length > 0;\n  };\n\n  SortedMapIterator.prototype.peek = function () {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    var node = this.nodeStack_[this.nodeStack_.length - 1];\n\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return {\n        key: node.key,\n        value: node.value\n      };\n    }\n  };\n\n  return SortedMapIterator;\n}();\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\n\n\nvar LLRBNode =\n/** @class */\nfunction () {\n  /**\r\n   * @template K, V\r\n   * @param {!K} key Key associated with this node.\r\n   * @param {!V} value Value associated with this node.\r\n   * @param {?boolean} color Whether this node is red.\r\n   * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.\r\n   * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.\r\n   */\n  function LLRBNode(key, value, color, left, right) {\n    this.key = key;\n    this.value = value;\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left = left != null ? left : SortedMap.EMPTY_NODE;\n    this.right = right != null ? right : SortedMap.EMPTY_NODE;\n  }\n  /**\r\n   * Returns a copy of the current node, optionally replacing pieces of it.\r\n   *\r\n   * @param {?K} key New key for the node, or null.\r\n   * @param {?V} value New value for the node, or null.\r\n   * @param {?boolean} color New color for the node, or null.\r\n   * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.\r\n   * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.\r\n   * @return {!LLRBNode} The node copy.\r\n   */\n\n\n  LLRBNode.prototype.copy = function (key, value, color, left, right) {\n    return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n  };\n  /**\r\n   * @return {number} The total number of nodes in the tree.\r\n   */\n\n\n  LLRBNode.prototype.count = function () {\n    return this.left.count() + 1 + this.right.count();\n  };\n  /**\r\n   * @return {boolean} True if the tree is empty.\r\n   */\n\n\n  LLRBNode.prototype.isEmpty = function () {\n    return false;\n  };\n  /**\r\n   * Traverses the tree in key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param {function(!K, !V):*} action Callback function to be called for each\r\n   *   node.  If it returns true, traversal is aborted.\r\n   * @return {*} The first truthy value returned by action, or the last falsey\r\n   *   value returned by action\r\n   */\n\n\n  LLRBNode.prototype.inorderTraversal = function (action) {\n    return this.left.inorderTraversal(action) || !!action(this.key, this.value) || this.right.inorderTraversal(action);\n  };\n  /**\r\n   * Traverses the tree in reverse key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param {function(!Object, !Object)} action Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @return {*} True if traversal was aborted.\r\n   */\n\n\n  LLRBNode.prototype.reverseTraversal = function (action) {\n    return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);\n  };\n  /**\r\n   * @return {!Object} The minimum node in the tree.\r\n   * @private\r\n   */\n\n\n  LLRBNode.prototype.min_ = function () {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return this.left.min_();\n    }\n  };\n  /**\r\n   * @return {!K} The maximum key in the tree.\r\n   */\n\n\n  LLRBNode.prototype.minKey = function () {\n    return this.min_().key;\n  };\n  /**\r\n   * @return {!K} The maximum key in the tree.\r\n   */\n\n\n  LLRBNode.prototype.maxKey = function () {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  };\n  /**\r\n   *\r\n   * @param {!Object} key Key to insert.\r\n   * @param {!Object} value Value to insert.\r\n   * @param {Comparator} comparator Comparator.\r\n   * @return {!LLRBNode} New tree, with the key/value added.\r\n   */\n\n\n  LLRBNode.prototype.insert = function (key, value, comparator) {\n    var n = this;\n    var cmp = comparator(key, n.key);\n\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n    }\n\n    return n.fixUp_();\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.\r\n   */\n\n\n  LLRBNode.prototype.removeMin_ = function () {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE;\n    }\n\n    var n = this;\n\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n\n    n = n.copy(null, null, null, n.left.removeMin_(), null);\n    return n.fixUp_();\n  };\n  /**\r\n   * @param {!Object} key The key of the item to remove.\r\n   * @param {Comparator} comparator Comparator.\r\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.\r\n   */\n\n\n  LLRBNode.prototype.remove = function (key, comparator) {\n    var n, smallest;\n    n = this;\n\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE;\n        } else {\n          smallest = n.right.min_();\n          n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\n        }\n      }\n\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n\n    return n.fixUp_();\n  };\n  /**\r\n   * @private\r\n   * @return {boolean} Whether this is a RED node.\r\n   */\n\n\n  LLRBNode.prototype.isRed_ = function () {\n    return this.color;\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode} New tree after performing any needed rotations.\r\n   */\n\n\n  LLRBNode.prototype.fixUp_ = function () {\n    var n = this;\n\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n\n    return n;\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode} New tree, after moveRedLeft.\r\n   */\n\n\n  LLRBNode.prototype.moveRedLeft_ = function () {\n    var n = this.colorFlip_();\n\n    if (n.right.left.isRed_()) {\n      n = n.copy(null, null, null, null, n.right.rotateRight_());\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n\n    return n;\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode} New tree, after moveRedRight.\r\n   */\n\n\n  LLRBNode.prototype.moveRedRight_ = function () {\n    var n = this.colorFlip_();\n\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n\n    return n;\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode} New tree, after rotateLeft.\r\n   */\n\n\n  LLRBNode.prototype.rotateLeft_ = function () {\n    var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null);\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode} New tree, after rotateRight.\r\n   */\n\n\n  LLRBNode.prototype.rotateRight_ = function () {\n    var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr);\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode} New tree, after colorFlip.\r\n   */\n\n\n  LLRBNode.prototype.colorFlip_ = function () {\n    var left = this.left.copy(null, null, !this.left.color, null, null);\n    var right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  };\n  /**\r\n   * For testing.\r\n   *\r\n   * @private\r\n   * @return {boolean} True if all is well.\r\n   */\n\n\n  LLRBNode.prototype.checkMaxDepth_ = function () {\n    var blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  };\n  /**\r\n   * @private\r\n   * @return {number} Not sure what this returns exactly. :-).\r\n   */\n\n\n  LLRBNode.prototype.check_ = function () {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\n    }\n\n    if (this.right.isRed_()) {\n      throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\n    }\n\n    var blackDepth = this.left.check_();\n\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  };\n\n  LLRBNode.RED = true;\n  LLRBNode.BLACK = false;\n  return LLRBNode;\n}();\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\n\n\nvar LLRBEmptyNode =\n/** @class */\nfunction () {\n  function LLRBEmptyNode() {}\n  /**\r\n   * Returns a copy of the current node.\r\n   *\r\n   * @return {!LLRBEmptyNode} The node copy.\r\n   */\n\n\n  LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {\n    return this;\n  };\n  /**\r\n   * Returns a copy of the tree, with the specified key/value added.\r\n   *\r\n   * @param {!K} key Key to be added.\r\n   * @param {!V} value Value to be added.\r\n   * @param {Comparator} comparator Comparator.\r\n   * @return {!LLRBNode} New tree, with item added.\r\n   */\n\n\n  LLRBEmptyNode.prototype.insert = function (key, value, comparator) {\n    return new LLRBNode(key, value, null);\n  };\n  /**\r\n   * Returns a copy of the tree, with the specified key removed.\r\n   *\r\n   * @param {!K} key The key to remove.\r\n   * @param {Comparator} comparator Comparator.\r\n   * @return {!LLRBEmptyNode} New tree, with item removed.\r\n   */\n\n\n  LLRBEmptyNode.prototype.remove = function (key, comparator) {\n    return this;\n  };\n  /**\r\n   * @return {number} The total number of nodes in the tree.\r\n   */\n\n\n  LLRBEmptyNode.prototype.count = function () {\n    return 0;\n  };\n  /**\r\n   * @return {boolean} True if the tree is empty.\r\n   */\n\n\n  LLRBEmptyNode.prototype.isEmpty = function () {\n    return true;\n  };\n  /**\r\n   * Traverses the tree in key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param {function(!K, !V):*} action Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @return {boolean} True if traversal was aborted.\r\n   */\n\n\n  LLRBEmptyNode.prototype.inorderTraversal = function (action) {\n    return false;\n  };\n  /**\r\n   * Traverses the tree in reverse key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param {function(!K, !V)} action Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @return {boolean} True if traversal was aborted.\r\n   */\n\n\n  LLRBEmptyNode.prototype.reverseTraversal = function (action) {\n    return false;\n  };\n  /**\r\n   * @return {null}\r\n   */\n\n\n  LLRBEmptyNode.prototype.minKey = function () {\n    return null;\n  };\n  /**\r\n   * @return {null}\r\n   */\n\n\n  LLRBEmptyNode.prototype.maxKey = function () {\n    return null;\n  };\n  /**\r\n   * @private\r\n   * @return {number} Not sure what this returns exactly. :-).\r\n   */\n\n\n  LLRBEmptyNode.prototype.check_ = function () {\n    return 0;\n  };\n  /**\r\n   * @private\r\n   * @return {boolean} Whether this node is red.\r\n   */\n\n\n  LLRBEmptyNode.prototype.isRed_ = function () {\n    return false;\n  };\n\n  return LLRBEmptyNode;\n}();\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\n\n\nvar SortedMap =\n/** @class */\nfunction () {\n  /**\r\n   * @template K, V\r\n   * @param {function(K, K):number} comparator_ Key comparator.\r\n   * @param {LLRBNode=} root_ (Optional) Root node for the map.\r\n   */\n  function SortedMap(comparator_, root_) {\n    if (root_ === void 0) {\n      root_ = SortedMap.EMPTY_NODE;\n    }\n\n    this.comparator_ = comparator_;\n    this.root_ = root_;\n  }\n  /**\r\n   * Returns a copy of the map, with the specified key/value added or replaced.\r\n   * (TODO: We should perhaps rename this method to 'put')\r\n   *\r\n   * @param {!K} key Key to be added.\r\n   * @param {!V} value Value to be added.\r\n   * @return {!SortedMap.<K, V>} New map, with item added.\r\n   */\n\n\n  SortedMap.prototype.insert = function (key, value) {\n    return new SortedMap(this.comparator_, this.root_.insert(key, value, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n  };\n  /**\r\n   * Returns a copy of the map, with the specified key removed.\r\n   *\r\n   * @param {!K} key The key to remove.\r\n   * @return {!SortedMap.<K, V>} New map, with item removed.\r\n   */\n\n\n  SortedMap.prototype.remove = function (key) {\n    return new SortedMap(this.comparator_, this.root_.remove(key, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n  };\n  /**\r\n   * Returns the value of the node with the given key, or null.\r\n   *\r\n   * @param {!K} key The key to look up.\r\n   * @return {?V} The value of the node with the given key, or null if the\r\n   * key doesn't exist.\r\n   */\n\n\n  SortedMap.prototype.get = function (key) {\n    var cmp;\n    var node = this.root_;\n\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n   * @param {K} key The key to find the predecessor of\r\n   * @return {?K} The predecessor key.\r\n   */\n\n\n  SortedMap.prototype.getPredecessorKey = function (key) {\n    var cmp,\n        node = this.root_,\n        rightParent = null;\n\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\n  };\n  /**\r\n   * @return {boolean} True if the map is empty.\r\n   */\n\n\n  SortedMap.prototype.isEmpty = function () {\n    return this.root_.isEmpty();\n  };\n  /**\r\n   * @return {number} The total number of nodes in the map.\r\n   */\n\n\n  SortedMap.prototype.count = function () {\n    return this.root_.count();\n  };\n  /**\r\n   * @return {?K} The minimum key in the map.\r\n   */\n\n\n  SortedMap.prototype.minKey = function () {\n    return this.root_.minKey();\n  };\n  /**\r\n   * @return {?K} The maximum key in the map.\r\n   */\n\n\n  SortedMap.prototype.maxKey = function () {\n    return this.root_.maxKey();\n  };\n  /**\r\n   * Traverses the map in key order and calls the specified action function\r\n   * for each key/value pair.\r\n   *\r\n   * @param {function(!K, !V):*} action Callback function to be called\r\n   * for each key/value pair.  If action returns true, traversal is aborted.\r\n   * @return {*} The first truthy value returned by action, or the last falsey\r\n   *   value returned by action\r\n   */\n\n\n  SortedMap.prototype.inorderTraversal = function (action) {\n    return this.root_.inorderTraversal(action);\n  };\n  /**\r\n   * Traverses the map in reverse key order and calls the specified action function\r\n   * for each key/value pair.\r\n   *\r\n   * @param {function(!Object, !Object)} action Callback function to be called\r\n   * for each key/value pair.  If action returns true, traversal is aborted.\r\n   * @return {*} True if the traversal was aborted.\r\n   */\n\n\n  SortedMap.prototype.reverseTraversal = function (action) {\n    return this.root_.reverseTraversal(action);\n  };\n  /**\r\n   * Returns an iterator over the SortedMap.\r\n   * @template T\r\n   * @param {(function(K, V):T)=} resultGenerator\r\n   * @return {SortedMapIterator.<K, V, T>} The iterator.\r\n   */\n\n\n  SortedMap.prototype.getIterator = function (resultGenerator) {\n    return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\n  };\n\n  SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {\n    return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\n  };\n\n  SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {\n    return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\n  };\n\n  SortedMap.prototype.getReverseIterator = function (resultGenerator) {\n    return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\n  };\n  /**\r\n   * Always use the same empty node, to reduce memory.\r\n   * @const\r\n   */\n\n\n  SortedMap.EMPTY_NODE = new LLRBEmptyNode();\n  return SortedMap;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar LOG_2 = Math.log(2);\n/**\r\n * @constructor\r\n */\n\nvar Base12Num =\n/** @class */\nfunction () {\n  /**\r\n   * @param {number} length\r\n   */\n  function Base12Num(length) {\n    var logBase2 = function (num) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      return parseInt(Math.log(num) / LOG_2, 10);\n    };\n\n    var bitMask = function (bits) {\n      return parseInt(Array(bits + 1).join('1'), 2);\n    };\n\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    var mask = bitMask(this.count);\n    this.bits_ = length + 1 & mask;\n  }\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  Base12Num.prototype.nextBitIsOne = function () {\n    //noinspection JSBitwiseOperatorUsage\n    var result = !(this.bits_ & 0x1 << this.current_);\n    this.current_--;\n    return result;\n  };\n\n  return Base12Num;\n}();\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @template K, V\r\n * @param {Array.<!NamedNode>} childList Unsorted list of children\r\n * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used\r\n * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's\r\n *                                                        type is not NamedNode\r\n * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map\r\n * @return {SortedMap.<K, V>}\r\n */\n\n\nvar buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\n  childList.sort(cmp);\n\n  var buildBalancedTree = function (low, high) {\n    var length = high - low;\n    var namedNode;\n    var key;\n\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : namedNode;\n      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      var middle = parseInt(length / 2, 10) + low;\n      var left = buildBalancedTree(low, middle);\n      var right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : namedNode;\n      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\n    }\n  };\n\n  var buildFrom12Array = function (base12) {\n    var node = null;\n    var root = null;\n    var index = childList.length;\n\n    var buildPennant = function (chunkSize, color) {\n      var low = index - chunkSize;\n      var high = index;\n      index -= chunkSize;\n      var childTree = buildBalancedTree(low + 1, high);\n      var namedNode = childList[low];\n      var key = keyFn ? keyFn(namedNode) : namedNode;\n      attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\n    };\n\n    var attachPennant = function (pennant) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (var i = 0; i < base12.count; ++i) {\n      var isOne = base12.nextBitIsOne(); // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n\n      var chunkSize = Math.pow(2, base12.count - (i + 1));\n\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n\n    return root;\n  };\n\n  var base12 = new Base12Num(childList.length);\n  var root = buildFrom12Array(base12); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  return new SortedMap(mapSortFn || cmp, root);\n};\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar _defaultIndexMap;\n\nvar fallbackObject = {};\n\nvar IndexMap =\n/** @class */\nfunction () {\n  function IndexMap(indexes_, indexSet_) {\n    this.indexes_ = indexes_;\n    this.indexSet_ = indexSet_;\n  }\n\n  Object.defineProperty(IndexMap, \"Default\", {\n    /**\r\n     * The default IndexMap for nodes without a priority\r\n     */\n    get: function () {\n      util.assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\n      _defaultIndexMap = _defaultIndexMap || new IndexMap({\n        '.priority': fallbackObject\n      }, {\n        '.priority': PRIORITY_INDEX\n      });\n      return _defaultIndexMap;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IndexMap.prototype.get = function (indexKey) {\n    var sortedMap = util.safeGet(this.indexes_, indexKey);\n\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  };\n\n  IndexMap.prototype.hasIndex = function (indexDefinition) {\n    return util.contains(this.indexSet_, indexDefinition.toString());\n  };\n\n  IndexMap.prototype.addIndex = function (indexDefinition, existingChildren) {\n    util.assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\n    var childList = [];\n    var sawIndexedValue = false;\n    var iter = existingChildren.getIterator(NamedNode.Wrap);\n    var next = iter.getNext();\n\n    while (next) {\n      sawIndexedValue = sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n\n    var newIndex;\n\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n\n    var indexName = indexDefinition.toString();\n\n    var newIndexSet = tslib.__assign({}, this.indexSet_);\n\n    newIndexSet[indexName] = indexDefinition;\n\n    var newIndexes = tslib.__assign({}, this.indexes_);\n\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  };\n  /**\r\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n   */\n\n\n  IndexMap.prototype.addToIndexes = function (namedNode, existingChildren) {\n    var _this = this;\n\n    var newIndexes = util.map(this.indexes_, function (indexedChildren, indexName) {\n      var index = util.safeGet(_this.indexSet_, indexName);\n      util.assert(index, 'Missing index implementation for ' + indexName);\n\n      if (indexedChildren === fallbackObject) {\n        // Check to see if we need to index everything\n        if (index.isDefinedOn(namedNode.node)) {\n          // We need to build this index\n          var childList = [];\n          var iter = existingChildren.getIterator(NamedNode.Wrap);\n          var next = iter.getNext();\n\n          while (next) {\n            if (next.name !== namedNode.name) {\n              childList.push(next);\n            }\n\n            next = iter.getNext();\n          }\n\n          childList.push(namedNode);\n          return buildChildSet(childList, index.getCompare());\n        } else {\n          // No change, this remains a fallback\n          return fallbackObject;\n        }\n      } else {\n        var existingSnap = existingChildren.get(namedNode.name);\n        var newChildren = indexedChildren;\n\n        if (existingSnap) {\n          newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\n        }\n\n        return newChildren.insert(namedNode, namedNode.node);\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  };\n  /**\r\n   * Create a new IndexMap instance with the given value removed\r\n   */\n\n\n  IndexMap.prototype.removeFromIndexes = function (namedNode, existingChildren) {\n    var newIndexes = util.map(this.indexes_, function (indexedChildren) {\n      if (indexedChildren === fallbackObject) {\n        // This is the fallback. Just return it, nothing to do in this case\n        return indexedChildren;\n      } else {\n        var existingSnap = existingChildren.get(namedNode.name);\n\n        if (existingSnap) {\n          return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\n        } else {\n          // No record of this child\n          return indexedChildren;\n        }\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  };\n\n  return IndexMap;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction NAME_ONLY_COMPARATOR(left, right) {\n  return nameCompare(left.name, right.name);\n}\n\nfunction NAME_COMPARATOR(left, right) {\n  return nameCompare(left, right);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\n\nvar EMPTY_NODE;\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n *\r\n * @constructor\r\n * @implements {Node}\r\n */\n\nvar ChildrenNode =\n/** @class */\nfunction () {\n  /**\r\n   *\r\n   * @param {!SortedMap.<string, !Node>} children_ List of children\r\n   * of this node..\r\n   * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).\r\n   * @param {!IndexMap} indexMap_\r\n   */\n  function ChildrenNode(children_, priorityNode_, indexMap_) {\n    this.children_ = children_;\n    this.priorityNode_ = priorityNode_;\n    this.indexMap_ = indexMap_;\n    this.lazyHash_ = null;\n    /**\r\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n     * class instead of an empty ChildrenNode.\r\n     */\n\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      util.assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\n    }\n  }\n\n  Object.defineProperty(ChildrenNode, \"EMPTY_NODE\", {\n    get: function () {\n      return EMPTY_NODE || (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default));\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** @inheritDoc */\n\n  ChildrenNode.prototype.isLeafNode = function () {\n    return false;\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.getPriority = function () {\n    return this.priorityNode_ || EMPTY_NODE;\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.updatePriority = function (newPriorityNode) {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.getImmediateChild = function (childName) {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      var child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.getChild = function (path) {\n    var front = path.getFront();\n\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(path.popFront());\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.hasChild = function (childName) {\n    return this.children_.get(childName) !== null;\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.updateImmediateChild = function (childName, newChildNode) {\n    util.assert(newChildNode, 'We should always be passing snapshot nodes');\n\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      var namedNode = new NamedNode(childName, newChildNode);\n      var newChildren = void 0,\n          newIndexMap = void 0;\n\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      var newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.updateChild = function (path, newChildNode) {\n    var front = path.getFront();\n\n    if (front === null) {\n      return newChildNode;\n    } else {\n      util.assert(path.getFront() !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\n      var newImmediateChild = this.getImmediateChild(front).updateChild(path.popFront(), newChildNode);\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.isEmpty = function () {\n    return this.children_.isEmpty();\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.numChildren = function () {\n    return this.children_.count();\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.val = function (exportFormat) {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    var obj = {};\n    var numKeys = 0,\n        maxKey = 0,\n        allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n      obj[key] = childNode.val(exportFormat);\n      numKeys++;\n\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      var array = []; // eslint-disable-next-line guard-for-in\n\n      for (var key in obj) {\n        array[key] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n\n      return obj;\n    }\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.hash = function () {\n    if (this.lazyHash_ === null) {\n      var toHash_1 = '';\n\n      if (!this.getPriority().isEmpty()) {\n        toHash_1 += 'priority:' + priorityHashText(this.getPriority().val()) + ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n        var childHash = childNode.hash();\n\n        if (childHash !== '') {\n          toHash_1 += ':' + key + ':' + childHash;\n        }\n      });\n      this.lazyHash_ = toHash_1 === '' ? '' : sha1(toHash_1);\n    }\n\n    return this.lazyHash_;\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.getPredecessorChildName = function (childName, childNode, index) {\n    var idx = this.resolveIndex_(index);\n\n    if (idx) {\n      var predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  };\n  /**\r\n   * @param {!Index} indexDefinition\r\n   * @return {?string}\r\n   */\n\n\n  ChildrenNode.prototype.getFirstChildName = function (indexDefinition) {\n    var idx = this.resolveIndex_(indexDefinition);\n\n    if (idx) {\n      var minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  };\n  /**\r\n   * @param {!Index} indexDefinition\r\n   * @return {?NamedNode}\r\n   */\n\n\n  ChildrenNode.prototype.getFirstChild = function (indexDefinition) {\n    var minKey = this.getFirstChildName(indexDefinition);\n\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * Given an index, return the key name of the largest value we have, according to that index\r\n   * @param {!Index} indexDefinition\r\n   * @return {?string}\r\n   */\n\n\n  ChildrenNode.prototype.getLastChildName = function (indexDefinition) {\n    var idx = this.resolveIndex_(indexDefinition);\n\n    if (idx) {\n      var maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  };\n  /**\r\n   * @param {!Index} indexDefinition\r\n   * @return {?NamedNode}\r\n   */\n\n\n  ChildrenNode.prototype.getLastChild = function (indexDefinition) {\n    var maxKey = this.getLastChildName(indexDefinition);\n\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildrenNode.prototype.forEachChild = function (index, action) {\n    var idx = this.resolveIndex_(index);\n\n    if (idx) {\n      return idx.inorderTraversal(function (wrappedNode) {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  };\n  /**\r\n   * @param {!Index} indexDefinition\r\n   * @return {SortedMapIterator}\r\n   */\n\n\n  ChildrenNode.prototype.getIterator = function (indexDefinition) {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  };\n  /**\r\n   *\r\n   * @param {!NamedNode} startPost\r\n   * @param {!Index} indexDefinition\r\n   * @return {!SortedMapIterator}\r\n   */\n\n\n  ChildrenNode.prototype.getIteratorFrom = function (startPost, indexDefinition) {\n    var idx = this.resolveIndex_(indexDefinition);\n\n    if (idx) {\n      return idx.getIteratorFrom(startPost, function (key) {\n        return key;\n      });\n    } else {\n      var iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\n      var next = iterator.peek();\n\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n\n      return iterator;\n    }\n  };\n  /**\r\n   * @param {!Index} indexDefinition\r\n   * @return {!SortedMapIterator}\r\n   */\n\n\n  ChildrenNode.prototype.getReverseIterator = function (indexDefinition) {\n    return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\n  };\n  /**\r\n   * @param {!NamedNode} endPost\r\n   * @param {!Index} indexDefinition\r\n   * @return {!SortedMapIterator}\r\n   */\n\n\n  ChildrenNode.prototype.getReverseIteratorFrom = function (endPost, indexDefinition) {\n    var idx = this.resolveIndex_(indexDefinition);\n\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, function (key) {\n        return key;\n      });\n    } else {\n      var iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\n      var next = iterator.peek();\n\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n\n      return iterator;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildrenNode.prototype.compareTo = function (other) {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE$2) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildrenNode.prototype.withIndex = function (indexDefinition) {\n    if (indexDefinition === KEY_INDEX || this.indexMap_.hasIndex(indexDefinition)) {\n      return this;\n    } else {\n      var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildrenNode.prototype.isIndexed = function (index) {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildrenNode.prototype.equals = function (other) {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      var otherChildrenNode = other;\n\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (this.children_.count() === otherChildrenNode.children_.count()) {\n        var thisIter = this.getIterator(PRIORITY_INDEX);\n        var otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        var thisCurrent = thisIter.getNext();\n        var otherCurrent = otherIter.getNext();\n\n        while (thisCurrent && otherCurrent) {\n          if (thisCurrent.name !== otherCurrent.name || !thisCurrent.node.equals(otherCurrent.node)) {\n            return false;\n          }\n\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  };\n  /**\r\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n   * instead.\r\n   *\r\n   * @private\r\n   * @param {!Index} indexDefinition\r\n   * @return {?SortedMap.<NamedNode, Node>}\r\n   */\n\n\n  ChildrenNode.prototype.resolveIndex_ = function (indexDefinition) {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  };\n  /**\r\n   * @private\r\n   * @type {RegExp}\r\n   */\n\n\n  ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n  return ChildrenNode;\n}();\n/**\r\n * @constructor\r\n * @extends {ChildrenNode}\r\n * @private\r\n */\n\n\nvar MaxNode =\n/** @class */\nfunction (_super) {\n  tslib.__extends(MaxNode, _super);\n\n  function MaxNode() {\n    return _super.call(this, new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default) || this;\n  }\n\n  MaxNode.prototype.compareTo = function (other) {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  };\n\n  MaxNode.prototype.equals = function (other) {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  };\n\n  MaxNode.prototype.getPriority = function () {\n    return this;\n  };\n\n  MaxNode.prototype.getImmediateChild = function (childName) {\n    return ChildrenNode.EMPTY_NODE;\n  };\n\n  MaxNode.prototype.isEmpty = function () {\n    return false;\n  };\n\n  return MaxNode;\n}(ChildrenNode);\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n * @type {!MAX_NODE}\r\n * @const\r\n */\n\n\nvar MAX_NODE$2 = new MaxNode();\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE$2)\n  }\n});\n/**\r\n * Reference Extensions\r\n */\n\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE$2);\nsetMaxNode$1(MAX_NODE$2);\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar USE_HINZE = true;\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param {*} json JSON to create a node for.\r\n * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n * @return {!Node}\r\n */\n\nfunction nodeFromJSON$1(json, priority) {\n  if (priority === void 0) {\n    priority = null;\n  }\n\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  util.assert(priority === null || typeof priority === 'string' || typeof priority === 'number' || typeof priority === 'object' && '.sv' in priority, 'Invalid priority type found: ' + typeof priority);\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  } // Valid leaf nodes include non-objects or server-value wrapper objects\n\n\n  if (typeof json !== 'object' || '.sv' in json) {\n    var jsonLeaf = json;\n    return new LeafNode(jsonLeaf, nodeFromJSON$1(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    var children_1 = [];\n    var childrenHavePriority_1 = false;\n    var hinzeJsonObj = json;\n    each(hinzeJsonObj, function (key, child) {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        var childNode = nodeFromJSON$1(child);\n\n        if (!childNode.isEmpty()) {\n          childrenHavePriority_1 = childrenHavePriority_1 || !childNode.getPriority().isEmpty();\n          children_1.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children_1.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    var childSet = buildChildSet(children_1, NAME_ONLY_COMPARATOR, function (namedNode) {\n      return namedNode.name;\n    }, NAME_COMPARATOR);\n\n    if (childrenHavePriority_1) {\n      var sortedChildSet = buildChildSet(children_1, PRIORITY_INDEX.getCompare());\n      return new ChildrenNode(childSet, nodeFromJSON$1(priority), new IndexMap({\n        '.priority': sortedChildSet\n      }, {\n        '.priority': PRIORITY_INDEX\n      }));\n    } else {\n      return new ChildrenNode(childSet, nodeFromJSON$1(priority), IndexMap.Default);\n    }\n  } else {\n    var node_1 = ChildrenNode.EMPTY_NODE;\n    each(json, function (key, childData) {\n      if (util.contains(json, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          var childNode = nodeFromJSON$1(childData);\n\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node_1 = node_1.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n    return node_1.updatePriority(nodeFromJSON$1(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON$1);\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\n\nvar ValueIndex =\n/** @class */\nfunction (_super) {\n  tslib.__extends(ValueIndex, _super);\n\n  function ValueIndex() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueIndex.prototype.compare = function (a, b) {\n    var indexCmp = a.node.compareTo(b.node);\n\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueIndex.prototype.isDefinedOn = function (node) {\n    return true;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n    return !oldNode.equals(newNode);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueIndex.prototype.minPost = function () {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueIndex.prototype.maxPost = function () {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MAX;\n  };\n  /**\r\n   * @param {*} indexValue\r\n   * @param {string} name\r\n   * @return {!NamedNode}\r\n   */\n\n\n  ValueIndex.prototype.makePost = function (indexValue, name) {\n    var valueNode = nodeFromJSON$1(indexValue);\n    return new NamedNode(name, valueNode);\n  };\n  /**\r\n   * @return {!string} String representation for inclusion in a query spec\r\n   */\n\n\n  ValueIndex.prototype.toString = function () {\n    return '.value';\n  };\n\n  return ValueIndex;\n}(Index);\n\nvar VALUE_INDEX = new ValueIndex();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param {!Path} indexPath\r\n * @constructor\r\n * @extends {Index}\r\n */\n\nvar PathIndex =\n/** @class */\nfunction (_super) {\n  tslib.__extends(PathIndex, _super);\n\n  function PathIndex(indexPath_) {\n    var _this = _super.call(this) || this;\n\n    _this.indexPath_ = indexPath_;\n    util.assert(!indexPath_.isEmpty() && indexPath_.getFront() !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\n    return _this;\n  }\n  /**\r\n   * @param {!Node} snap\r\n   * @return {!Node}\r\n   * @protected\r\n   */\n\n\n  PathIndex.prototype.extractChild = function (snap) {\n    return snap.getChild(this.indexPath_);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PathIndex.prototype.isDefinedOn = function (node) {\n    return !node.getChild(this.indexPath_).isEmpty();\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PathIndex.prototype.compare = function (a, b) {\n    var aChild = this.extractChild(a.node);\n    var bChild = this.extractChild(b.node);\n    var indexCmp = aChild.compareTo(bChild);\n\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PathIndex.prototype.makePost = function (indexValue, name) {\n    var valueNode = nodeFromJSON$1(indexValue);\n    var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\n    return new NamedNode(name, node);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PathIndex.prototype.maxPost = function () {\n    var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE$2);\n    return new NamedNode(MAX_NAME, node);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PathIndex.prototype.toString = function () {\n    return this.indexPath_.slice().join('/');\n  };\n\n  return PathIndex;\n}(Index);\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\r\n * surfaces the public methods (val, forEach, etc.) we want to expose.\r\n */\n\n\nvar DataSnapshot =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!Node} node_ A SnapshotNode to wrap.\r\n   * @param {!Reference} ref_ The ref of the location this snapshot came from.\r\n   * @param {!Index} index_ The iteration order for this snapshot\r\n   */\n  function DataSnapshot(node_, ref_, index_) {\n    this.node_ = node_;\n    this.ref_ = ref_;\n    this.index_ = index_;\n  }\n  /**\r\n   * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\r\n   * empty.\r\n   *\r\n   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\r\n   */\n\n\n  DataSnapshot.prototype.val = function () {\n    util.validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\n    return this.node_.val();\n  };\n  /**\r\n   * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\r\n   * the entire node contents.\r\n   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\r\n   */\n\n\n  DataSnapshot.prototype.exportVal = function () {\n    util.validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\n    return this.node_.val(true);\n  }; // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n\n\n  DataSnapshot.prototype.toJSON = function () {\n    // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\n    util.validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\n    return this.exportVal();\n  };\n  /**\r\n   * Returns whether the snapshot contains a non-null value.\r\n   *\r\n   * @return {boolean} Whether the snapshot contains a non-null value, or is empty.\r\n   */\n\n\n  DataSnapshot.prototype.exists = function () {\n    util.validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\n    return !this.node_.isEmpty();\n  };\n  /**\r\n   * Returns a DataSnapshot of the specified child node's contents.\r\n   *\r\n   * @param {!string} childPathString Path to a child.\r\n   * @return {!DataSnapshot} DataSnapshot for child node.\r\n   */\n\n\n  DataSnapshot.prototype.child = function (childPathString) {\n    util.validateArgCount('DataSnapshot.child', 0, 1, arguments.length); // Ensure the childPath is a string (can be a number)\n\n    childPathString = String(childPathString);\n    validatePathString('DataSnapshot.child', 1, childPathString, false);\n    var childPath = new Path(childPathString);\n    var childRef = this.ref_.child(childPath);\n    return new DataSnapshot(this.node_.getChild(childPath), childRef, PRIORITY_INDEX);\n  };\n  /**\r\n   * Returns whether the snapshot contains a child at the specified path.\r\n   *\r\n   * @param {!string} childPathString Path to a child.\r\n   * @return {boolean} Whether the child exists.\r\n   */\n\n\n  DataSnapshot.prototype.hasChild = function (childPathString) {\n    util.validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\n    validatePathString('DataSnapshot.hasChild', 1, childPathString, false);\n    var childPath = new Path(childPathString);\n    return !this.node_.getChild(childPath).isEmpty();\n  };\n  /**\r\n   * Returns the priority of the object, or null if no priority was set.\r\n   *\r\n   * @return {string|number|null} The priority.\r\n   */\n\n\n  DataSnapshot.prototype.getPriority = function () {\n    util.validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length); // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n\n    return this.node_.getPriority().val();\n  };\n  /**\r\n   * Iterates through child nodes and calls the specified action for each one.\r\n   *\r\n   * @param {function(!DataSnapshot)} action Callback function to be called\r\n   * for each child.\r\n   * @return {boolean} True if forEach was canceled by action returning true for\r\n   * one of the child nodes.\r\n   */\n\n\n  DataSnapshot.prototype.forEach = function (action) {\n    var _this = this;\n\n    util.validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\n    util.validateCallback('DataSnapshot.forEach', 1, action, false);\n\n    if (this.node_.isLeafNode()) {\n      return false;\n    }\n\n    var childrenNode = this.node_; // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n\n    return !!childrenNode.forEachChild(this.index_, function (key, node) {\n      return action(new DataSnapshot(node, _this.ref_.child(key), PRIORITY_INDEX));\n    });\n  };\n  /**\r\n   * Returns whether this DataSnapshot has children.\r\n   * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.\r\n   */\n\n\n  DataSnapshot.prototype.hasChildren = function () {\n    util.validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\n\n    if (this.node_.isLeafNode()) {\n      return false;\n    } else {\n      return !this.node_.isEmpty();\n    }\n  };\n\n  Object.defineProperty(DataSnapshot.prototype, \"key\", {\n    get: function () {\n      return this.ref_.getKey();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Returns the number of children for this DataSnapshot.\r\n   * @return {number} The number of children that this DataSnapshot contains.\r\n   */\n\n  DataSnapshot.prototype.numChildren = function () {\n    util.validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\n    return this.node_.numChildren();\n  };\n  /**\r\n   * @return {Reference} The Firebase reference for the location this snapshot's data came from.\r\n   */\n\n\n  DataSnapshot.prototype.getRef = function () {\n    util.validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\n    return this.ref_;\n  };\n\n  Object.defineProperty(DataSnapshot.prototype, \"ref\", {\n    get: function () {\n      return this.getRef();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return DataSnapshot;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Encapsulates the data needed to raise an event\r\n * @implements {Event}\r\n */\n\n\nvar DataEvent =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed\r\n   * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided\r\n   * @param {!DataSnapshot} snapshot The data backing the event\r\n   * @param {?string=} prevName Optional, the name of the previous child for child_* events.\r\n   */\n  function DataEvent(eventType, eventRegistration, snapshot, prevName) {\n    this.eventType = eventType;\n    this.eventRegistration = eventRegistration;\n    this.snapshot = snapshot;\n    this.prevName = prevName;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  DataEvent.prototype.getPath = function () {\n    var ref = this.snapshot.getRef();\n\n    if (this.eventType === 'value') {\n      return ref.path;\n    } else {\n      return ref.getParent().path;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  DataEvent.prototype.getEventType = function () {\n    return this.eventType;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  DataEvent.prototype.getEventRunner = function () {\n    return this.eventRegistration.getEventRunner(this);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  DataEvent.prototype.toString = function () {\n    return this.getPath().toString() + ':' + this.eventType + ':' + util.stringify(this.snapshot.exportVal());\n  };\n\n  return DataEvent;\n}();\n\nvar CancelEvent =\n/** @class */\nfunction () {\n  /**\r\n   * @param {EventRegistration} eventRegistration\r\n   * @param {Error} error\r\n   * @param {!Path} path\r\n   */\n  function CancelEvent(eventRegistration, error, path) {\n    this.eventRegistration = eventRegistration;\n    this.error = error;\n    this.path = path;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  CancelEvent.prototype.getPath = function () {\n    return this.path;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  CancelEvent.prototype.getEventType = function () {\n    return 'cancel';\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  CancelEvent.prototype.getEventRunner = function () {\n    return this.eventRegistration.getEventRunner(this);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  CancelEvent.prototype.toString = function () {\n    return this.path.toString() + ':cancel';\n  };\n\n  return CancelEvent;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Represents registration for 'value' events.\r\n */\n\n\nvar ValueEventRegistration =\n/** @class */\nfunction () {\n  /**\r\n   * @param {?function(!DataSnapshot)} callback_\r\n   * @param {?function(Error)} cancelCallback_\r\n   * @param {?Object} context_\r\n   */\n  function ValueEventRegistration(callback_, cancelCallback_, context_) {\n    this.callback_ = callback_;\n    this.cancelCallback_ = cancelCallback_;\n    this.context_ = context_;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueEventRegistration.prototype.respondsTo = function (eventType) {\n    return eventType === 'value';\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueEventRegistration.prototype.createEvent = function (change, query) {\n    var index = query.getQueryParams().getIndex();\n    return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, query.getRef(), index));\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueEventRegistration.prototype.getEventRunner = function (eventData) {\n    var ctx = this.context_;\n\n    if (eventData.getEventType() === 'cancel') {\n      util.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\n      var cancelCB_1 = this.cancelCallback_;\n      return function () {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB_1.call(ctx, eventData.error);\n      };\n    } else {\n      var cb_1 = this.callback_;\n      return function () {\n        cb_1.call(ctx, eventData.snapshot);\n      };\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueEventRegistration.prototype.createCancelEvent = function (error, path) {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueEventRegistration.prototype.matches = function (other) {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callback_ || !this.callback_) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callback_ === this.callback_ && other.context_ === this.context_;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueEventRegistration.prototype.hasAnyCallback = function () {\n    return this.callback_ !== null;\n  };\n\n  return ValueEventRegistration;\n}();\n/**\r\n * Represents the registration of 1 or more child_xxx events.\r\n *\r\n * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you\r\n * register a group of callbacks together in the future.\r\n *\r\n * @constructor\r\n * @implements {EventRegistration}\r\n */\n\n\nvar ChildEventRegistration =\n/** @class */\nfunction () {\n  /**\r\n   * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_\r\n   * @param {?function(Error)} cancelCallback_\r\n   * @param {Object=} context_\r\n   */\n  function ChildEventRegistration(callbacks_, cancelCallback_, context_) {\n    this.callbacks_ = callbacks_;\n    this.cancelCallback_ = cancelCallback_;\n    this.context_ = context_;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildEventRegistration.prototype.respondsTo = function (eventType) {\n    var eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck = eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return util.contains(this.callbacks_, eventToCheck);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildEventRegistration.prototype.createCancelEvent = function (error, path) {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildEventRegistration.prototype.createEvent = function (change, query) {\n    util.assert(change.childName != null, 'Child events should have a childName.');\n    var ref = query.getRef().child(\n    /** @type {!string} */\n    change.childName);\n    var index = query.getQueryParams().getIndex();\n    return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, ref, index), change.prevName);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildEventRegistration.prototype.getEventRunner = function (eventData) {\n    var ctx = this.context_;\n\n    if (eventData.getEventType() === 'cancel') {\n      util.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\n      var cancelCB_2 = this.cancelCallback_;\n      return function () {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB_2.call(ctx, eventData.error);\n      };\n    } else {\n      var cb_2 = this.callbacks_[eventData.eventType];\n      return function () {\n        cb_2.call(ctx, eventData.snapshot, eventData.prevName);\n      };\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildEventRegistration.prototype.matches = function (other) {\n    var _this = this;\n\n    if (other instanceof ChildEventRegistration) {\n      if (!this.callbacks_ || !other.callbacks_) {\n        return true;\n      } else if (this.context_ === other.context_) {\n        var otherKeys = Object.keys(other.callbacks_);\n        var thisKeys = Object.keys(this.callbacks_);\n        var otherCount = otherKeys.length;\n        var thisCount = thisKeys.length;\n\n        if (otherCount === thisCount) {\n          // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.\n          // If event types don't match, not a match\n          // If count is not 1, exact match across all\n          if (otherCount === 1) {\n            var otherKey = otherKeys[0];\n            var thisKey = thisKeys[0];\n            return thisKey === otherKey && (!other.callbacks_[otherKey] || !this.callbacks_[thisKey] || other.callbacks_[otherKey] === this.callbacks_[thisKey]);\n          } else {\n            // Exact match on each key.\n            return thisKeys.every(function (eventType) {\n              return other.callbacks_[eventType] === _this.callbacks_[eventType];\n            });\n          }\n        }\n      }\n    }\n\n    return false;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildEventRegistration.prototype.hasAnyCallback = function () {\n    return this.callbacks_ !== null;\n  };\n\n  return ChildEventRegistration;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar __referenceConstructor;\n/**\r\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\r\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\r\n *\r\n * Since every Firebase reference is a query, Firebase inherits from this object.\r\n */\n\n\nvar Query =\n/** @class */\nfunction () {\n  function Query(repo, path, queryParams_, orderByCalled_) {\n    this.repo = repo;\n    this.path = path;\n    this.queryParams_ = queryParams_;\n    this.orderByCalled_ = orderByCalled_;\n  }\n\n  Object.defineProperty(Query, \"__referenceConstructor\", {\n    get: function () {\n      util.assert(__referenceConstructor, 'Reference.ts has not been loaded');\n      return __referenceConstructor;\n    },\n    set: function (val) {\n      __referenceConstructor = val;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Validates start/end values for queries.\r\n   * @param {!QueryParams} params\r\n   * @private\r\n   */\n\n  Query.validateQueryEndpoints_ = function (params) {\n    var startNode = null;\n    var endNode = null;\n\n    if (params.hasStart()) {\n      startNode = params.getIndexStartValue();\n    }\n\n    if (params.hasEnd()) {\n      endNode = params.getIndexEndValue();\n    }\n\n    if (params.getIndex() === KEY_INDEX) {\n      var tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' + 'startAt(), endAt(), or equalTo().';\n      var wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), endAt(),' + 'or equalTo() must be a string.';\n\n      if (params.hasStart()) {\n        var startName = params.getIndexStartName();\n\n        if (startName !== MIN_NAME) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof startNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n\n      if (params.hasEnd()) {\n        var endName = params.getIndexEndName();\n\n        if (endName !== MAX_NAME) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof endNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n    } else if (params.getIndex() === PRIORITY_INDEX) {\n      if (startNode != null && !isValidPriority(startNode) || endNode != null && !isValidPriority(endNode)) {\n        throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' + 'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).');\n      }\n    } else {\n      util.assert(params.getIndex() instanceof PathIndex || params.getIndex() === VALUE_INDEX, 'unknown index type.');\n\n      if (startNode != null && typeof startNode === 'object' || endNode != null && typeof endNode === 'object') {\n        throw new Error('Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' + 'an object.');\n      }\n    }\n  };\n  /**\r\n   * Validates that limit* has been called with the correct combination of parameters\r\n   * @param {!QueryParams} params\r\n   * @private\r\n   */\n\n\n  Query.validateLimit_ = function (params) {\n    if (params.hasStart() && params.hasEnd() && params.hasLimit() && !params.hasAnchoredLimit()) {\n      throw new Error(\"Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.\");\n    }\n  };\n  /**\r\n   * Validates that no other order by call has been made\r\n   * @param {!string} fnName\r\n   * @private\r\n   */\n\n\n  Query.prototype.validateNoPreviousOrderByCall_ = function (fnName) {\n    if (this.orderByCalled_ === true) {\n      throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n    }\n  };\n  /**\r\n   * @return {!QueryParams}\r\n   */\n\n\n  Query.prototype.getQueryParams = function () {\n    return this.queryParams_;\n  };\n  /**\r\n   * @return {!Reference}\r\n   */\n\n\n  Query.prototype.getRef = function () {\n    util.validateArgCount('Query.ref', 0, 0, arguments.length); // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.\n    // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this\n    // method gets called.\n\n    return new Query.__referenceConstructor(this.repo, this.path);\n  };\n  /**\r\n   * @param {!string} eventType\r\n   * @param {!function(DataSnapshot, string=)} callback\r\n   * @param {(function(Error)|Object)=} cancelCallbackOrContext\r\n   * @param {Object=} context\r\n   * @return {!function(DataSnapshot, string=)}\r\n   */\n\n\n  Query.prototype.on = function (eventType, callback, cancelCallbackOrContext, context) {\n    util.validateArgCount('Query.on', 2, 4, arguments.length);\n    validateEventType('Query.on', 1, eventType, false);\n    util.validateCallback('Query.on', 2, callback, false);\n    var ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);\n\n    if (eventType === 'value') {\n      this.onValueEvent(callback, ret.cancel, ret.context);\n    } else {\n      var callbacks = {};\n      callbacks[eventType] = callback;\n      this.onChildEvent(callbacks, ret.cancel, ret.context);\n    }\n\n    return callback;\n  };\n  /**\r\n   * @param {!function(!DataSnapshot)} callback\r\n   * @param {?function(Error)} cancelCallback\r\n   * @param {?Object} context\r\n   * @protected\r\n   */\n\n\n  Query.prototype.onValueEvent = function (callback, cancelCallback, context) {\n    var container = new ValueEventRegistration(callback, cancelCallback || null, context || null);\n    this.repo.addEventCallbackForQuery(this, container);\n  };\n  /**\r\n   * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks\r\n   * @param {?function(Error)} cancelCallback\r\n   * @param {?Object} context\r\n   * @protected\r\n   */\n\n\n  Query.prototype.onChildEvent = function (callbacks, cancelCallback, context) {\n    var container = new ChildEventRegistration(callbacks, cancelCallback, context);\n    this.repo.addEventCallbackForQuery(this, container);\n  };\n  /**\r\n   * @param {string=} eventType\r\n   * @param {(function(!DataSnapshot, ?string=))=} callback\r\n   * @param {Object=} context\r\n   */\n\n\n  Query.prototype.off = function (eventType, callback, context) {\n    util.validateArgCount('Query.off', 0, 3, arguments.length);\n    validateEventType('Query.off', 1, eventType, true);\n    util.validateCallback('Query.off', 2, callback, true);\n    util.validateContextObject('Query.off', 3, context, true);\n    var container = null;\n    var callbacks = null;\n\n    if (eventType === 'value') {\n      var valueCallback = callback || null;\n      container = new ValueEventRegistration(valueCallback, null, context || null);\n    } else if (eventType) {\n      if (callback) {\n        callbacks = {};\n        callbacks[eventType] = callback;\n      }\n\n      container = new ChildEventRegistration(callbacks, null, context || null);\n    }\n\n    this.repo.removeEventCallbackForQuery(this, container);\n  };\n  /**\r\n   * Attaches a listener, waits for the first event, and then removes the listener\r\n   * @param {!string} eventType\r\n   * @param {!function(!DataSnapshot, string=)} userCallback\r\n   * @param failureCallbackOrContext\r\n   * @param context\r\n   * @return {!firebase.Promise}\r\n   */\n\n\n  Query.prototype.once = function (eventType, userCallback, failureCallbackOrContext, context) {\n    var _this = this;\n\n    util.validateArgCount('Query.once', 1, 4, arguments.length);\n    validateEventType('Query.once', 1, eventType, false);\n    util.validateCallback('Query.once', 2, userCallback, true);\n    var ret = Query.getCancelAndContextArgs_('Query.once', failureCallbackOrContext, context); // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)\n    // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change\n    // because the API currently expects callbacks will be called synchronously if the data is cached, but this is\n    // against the Promise specification.\n\n    var firstCall = true;\n    var deferred = new util.Deferred(); // A dummy error handler in case a user wasn't expecting promises\n\n    deferred.promise.catch(function () {});\n\n    var onceCallback = function (snapshot) {\n      // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)\n      // triggers multiple events (e.g. child_added or child_changed).\n      if (firstCall) {\n        firstCall = false;\n\n        _this.off(eventType, onceCallback);\n\n        if (userCallback) {\n          userCallback.bind(ret.context)(snapshot);\n        }\n\n        deferred.resolve(snapshot);\n      }\n    };\n\n    this.on(eventType, onceCallback,\n    /*cancel=*/\n    function (err) {\n      _this.off(eventType, onceCallback);\n\n      if (ret.cancel) {\n        ret.cancel.bind(ret.context)(err);\n      }\n\n      deferred.reject(err);\n    });\n    return deferred.promise;\n  };\n  /**\r\n   * Set a limit and anchor it to the start of the window.\r\n   * @param {!number} limit\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.limitToFirst = function (limit) {\n    util.validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\n\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n      throw new Error('Query.limitToFirst: First argument must be a positive integer.');\n    }\n\n    if (this.queryParams_.hasLimit()) {\n      throw new Error('Query.limitToFirst: Limit was already set (by another call to limit, ' + 'limitToFirst, or limitToLast).');\n    }\n\n    return new Query(this.repo, this.path, this.queryParams_.limitToFirst(limit), this.orderByCalled_);\n  };\n  /**\r\n   * Set a limit and anchor it to the end of the window.\r\n   * @param {!number} limit\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.limitToLast = function (limit) {\n    util.validateArgCount('Query.limitToLast', 1, 1, arguments.length);\n\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n      throw new Error('Query.limitToLast: First argument must be a positive integer.');\n    }\n\n    if (this.queryParams_.hasLimit()) {\n      throw new Error('Query.limitToLast: Limit was already set (by another call to limit, ' + 'limitToFirst, or limitToLast).');\n    }\n\n    return new Query(this.repo, this.path, this.queryParams_.limitToLast(limit), this.orderByCalled_);\n  };\n  /**\r\n   * Given a child path, return a new query ordered by the specified grandchild path.\r\n   * @param {!string} path\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.orderByChild = function (path) {\n    util.validateArgCount('Query.orderByChild', 1, 1, arguments.length);\n\n    if (path === '$key') {\n      throw new Error('Query.orderByChild: \"$key\" is invalid.  Use Query.orderByKey() instead.');\n    } else if (path === '$priority') {\n      throw new Error('Query.orderByChild: \"$priority\" is invalid.  Use Query.orderByPriority() instead.');\n    } else if (path === '$value') {\n      throw new Error('Query.orderByChild: \"$value\" is invalid.  Use Query.orderByValue() instead.');\n    }\n\n    validatePathString('Query.orderByChild', 1, path, false);\n    this.validateNoPreviousOrderByCall_('Query.orderByChild');\n    var parsedPath = new Path(path);\n\n    if (parsedPath.isEmpty()) {\n      throw new Error('Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.');\n    }\n\n    var index = new PathIndex(parsedPath);\n    var newParams = this.queryParams_.orderBy(index);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams,\n    /*orderByCalled=*/\n    true);\n  };\n  /**\r\n   * Return a new query ordered by the KeyIndex\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.orderByKey = function () {\n    util.validateArgCount('Query.orderByKey', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByKey');\n    var newParams = this.queryParams_.orderBy(KEY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams,\n    /*orderByCalled=*/\n    true);\n  };\n  /**\r\n   * Return a new query ordered by the PriorityIndex\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.orderByPriority = function () {\n    util.validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByPriority');\n    var newParams = this.queryParams_.orderBy(PRIORITY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams,\n    /*orderByCalled=*/\n    true);\n  };\n  /**\r\n   * Return a new query ordered by the ValueIndex\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.orderByValue = function () {\n    util.validateArgCount('Query.orderByValue', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByValue');\n    var newParams = this.queryParams_.orderBy(VALUE_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams,\n    /*orderByCalled=*/\n    true);\n  };\n  /**\r\n   * @param {number|string|boolean|null} value\r\n   * @param {?string=} name\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.startAt = function (value, name) {\n    if (value === void 0) {\n      value = null;\n    }\n\n    util.validateArgCount('Query.startAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);\n    validateKey('Query.startAt', 2, name, true);\n    var newParams = this.queryParams_.startAt(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n\n    if (this.queryParams_.hasStart()) {\n      throw new Error('Query.startAt: Starting point was already set (by another call to startAt ' + 'or equalTo).');\n    } // Calling with no params tells us to start at the beginning.\n\n\n    if (value === undefined) {\n      value = null;\n      name = null;\n    }\n\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  };\n  /**\r\n   * @param {number|string|boolean|null} value\r\n   * @param {?string=} name\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.endAt = function (value, name) {\n    if (value === void 0) {\n      value = null;\n    }\n\n    util.validateArgCount('Query.endAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);\n    validateKey('Query.endAt', 2, name, true);\n    var newParams = this.queryParams_.endAt(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n\n    if (this.queryParams_.hasEnd()) {\n      throw new Error('Query.endAt: Ending point was already set (by another call to endAt or ' + 'equalTo).');\n    }\n\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  };\n  /**\r\n   * Load the selection of children with exactly the specified value, and, optionally,\r\n   * the specified name.\r\n   * @param {number|string|boolean|null} value\r\n   * @param {string=} name\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.equalTo = function (value, name) {\n    util.validateArgCount('Query.equalTo', 1, 2, arguments.length);\n    validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);\n    validateKey('Query.equalTo', 2, name, true);\n\n    if (this.queryParams_.hasStart()) {\n      throw new Error('Query.equalTo: Starting point was already set (by another call to startAt or ' + 'equalTo).');\n    }\n\n    if (this.queryParams_.hasEnd()) {\n      throw new Error('Query.equalTo: Ending point was already set (by another call to endAt or ' + 'equalTo).');\n    }\n\n    return this.startAt(value, name).endAt(value, name);\n  };\n  /**\r\n   * @return {!string} URL for this location.\r\n   */\n\n\n  Query.prototype.toString = function () {\n    util.validateArgCount('Query.toString', 0, 0, arguments.length);\n    return this.repo.toString() + this.path.toUrlEncodedString();\n  }; // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users.\n\n\n  Query.prototype.toJSON = function () {\n    // An optional spacer argument is unnecessary for a string.\n    util.validateArgCount('Query.toJSON', 0, 1, arguments.length);\n    return this.toString();\n  };\n  /**\r\n   * An object representation of the query parameters used by this Query.\r\n   * @return {!Object}\r\n   */\n\n\n  Query.prototype.queryObject = function () {\n    return this.queryParams_.getQueryObject();\n  };\n  /**\r\n   * @return {!string}\r\n   */\n\n\n  Query.prototype.queryIdentifier = function () {\n    var obj = this.queryObject();\n    var id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  };\n  /**\r\n   * Return true if this query and the provided query are equivalent; otherwise, return false.\r\n   * @param {Query} other\r\n   * @return {boolean}\r\n   */\n\n\n  Query.prototype.isEqual = function (other) {\n    util.validateArgCount('Query.isEqual', 1, 1, arguments.length);\n\n    if (!(other instanceof Query)) {\n      var error = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\n      throw new Error(error);\n    }\n\n    var sameRepo = this.repo === other.repo;\n    var samePath = this.path.equals(other.path);\n    var sameQueryIdentifier = this.queryIdentifier() === other.queryIdentifier();\n    return sameRepo && samePath && sameQueryIdentifier;\n  };\n  /**\r\n   * Helper used by .on and .once to extract the context and or cancel arguments.\r\n   * @param {!string} fnName The function name (on or once)\r\n   * @param {(function(Error)|Object)=} cancelOrContext\r\n   * @param {Object=} context\r\n   * @return {{cancel: ?function(Error), context: ?Object}}\r\n   * @private\r\n   */\n\n\n  Query.getCancelAndContextArgs_ = function (fnName, cancelOrContext, context) {\n    var ret = {\n      cancel: null,\n      context: null\n    };\n\n    if (cancelOrContext && context) {\n      ret.cancel = cancelOrContext;\n      util.validateCallback(fnName, 3, ret.cancel, true);\n      ret.context = context;\n      util.validateContextObject(fnName, 4, ret.context, true);\n    } else if (cancelOrContext) {\n      // we have either a cancel callback or a context.\n      if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\n        // it's a context!\n        ret.context = cancelOrContext;\n      } else if (typeof cancelOrContext === 'function') {\n        ret.cancel = cancelOrContext;\n      } else {\n        throw new Error(util.errorPrefix(fnName, 3, true) + ' must either be a cancel callback or a context object.');\n      }\n    }\n\n    return ret;\n  };\n\n  Object.defineProperty(Query.prototype, \"ref\", {\n    get: function () {\n      return this.getRef();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Query;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar ExistingValueProvider =\n/** @class */\nfunction () {\n  function ExistingValueProvider(node_) {\n    this.node_ = node_;\n  }\n\n  ExistingValueProvider.prototype.getImmediateChild = function (childName) {\n    var child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  };\n\n  ExistingValueProvider.prototype.node = function () {\n    return this.node_;\n  };\n\n  return ExistingValueProvider;\n}();\n\nvar DeferredValueProvider =\n/** @class */\nfunction () {\n  function DeferredValueProvider(syncTree, path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  DeferredValueProvider.prototype.getImmediateChild = function (childName) {\n    var childPath = this.path_.child(childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  };\n\n  DeferredValueProvider.prototype.node = function () {\n    return this.syncTree_.calcCompleteEventCache(this.path_);\n  };\n\n  return DeferredValueProvider;\n}();\n/**\r\n * Generate placeholders for deferred values.\r\n * @param {?Object} values\r\n * @return {!Object}\r\n */\n\n\nvar generateWithValues = function (values) {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n * @param {(Object|string|number|boolean)} value\r\n * @param {!Object} serverValues\r\n * @return {!(string|number|boolean)}\r\n */\n\n\nvar resolveDeferredLeafValue = function (value, existingVal, serverValues) {\n  if (!value || typeof value !== 'object') {\n    return value;\n  }\n\n  util.assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal);\n  } else {\n    util.assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nvar resolveScalarDeferredValue = function (op, existing, serverValues) {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'];\n\n    default:\n      util.assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nvar resolveComplexDeferredValue = function (op, existing, unused) {\n  if (!op.hasOwnProperty('increment')) {\n    util.assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n\n  var delta = op['increment'];\n\n  if (typeof delta !== 'number') {\n    util.assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  var existingNode = existing.node();\n  util.assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls'); // Incrementing a non-number sets the value to the incremented amount\n\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  var leaf = existingNode;\n  var existingVal = leaf.getValue();\n\n  if (typeof existingVal !== 'number') {\n    return delta;\n  } // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n\n\n  return existingVal + delta;\n};\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param {!Path} path path to which write is relative\r\n * @param {!Node} node new data written at path\r\n * @param {!SyncTree} syncTree current data\r\n * @param {!Object} serverValues\r\n * @return {!SparseSnapshotTree}\r\n */\n\n\nvar resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\n  return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\n};\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n * @param {!Node} node\r\n * @param {!Object} serverValues\r\n * @return {!Node}\r\n */\n\n\nvar resolveDeferredValueSnapshot = function (node, existing, serverValues) {\n  return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\n};\n\nfunction resolveDeferredValue(node, existingVal, serverValues) {\n  var rawPri = node.getPriority().val();\n  var priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\n  var newNode;\n\n  if (node.isLeafNode()) {\n    var leafNode = node;\n    var value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\n\n    if (value !== leafNode.getValue() || priority !== leafNode.getPriority().val()) {\n      return new LeafNode(value, nodeFromJSON$1(priority));\n    } else {\n      return node;\n    }\n  } else {\n    var childrenNode = node;\n    newNode = childrenNode;\n\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n\n    childrenNode.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\n      var newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\n\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Helper class to store a sparse set of snapshots.\r\n */\n\n\nvar SparseSnapshotTree =\n/** @class */\nfunction () {\n  function SparseSnapshotTree() {\n    this.value = null;\n    this.children = new Map();\n  }\n  /**\r\n   * Gets the node stored at the given path if one exists.\r\n   *\r\n   * @param path Path to look up snapshot for.\r\n   * @return The retrieved node, or null.\r\n   */\n\n\n  SparseSnapshotTree.prototype.find = function (path) {\n    if (this.value != null) {\n      return this.value.getChild(path);\n    } else if (!path.isEmpty() && this.children.size > 0) {\n      var childKey = path.getFront();\n      path = path.popFront();\n\n      if (this.children.has(childKey)) {\n        var childTree = this.children.get(childKey);\n        return childTree.find(path);\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * Stores the given node at the specified path. If there is already a node\r\n   * at a shallower path, it merges the new data into that snapshot node.\r\n   *\r\n   * @param path Path to look up snapshot for.\r\n   * @param data The new data, or null.\r\n   */\n\n\n  SparseSnapshotTree.prototype.remember = function (path, data) {\n    if (path.isEmpty()) {\n      this.value = data;\n      this.children.clear();\n    } else if (this.value !== null) {\n      this.value = this.value.updateChild(path, data);\n    } else {\n      var childKey = path.getFront();\n\n      if (!this.children.has(childKey)) {\n        this.children.set(childKey, new SparseSnapshotTree());\n      }\n\n      var child = this.children.get(childKey);\n      path = path.popFront();\n      child.remember(path, data);\n    }\n  };\n  /**\r\n   * Purge the data at path from the cache.\r\n   *\r\n   * @param path Path to look up snapshot for.\r\n   * @return True if this node should now be removed.\r\n   */\n\n\n  SparseSnapshotTree.prototype.forget = function (path) {\n    if (path.isEmpty()) {\n      this.value = null;\n      this.children.clear();\n      return true;\n    } else {\n      if (this.value !== null) {\n        if (this.value.isLeafNode()) {\n          // We're trying to forget a node that doesn't exist\n          return false;\n        } else {\n          var value = this.value;\n          this.value = null;\n          var self_1 = this;\n          value.forEachChild(PRIORITY_INDEX, function (key, tree) {\n            self_1.remember(new Path(key), tree);\n          });\n          return this.forget(path);\n        }\n      } else if (this.children.size > 0) {\n        var childKey = path.getFront();\n        path = path.popFront();\n\n        if (this.children.has(childKey)) {\n          var safeToRemove = this.children.get(childKey).forget(path);\n\n          if (safeToRemove) {\n            this.children.delete(childKey);\n          }\n        }\n\n        return this.children.size === 0;\n      } else {\n        return true;\n      }\n    }\n  };\n  /**\r\n   * Recursively iterates through all of the stored tree and calls the\r\n   * callback on each one.\r\n   *\r\n   * @param prefixPath Path to look up node for.\r\n   * @param func The function to invoke for each tree.\r\n   */\n\n\n  SparseSnapshotTree.prototype.forEachTree = function (prefixPath, func) {\n    if (this.value !== null) {\n      func(prefixPath, this.value);\n    } else {\n      this.forEachChild(function (key, tree) {\n        var path = new Path(prefixPath.toString() + '/' + key);\n        tree.forEachTree(path, func);\n      });\n    }\n  };\n  /**\r\n   * Iterates through each immediate child and triggers the callback.\r\n   *\r\n   * @param func The function to invoke for each child.\r\n   */\n\n\n  SparseSnapshotTree.prototype.forEachChild = function (func) {\n    this.children.forEach(function (tree, key) {\n      func(key, tree);\n    });\n  };\n\n  return SparseSnapshotTree;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n *\r\n * @enum\r\n */\n\n\nvar OperationType;\n\n(function (OperationType) {\n  OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\n  OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\n  OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\n  OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\n})(OperationType || (OperationType = {}));\n/**\r\n * @param {boolean} fromUser\r\n * @param {boolean} fromServer\r\n * @param {?string} queryId\r\n * @param {boolean} tagged\r\n * @constructor\r\n */\n\n\nvar OperationSource =\n/** @class */\nfunction () {\n  function OperationSource(fromUser, fromServer, queryId, tagged) {\n    this.fromUser = fromUser;\n    this.fromServer = fromServer;\n    this.queryId = queryId;\n    this.tagged = tagged;\n    util.assert(!tagged || fromServer, 'Tagged queries must be from server.');\n  }\n  /**\r\n   * @const\r\n   * @type {!OperationSource}\r\n   */\n\n\n  OperationSource.User = new OperationSource(\n  /*fromUser=*/\n  true, false, null,\n  /*tagged=*/\n  false);\n  /**\r\n   * @const\r\n   * @type {!OperationSource}\r\n   */\n\n  OperationSource.Server = new OperationSource(false,\n  /*fromServer=*/\n  true, null,\n  /*tagged=*/\n  false);\n  /**\r\n   * @param {string} queryId\r\n   * @return {!OperationSource}\r\n   */\n\n  OperationSource.forServerTaggedQuery = function (queryId) {\n    return new OperationSource(false,\n    /*fromServer=*/\n    true, queryId,\n    /*tagged=*/\n    true);\n  };\n\n  return OperationSource;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar AckUserWrite =\n/** @class */\nfunction () {\n  /**\r\n   *\r\n   * @param {!Path} path\r\n   * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.\r\n   * @param {!boolean} revert\r\n   */\n  function AckUserWrite(\n  /** @inheritDoc */\n  path,\n  /** @inheritDoc */\n  affectedTree,\n  /** @inheritDoc */\n  revert) {\n    this.path = path;\n    this.affectedTree = affectedTree;\n    this.revert = revert;\n    /** @inheritDoc */\n\n    this.type = OperationType.ACK_USER_WRITE;\n    /** @inheritDoc */\n\n    this.source = OperationSource.User;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  AckUserWrite.prototype.operationForChild = function (childName) {\n    if (!this.path.isEmpty()) {\n      util.assert(this.path.getFront() === childName, 'operationForChild called for unrelated child.');\n      return new AckUserWrite(this.path.popFront(), this.affectedTree, this.revert);\n    } else if (this.affectedTree.value != null) {\n      util.assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.'); // All child locations are affected as well; just return same operation.\n\n      return this;\n    } else {\n      var childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(Path.Empty, childTree, this.revert);\n    }\n  };\n\n  return AckUserWrite;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar emptyChildrenSingleton;\n/**\r\n * Singleton empty children collection.\r\n *\r\n * @const\r\n * @type {!SortedMap.<string, !ImmutableTree.<?>>}\r\n */\n\nvar EmptyChildren = function () {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap(stringCompare);\n  }\n\n  return emptyChildrenSingleton;\n};\n/**\r\n * A tree with immutable elements.\r\n */\n\n\nvar ImmutableTree =\n/** @class */\nfunction () {\n  /**\r\n   * @template T\r\n   * @param {?T} value\r\n   * @param {SortedMap.<string, !ImmutableTree.<T>>=} children\r\n   */\n  function ImmutableTree(value, children) {\n    if (children === void 0) {\n      children = EmptyChildren();\n    }\n\n    this.value = value;\n    this.children = children;\n  }\n  /**\r\n   * @template T\r\n   * @param {!Object.<string, !T>} obj\r\n   * @return {!ImmutableTree.<!T>}\r\n   */\n\n\n  ImmutableTree.fromObject = function (obj) {\n    var tree = ImmutableTree.Empty;\n    each(obj, function (childPath, childSnap) {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  };\n  /**\r\n   * True if the value is empty and there are no children\r\n   * @return {boolean}\r\n   */\n\n\n  ImmutableTree.prototype.isEmpty = function () {\n    return this.value === null && this.children.isEmpty();\n  };\n  /**\r\n   * Given a path and predicate, return the first node and the path to that node\r\n   * where the predicate returns true.\r\n   *\r\n   * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects\r\n   * on the way back out, it may be better to pass down a pathSoFar obj.\r\n   *\r\n   * @param {!Path} relativePath The remainder of the path\r\n   * @param {function(T):boolean} predicate The predicate to satisfy to return a\r\n   *   node\r\n   * @return {?{path:!Path, value:!T}}\r\n   */\n\n\n  ImmutableTree.prototype.findRootMostMatchingPathAndValue = function (relativePath, predicate) {\n    if (this.value != null && predicate(this.value)) {\n      return {\n        path: Path.Empty,\n        value: this.value\n      };\n    } else {\n      if (relativePath.isEmpty()) {\n        return null;\n      } else {\n        var front = relativePath.getFront();\n        var child = this.children.get(front);\n\n        if (child !== null) {\n          var childExistingPathAndValue = child.findRootMostMatchingPathAndValue(relativePath.popFront(), predicate);\n\n          if (childExistingPathAndValue != null) {\n            var fullPath = new Path(front).child(childExistingPathAndValue.path);\n            return {\n              path: fullPath,\n              value: childExistingPathAndValue.value\n            };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  };\n  /**\r\n   * Find, if it exists, the shortest subpath of the given path that points a defined\r\n   * value in the tree\r\n   * @param {!Path} relativePath\r\n   * @return {?{path: !Path, value: !T}}\r\n   */\n\n\n  ImmutableTree.prototype.findRootMostValueAndPath = function (relativePath) {\n    return this.findRootMostMatchingPathAndValue(relativePath, function () {\n      return true;\n    });\n  };\n  /**\r\n   * @param {!Path} relativePath\r\n   * @return {!ImmutableTree.<T>} The subtree at the given path\r\n   */\n\n\n  ImmutableTree.prototype.subtree = function (relativePath) {\n    if (relativePath.isEmpty()) {\n      return this;\n    } else {\n      var front = relativePath.getFront();\n      var childTree = this.children.get(front);\n\n      if (childTree !== null) {\n        return childTree.subtree(relativePath.popFront());\n      } else {\n        return ImmutableTree.Empty;\n      }\n    }\n  };\n  /**\r\n   * Sets a value at the specified path.\r\n   *\r\n   * @param {!Path} relativePath Path to set value at.\r\n   * @param {?T} toSet Value to set.\r\n   * @return {!ImmutableTree.<T>} Resulting tree.\r\n   */\n\n\n  ImmutableTree.prototype.set = function (relativePath, toSet) {\n    if (relativePath.isEmpty()) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      var front = relativePath.getFront();\n      var child = this.children.get(front) || ImmutableTree.Empty;\n      var newChild = child.set(relativePath.popFront(), toSet);\n      var newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  };\n  /**\r\n   * Removes the value at the specified path.\r\n   *\r\n   * @param {!Path} relativePath Path to value to remove.\r\n   * @return {!ImmutableTree.<T>} Resulting tree.\r\n   */\n\n\n  ImmutableTree.prototype.remove = function (relativePath) {\n    if (relativePath.isEmpty()) {\n      if (this.children.isEmpty()) {\n        return ImmutableTree.Empty;\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      var front = relativePath.getFront();\n      var child = this.children.get(front);\n\n      if (child) {\n        var newChild = child.remove(relativePath.popFront());\n        var newChildren = void 0;\n\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n\n        if (this.value === null && newChildren.isEmpty()) {\n          return ImmutableTree.Empty;\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  };\n  /**\r\n   * Gets a value from the tree.\r\n   *\r\n   * @param {!Path} relativePath Path to get value for.\r\n   * @return {?T} Value at path, or null.\r\n   */\n\n\n  ImmutableTree.prototype.get = function (relativePath) {\n    if (relativePath.isEmpty()) {\n      return this.value;\n    } else {\n      var front = relativePath.getFront();\n      var child = this.children.get(front);\n\n      if (child) {\n        return child.get(relativePath.popFront());\n      } else {\n        return null;\n      }\n    }\n  };\n  /**\r\n   * Replace the subtree at the specified path with the given new tree.\r\n   *\r\n   * @param {!Path} relativePath Path to replace subtree for.\r\n   * @param {!ImmutableTree} newTree New tree.\r\n   * @return {!ImmutableTree} Resulting tree.\r\n   */\n\n\n  ImmutableTree.prototype.setTree = function (relativePath, newTree) {\n    if (relativePath.isEmpty()) {\n      return newTree;\n    } else {\n      var front = relativePath.getFront();\n      var child = this.children.get(front) || ImmutableTree.Empty;\n      var newChild = child.setTree(relativePath.popFront(), newTree);\n      var newChildren = void 0;\n\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n\n      return new ImmutableTree(this.value, newChildren);\n    }\n  };\n  /**\r\n   * Performs a depth first fold on this tree. Transforms a tree into a single\r\n   * value, given a function that operates on the path to a node, an optional\r\n   * current value, and a map of child names to folded subtrees\r\n   * @template V\r\n   * @param {function(Path, ?T, Object.<string, V>):V} fn\r\n   * @return {V}\r\n   */\n\n\n  ImmutableTree.prototype.fold = function (fn) {\n    return this.fold_(Path.Empty, fn);\n  };\n  /**\r\n   * Recursive helper for public-facing fold() method\r\n   * @template V\r\n   * @param {!Path} pathSoFar\r\n   * @param {function(Path, ?T, Object.<string, V>):V} fn\r\n   * @return {V}\r\n   * @private\r\n   */\n\n\n  ImmutableTree.prototype.fold_ = function (pathSoFar, fn) {\n    var accum = {};\n    this.children.inorderTraversal(function (childKey, childTree) {\n      accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);\n    });\n    return fn(pathSoFar, this.value, accum);\n  };\n  /**\r\n   * Find the first matching value on the given path. Return the result of applying f to it.\r\n   * @template V\r\n   * @param {!Path} path\r\n   * @param {!function(!Path, !T):?V} f\r\n   * @return {?V}\r\n   */\n\n\n  ImmutableTree.prototype.findOnPath = function (path, f) {\n    return this.findOnPath_(path, Path.Empty, f);\n  };\n\n  ImmutableTree.prototype.findOnPath_ = function (pathToFollow, pathSoFar, f) {\n    var result = this.value ? f(pathSoFar, this.value) : false;\n\n    if (result) {\n      return result;\n    } else {\n      if (pathToFollow.isEmpty()) {\n        return null;\n      } else {\n        var front = pathToFollow.getFront();\n        var nextChild = this.children.get(front);\n\n        if (nextChild) {\n          return nextChild.findOnPath_(pathToFollow.popFront(), pathSoFar.child(front), f);\n        } else {\n          return null;\n        }\n      }\n    }\n  };\n  /**\r\n   *\r\n   * @param {!Path} path\r\n   * @param {!function(!Path, !T)} f\r\n   * @returns {!ImmutableTree.<T>}\r\n   */\n\n\n  ImmutableTree.prototype.foreachOnPath = function (path, f) {\n    return this.foreachOnPath_(path, Path.Empty, f);\n  };\n\n  ImmutableTree.prototype.foreachOnPath_ = function (pathToFollow, currentRelativePath, f) {\n    if (pathToFollow.isEmpty()) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n\n      var front = pathToFollow.getFront();\n      var nextChild = this.children.get(front);\n\n      if (nextChild) {\n        return nextChild.foreachOnPath_(pathToFollow.popFront(), currentRelativePath.child(front), f);\n      } else {\n        return ImmutableTree.Empty;\n      }\n    }\n  };\n  /**\r\n   * Calls the given function for each node in the tree that has a value.\r\n   *\r\n   * @param {function(!Path, !T)} f A function to be called with\r\n   *   the path from the root of the tree to a node, and the value at that node.\r\n   *   Called in depth-first order.\r\n   */\n\n\n  ImmutableTree.prototype.foreach = function (f) {\n    this.foreach_(Path.Empty, f);\n  };\n\n  ImmutableTree.prototype.foreach_ = function (currentRelativePath, f) {\n    this.children.inorderTraversal(function (childName, childTree) {\n      childTree.foreach_(currentRelativePath.child(childName), f);\n    });\n\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  };\n  /**\r\n   *\r\n   * @param {function(string, !T)} f\r\n   */\n\n\n  ImmutableTree.prototype.foreachChild = function (f) {\n    this.children.inorderTraversal(function (childName, childTree) {\n      if (childTree.value) {\n        f(childName, childTree.value);\n      }\n    });\n  }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  ImmutableTree.Empty = new ImmutableTree(null);\n  return ImmutableTree;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @constructor\r\n * @implements {Operation}\r\n */\n\n\nvar ListenComplete =\n/** @class */\nfunction () {\n  function ListenComplete(source, path) {\n    this.source = source;\n    this.path = path;\n    /** @inheritDoc */\n\n    this.type = OperationType.LISTEN_COMPLETE;\n  }\n\n  ListenComplete.prototype.operationForChild = function (childName) {\n    if (this.path.isEmpty()) {\n      return new ListenComplete(this.source, Path.Empty);\n    } else {\n      return new ListenComplete(this.source, this.path.popFront());\n    }\n  };\n\n  return ListenComplete;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @param {!Node} snap\r\n * @constructor\r\n * @implements {Operation}\r\n */\n\n\nvar Overwrite =\n/** @class */\nfunction () {\n  function Overwrite(source, path, snap) {\n    this.source = source;\n    this.path = path;\n    this.snap = snap;\n    /** @inheritDoc */\n\n    this.type = OperationType.OVERWRITE;\n  }\n\n  Overwrite.prototype.operationForChild = function (childName) {\n    if (this.path.isEmpty()) {\n      return new Overwrite(this.source, Path.Empty, this.snap.getImmediateChild(childName));\n    } else {\n      return new Overwrite(this.source, this.path.popFront(), this.snap);\n    }\n  };\n\n  return Overwrite;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @param {!ImmutableTree.<!Node>} children\r\n * @constructor\r\n * @implements {Operation}\r\n */\n\n\nvar Merge =\n/** @class */\nfunction () {\n  function Merge(\n  /** @inheritDoc */\n  source,\n  /** @inheritDoc */\n  path,\n  /** @inheritDoc */\n  children) {\n    this.source = source;\n    this.path = path;\n    this.children = children;\n    /** @inheritDoc */\n\n    this.type = OperationType.MERGE;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  Merge.prototype.operationForChild = function (childName) {\n    if (this.path.isEmpty()) {\n      var childTree = this.children.subtree(new Path(childName));\n\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, Path.Empty, childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, Path.Empty, childTree);\n      }\n    } else {\n      util.assert(this.path.getFront() === childName, \"Can't get a merge for a child not on the path of the operation\");\n      return new Merge(this.source, this.path.popFront(), this.children);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  Merge.prototype.toString = function () {\n    return 'Operation(' + this.path + ': ' + this.source.toString() + ' merge: ' + this.children.toString() + ')';\n  };\n\n  return Merge;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\n\n\nvar CacheNode =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!Node} node_\r\n   * @param {boolean} fullyInitialized_\r\n   * @param {boolean} filtered_\r\n   */\n  function CacheNode(node_, fullyInitialized_, filtered_) {\n    this.node_ = node_;\n    this.fullyInitialized_ = fullyInitialized_;\n    this.filtered_ = filtered_;\n  }\n  /**\r\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n   * @return {boolean}\r\n   */\n\n\n  CacheNode.prototype.isFullyInitialized = function () {\n    return this.fullyInitialized_;\n  };\n  /**\r\n   * Returns whether this node is potentially missing children due to a filter applied to the node\r\n   * @return {boolean}\r\n   */\n\n\n  CacheNode.prototype.isFiltered = function () {\n    return this.filtered_;\n  };\n  /**\r\n   * @param {!Path} path\r\n   * @return {boolean}\r\n   */\n\n\n  CacheNode.prototype.isCompleteForPath = function (path) {\n    if (path.isEmpty()) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    var childKey = path.getFront();\n    return this.isCompleteForChild(childKey);\n  };\n  /**\r\n   * @param {!string} key\r\n   * @return {boolean}\r\n   */\n\n\n  CacheNode.prototype.isCompleteForChild = function (key) {\n    return this.isFullyInitialized() && !this.filtered_ || this.node_.hasChild(key);\n  };\n  /**\r\n   * @return {!Node}\r\n   */\n\n\n  CacheNode.prototype.getNode = function () {\n    return this.node_;\n  };\n\n  return CacheNode;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Stores the data we have cached for a view.\r\n *\r\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\r\n *\r\n * @constructor\r\n */\n\n\nvar ViewCache =\n/** @class */\nfunction () {\n  /**\r\n   *\r\n   * @param {!CacheNode} eventCache_\r\n   * @param {!CacheNode} serverCache_\r\n   */\n  function ViewCache(eventCache_, serverCache_) {\n    this.eventCache_ = eventCache_;\n    this.serverCache_ = serverCache_;\n  }\n  /**\r\n   * @param {!Node} eventSnap\r\n   * @param {boolean} complete\r\n   * @param {boolean} filtered\r\n   * @return {!ViewCache}\r\n   */\n\n\n  ViewCache.prototype.updateEventSnap = function (eventSnap, complete, filtered) {\n    return new ViewCache(new CacheNode(eventSnap, complete, filtered), this.serverCache_);\n  };\n  /**\r\n   * @param {!Node} serverSnap\r\n   * @param {boolean} complete\r\n   * @param {boolean} filtered\r\n   * @return {!ViewCache}\r\n   */\n\n\n  ViewCache.prototype.updateServerSnap = function (serverSnap, complete, filtered) {\n    return new ViewCache(this.eventCache_, new CacheNode(serverSnap, complete, filtered));\n  };\n  /**\r\n   * @return {!CacheNode}\r\n   */\n\n\n  ViewCache.prototype.getEventCache = function () {\n    return this.eventCache_;\n  };\n  /**\r\n   * @return {?Node}\r\n   */\n\n\n  ViewCache.prototype.getCompleteEventSnap = function () {\n    return this.eventCache_.isFullyInitialized() ? this.eventCache_.getNode() : null;\n  };\n  /**\r\n   * @return {!CacheNode}\r\n   */\n\n\n  ViewCache.prototype.getServerCache = function () {\n    return this.serverCache_;\n  };\n  /**\r\n   * @return {?Node}\r\n   */\n\n\n  ViewCache.prototype.getCompleteServerSnap = function () {\n    return this.serverCache_.isFullyInitialized() ? this.serverCache_.getNode() : null;\n  };\n  /**\r\n   * @const\r\n   * @type {ViewCache}\r\n   */\n\n\n  ViewCache.Empty = new ViewCache(new CacheNode(ChildrenNode.EMPTY_NODE,\n  /*fullyInitialized=*/\n  false,\n  /*filtered=*/\n  false), new CacheNode(ChildrenNode.EMPTY_NODE,\n  /*fullyInitialized=*/\n  false,\n  /*filtered=*/\n  false));\n  return ViewCache;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @constructor\r\n * @struct\r\n * @param {!string} type The event type\r\n * @param {!Node} snapshotNode The data\r\n * @param {string=} childName The name for this child, if it's a child event\r\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\r\n * @param {string=} prevName The name for the previous child, if applicable\r\n */\n\n\nvar Change =\n/** @class */\nfunction () {\n  function Change(type, snapshotNode, childName, oldSnap, prevName) {\n    this.type = type;\n    this.snapshotNode = snapshotNode;\n    this.childName = childName;\n    this.oldSnap = oldSnap;\n    this.prevName = prevName;\n  }\n  /**\r\n   * @param {!Node} snapshot\r\n   * @return {!Change}\r\n   */\n\n\n  Change.valueChange = function (snapshot) {\n    return new Change(Change.VALUE, snapshot);\n  };\n  /**\r\n   * @param {string} childKey\r\n   * @param {!Node} snapshot\r\n   * @return {!Change}\r\n   */\n\n\n  Change.childAddedChange = function (childKey, snapshot) {\n    return new Change(Change.CHILD_ADDED, snapshot, childKey);\n  };\n  /**\r\n   * @param {string} childKey\r\n   * @param {!Node} snapshot\r\n   * @return {!Change}\r\n   */\n\n\n  Change.childRemovedChange = function (childKey, snapshot) {\n    return new Change(Change.CHILD_REMOVED, snapshot, childKey);\n  };\n  /**\r\n   * @param {string} childKey\r\n   * @param {!Node} newSnapshot\r\n   * @param {!Node} oldSnapshot\r\n   * @return {!Change}\r\n   */\n\n\n  Change.childChangedChange = function (childKey, newSnapshot, oldSnapshot) {\n    return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\n  };\n  /**\r\n   * @param {string} childKey\r\n   * @param {!Node} snapshot\r\n   * @return {!Change}\r\n   */\n\n\n  Change.childMovedChange = function (childKey, snapshot) {\n    return new Change(Change.CHILD_MOVED, snapshot, childKey);\n  }; //event types\n\n  /** Event type for a child added */\n\n\n  Change.CHILD_ADDED = 'child_added';\n  /** Event type for a child removed */\n\n  Change.CHILD_REMOVED = 'child_removed';\n  /** Event type for a child changed */\n\n  Change.CHILD_CHANGED = 'child_changed';\n  /** Event type for a child moved */\n\n  Change.CHILD_MOVED = 'child_moved';\n  /** Event type for a value change */\n\n  Change.VALUE = 'value';\n  return Change;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n * @param {!Index} index\r\n */\n\n\nvar IndexedFilter =\n/** @class */\nfunction () {\n  function IndexedFilter(index_) {\n    this.index_ = index_;\n  }\n\n  IndexedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    util.assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\n    var oldChild = snap.getImmediateChild(key); // Check if anything actually changed.\n\n    if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, oldChild));\n        } else {\n          util.assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(Change.childAddedChange(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(Change.childChangedChange(key, newChild, oldChild));\n      }\n    }\n\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  IndexedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, childNode));\n          }\n        });\n      }\n\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n          if (oldSnap.hasChild(key)) {\n            var oldChild = oldSnap.getImmediateChild(key);\n\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(Change.childChangedChange(key, childNode, oldChild));\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(Change.childAddedChange(key, childNode));\n          }\n        });\n      }\n    }\n\n    return newSnap.withIndex(this.index_);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  IndexedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  IndexedFilter.prototype.filtersNodes = function () {\n    return false;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  IndexedFilter.prototype.getIndexedFilter = function () {\n    return this;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  IndexedFilter.prototype.getIndex = function () {\n    return this.index_;\n  };\n\n  return IndexedFilter;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar ChildChangeAccumulator =\n/** @class */\nfunction () {\n  function ChildChangeAccumulator() {\n    this.changeMap = new Map();\n  }\n\n  ChildChangeAccumulator.prototype.trackChildChange = function (change) {\n    var type = change.type;\n    var childKey = change.childName;\n    util.assert(type === Change.CHILD_ADDED || type === Change.CHILD_CHANGED || type === Change.CHILD_REMOVED, 'Only child changes supported for tracking');\n    util.assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\n    var oldChange = this.changeMap.get(childKey);\n\n    if (oldChange) {\n      var oldType = oldChange.type;\n\n      if (type === Change.CHILD_ADDED && oldType === Change.CHILD_REMOVED) {\n        this.changeMap.set(childKey, Change.childChangedChange(childKey, change.snapshotNode, oldChange.snapshotNode));\n      } else if (type === Change.CHILD_REMOVED && oldType === Change.CHILD_ADDED) {\n        this.changeMap.delete(childKey);\n      } else if (type === Change.CHILD_REMOVED && oldType === Change.CHILD_CHANGED) {\n        this.changeMap.set(childKey, Change.childRemovedChange(childKey, oldChange.oldSnap));\n      } else if (type === Change.CHILD_CHANGED && oldType === Change.CHILD_ADDED) {\n        this.changeMap.set(childKey, Change.childAddedChange(childKey, change.snapshotNode));\n      } else if (type === Change.CHILD_CHANGED && oldType === Change.CHILD_CHANGED) {\n        this.changeMap.set(childKey, Change.childChangedChange(childKey, change.snapshotNode, oldChange.oldSnap));\n      } else {\n        throw util.assertionError('Illegal combination of changes: ' + change + ' occurred after ' + oldChange);\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  };\n\n  ChildChangeAccumulator.prototype.getChanges = function () {\n    return Array.from(this.changeMap.values());\n  };\n\n  return ChildChangeAccumulator;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n *\r\n * @private\r\n * @constructor\r\n * @implements CompleteChildSource\r\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\n\n\nvar NoCompleteChildSource_ =\n/** @class */\nfunction () {\n  function NoCompleteChildSource_() {}\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  NoCompleteChildSource_.prototype.getCompleteChild = function (childKey) {\n    return null;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  NoCompleteChildSource_.prototype.getChildAfterChild = function (index, child, reverse) {\n    return null;\n  };\n\n  return NoCompleteChildSource_;\n}();\n/**\r\n * Singleton instance.\r\n * @const\r\n * @type {!CompleteChildSource}\r\n */\n\n\nvar NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n *\r\n *\r\n * @implements CompleteChildSource\r\n */\n\nvar WriteTreeCompleteChildSource =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!WriteTreeRef} writes_\r\n   * @param {!ViewCache} viewCache_\r\n   * @param {?Node} optCompleteServerCache_\r\n   */\n  function WriteTreeCompleteChildSource(writes_, viewCache_, optCompleteServerCache_) {\n    if (optCompleteServerCache_ === void 0) {\n      optCompleteServerCache_ = null;\n    }\n\n    this.writes_ = writes_;\n    this.viewCache_ = viewCache_;\n    this.optCompleteServerCache_ = optCompleteServerCache_;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  WriteTreeCompleteChildSource.prototype.getCompleteChild = function (childKey) {\n    var node = this.viewCache_.getEventCache();\n\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      var serverNode = this.optCompleteServerCache_ != null ? new CacheNode(this.optCompleteServerCache_, true, false) : this.viewCache_.getServerCache();\n      return this.writes_.calcCompleteChild(childKey, serverNode);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  WriteTreeCompleteChildSource.prototype.getChildAfterChild = function (index, child, reverse) {\n    var completeServerData = this.optCompleteServerCache_ != null ? this.optCompleteServerCache_ : this.viewCache_.getCompleteServerSnap();\n    var nodes = this.writes_.calcIndexedSlice(completeServerData, child, 1, reverse, index);\n\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  };\n\n  return WriteTreeCompleteChildSource;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @constructor\r\n * @struct\r\n */\n\n\nvar ProcessorResult =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Array.<!Change>} changes\r\n   */\n  function ProcessorResult(viewCache, changes) {\n    this.viewCache = viewCache;\n    this.changes = changes;\n  }\n\n  return ProcessorResult;\n}();\n/**\r\n * @constructor\r\n */\n\n\nvar ViewProcessor =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!NodeFilter} filter_\r\n   */\n  function ViewProcessor(filter_) {\n    this.filter_ = filter_;\n  }\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   */\n\n\n  ViewProcessor.prototype.assertIndexed = function (viewCache) {\n    util.assert(viewCache.getEventCache().getNode().isIndexed(this.filter_.getIndex()), 'Event snap not indexed');\n    util.assert(viewCache.getServerCache().getNode().isIndexed(this.filter_.getIndex()), 'Server snap not indexed');\n  };\n  /**\r\n   * @param {!ViewCache} oldViewCache\r\n   * @param {!Operation} operation\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} completeCache\r\n   * @return {!ProcessorResult}\r\n   */\n\n\n  ViewProcessor.prototype.applyOperation = function (oldViewCache, operation, writesCache, completeCache) {\n    var accumulator = new ChildChangeAccumulator();\n    var newViewCache, filterServerNode;\n\n    if (operation.type === OperationType.OVERWRITE) {\n      var overwrite = operation;\n\n      if (overwrite.source.fromUser) {\n        newViewCache = this.applyUserOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\n      } else {\n        util.assert(overwrite.source.fromServer, 'Unknown source.'); // We filter the node if it's a tagged update or the node has been previously filtered  and the\n        // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n        // again\n\n        filterServerNode = overwrite.source.tagged || oldViewCache.getServerCache().isFiltered() && !overwrite.path.isEmpty();\n        newViewCache = this.applyServerOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\n      }\n    } else if (operation.type === OperationType.MERGE) {\n      var merge = operation;\n\n      if (merge.source.fromUser) {\n        newViewCache = this.applyUserMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\n      } else {\n        util.assert(merge.source.fromServer, 'Unknown source.'); // We filter the node if it's a tagged update or the node has been previously filtered\n\n        filterServerNode = merge.source.tagged || oldViewCache.getServerCache().isFiltered();\n        newViewCache = this.applyServerMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\n      }\n    } else if (operation.type === OperationType.ACK_USER_WRITE) {\n      var ackUserWrite = operation;\n\n      if (!ackUserWrite.revert) {\n        newViewCache = this.ackUserWrite_(oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\n      } else {\n        newViewCache = this.revertUserWrite_(oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\n      }\n    } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n      newViewCache = this.listenComplete_(oldViewCache, operation.path, writesCache, accumulator);\n    } else {\n      throw util.assertionError('Unknown operation type: ' + operation.type);\n    }\n\n    var changes = accumulator.getChanges();\n    ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);\n    return new ProcessorResult(newViewCache, changes);\n  };\n  /**\r\n   * @param {!ViewCache} oldViewCache\r\n   * @param {!ViewCache} newViewCache\r\n   * @param {!Array.<!Change>} accumulator\r\n   * @private\r\n   */\n\n\n  ViewProcessor.maybeAddValueEvent_ = function (oldViewCache, newViewCache, accumulator) {\n    var eventSnap = newViewCache.getEventCache();\n\n    if (eventSnap.isFullyInitialized()) {\n      var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n      var oldCompleteSnap = oldViewCache.getCompleteEventSnap();\n\n      if (accumulator.length > 0 || !oldViewCache.getEventCache().isFullyInitialized() || isLeafOrEmpty && !eventSnap.getNode().equals(\n      /** @type {!Node} */\n      oldCompleteSnap) || !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\n        accumulator.push(Change.valueChange(\n        /** @type {!Node} */\n        newViewCache.getCompleteEventSnap()));\n      }\n    }\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Path} changePath\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {!CompleteChildSource} source\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.generateEventCacheAfterServerEvent_ = function (viewCache, changePath, writesCache, source, accumulator) {\n    var oldEventSnap = viewCache.getEventCache();\n\n    if (writesCache.shadowingWrite(changePath) != null) {\n      // we have a shadowing write, ignore changes\n      return viewCache;\n    } else {\n      var newEventCache = void 0,\n          serverNode = void 0;\n\n      if (changePath.isEmpty()) {\n        // TODO: figure out how this plays with \"sliding ack windows\"\n        util.assert(viewCache.getServerCache().isFullyInitialized(), 'If change path is empty, we must have complete server data');\n\n        if (viewCache.getServerCache().isFiltered()) {\n          // We need to special case this, because we need to only apply writes to complete children, or\n          // we might end up raising events for incomplete children. If the server data is filtered deep\n          // writes cannot be guaranteed to be complete\n          var serverCache = viewCache.getCompleteServerSnap();\n          var completeChildren = serverCache instanceof ChildrenNode ? serverCache : ChildrenNode.EMPTY_NODE;\n          var completeEventChildren = writesCache.calcCompleteEventChildren(completeChildren);\n          newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeEventChildren, accumulator);\n        } else {\n          var completeNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\n          newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeNode, accumulator);\n        }\n      } else {\n        var childKey = changePath.getFront();\n\n        if (childKey === '.priority') {\n          util.assert(changePath.getLength() === 1, \"Can't have a priority with additional path components\");\n          var oldEventNode = oldEventSnap.getNode();\n          serverNode = viewCache.getServerCache().getNode(); // we might have overwrites for this priority\n\n          var updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventNode, serverNode);\n\n          if (updatedPriority != null) {\n            newEventCache = this.filter_.updatePriority(oldEventNode, updatedPriority);\n          } else {\n            // priority didn't change, keep old node\n            newEventCache = oldEventSnap.getNode();\n          }\n        } else {\n          var childChangePath = changePath.popFront(); // update child\n\n          var newEventChild = void 0;\n\n          if (oldEventSnap.isCompleteForChild(childKey)) {\n            serverNode = viewCache.getServerCache().getNode();\n            var eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventSnap.getNode(), serverNode);\n\n            if (eventChildUpdate != null) {\n              newEventChild = oldEventSnap.getNode().getImmediateChild(childKey).updateChild(childChangePath, eventChildUpdate);\n            } else {\n              // Nothing changed, just keep the old child\n              newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n            }\n          } else {\n            newEventChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\n          }\n\n          if (newEventChild != null) {\n            newEventCache = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\n          } else {\n            // no complete child available or no change\n            newEventCache = oldEventSnap.getNode();\n          }\n        }\n      }\n\n      return viewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized() || changePath.isEmpty(), this.filter_.filtersNodes());\n    }\n  };\n  /**\r\n   * @param {!ViewCache} oldViewCache\r\n   * @param {!Path} changePath\r\n   * @param {!Node} changedSnap\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} completeCache\r\n   * @param {boolean} filterServerNode\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.applyServerOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\n    var oldServerSnap = oldViewCache.getServerCache();\n    var newServerCache;\n    var serverFilter = filterServerNode ? this.filter_ : this.filter_.getIndexedFilter();\n\n    if (changePath.isEmpty()) {\n      newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\n    } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n      // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n      var newServerNode = oldServerSnap.getNode().updateChild(changePath, changedSnap);\n      newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\n    } else {\n      var childKey = changePath.getFront();\n\n      if (!oldServerSnap.isCompleteForPath(changePath) && changePath.getLength() > 1) {\n        // We don't update incomplete nodes with updates intended for other listeners\n        return oldViewCache;\n      }\n\n      var childChangePath = changePath.popFront();\n      var childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n      var newChildNode = childNode.updateChild(childChangePath, changedSnap);\n\n      if (childKey === '.priority') {\n        newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\n      } else {\n        newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\n      }\n    }\n\n    var newViewCache = oldViewCache.updateServerSnap(newServerCache, oldServerSnap.isFullyInitialized() || changePath.isEmpty(), serverFilter.filtersNodes());\n    var source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\n    return this.generateEventCacheAfterServerEvent_(newViewCache, changePath, writesCache, source, accumulator);\n  };\n  /**\r\n   * @param {!ViewCache} oldViewCache\r\n   * @param {!Path} changePath\r\n   * @param {!Node} changedSnap\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} completeCache\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.applyUserOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\n    var oldEventSnap = oldViewCache.getEventCache();\n    var newViewCache, newEventCache;\n    var source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\n\n    if (changePath.isEmpty()) {\n      newEventCache = this.filter_.updateFullNode(oldViewCache.getEventCache().getNode(), changedSnap, accumulator);\n      newViewCache = oldViewCache.updateEventSnap(newEventCache, true, this.filter_.filtersNodes());\n    } else {\n      var childKey = changePath.getFront();\n\n      if (childKey === '.priority') {\n        newEventCache = this.filter_.updatePriority(oldViewCache.getEventCache().getNode(), changedSnap);\n        newViewCache = oldViewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\n      } else {\n        var childChangePath = changePath.popFront();\n        var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n        var newChild = void 0;\n\n        if (childChangePath.isEmpty()) {\n          // Child overwrite, we can replace the child\n          newChild = changedSnap;\n        } else {\n          var childNode = source.getCompleteChild(childKey);\n\n          if (childNode != null) {\n            if (childChangePath.getBack() === '.priority' && childNode.getChild(childChangePath.parent()).isEmpty()) {\n              // This is a priority update on an empty node. If this node exists on the server, the\n              // server will send down the priority in the update, so ignore for now\n              newChild = childNode;\n            } else {\n              newChild = childNode.updateChild(childChangePath, changedSnap);\n            }\n          } else {\n            // There is no complete child node available\n            newChild = ChildrenNode.EMPTY_NODE;\n          }\n        }\n\n        if (!oldChild.equals(newChild)) {\n          var newEventSnap = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\n          newViewCache = oldViewCache.updateEventSnap(newEventSnap, oldEventSnap.isFullyInitialized(), this.filter_.filtersNodes());\n        } else {\n          newViewCache = oldViewCache;\n        }\n      }\n    }\n\n    return newViewCache;\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {string} childKey\r\n   * @return {boolean}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.cacheHasChild_ = function (viewCache, childKey) {\n    return viewCache.getEventCache().isCompleteForChild(childKey);\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Path} path\r\n   * @param {ImmutableTree.<!Node>} changedChildren\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} serverCache\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.applyUserMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\n    var _this = this; // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n\n\n    var curViewCache = viewCache;\n    changedChildren.foreach(function (relativePath, childNode) {\n      var writePath = path.child(relativePath);\n\n      if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n        curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n      }\n    });\n    changedChildren.foreach(function (relativePath, childNode) {\n      var writePath = path.child(relativePath);\n\n      if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n        curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n      }\n    });\n    return curViewCache;\n  };\n  /**\r\n   * @param {!Node} node\r\n   * @param {ImmutableTree.<!Node>} merge\r\n   * @return {!Node}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.applyMerge_ = function (node, merge) {\n    merge.foreach(function (relativePath, childNode) {\n      node = node.updateChild(relativePath, childNode);\n    });\n    return node;\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Path} path\r\n   * @param {!ImmutableTree.<!Node>} changedChildren\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} serverCache\r\n   * @param {boolean} filterServerNode\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.applyServerMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\n    var _this = this; // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n    // wait for the complete data update coming soon.\n\n\n    if (viewCache.getServerCache().getNode().isEmpty() && !viewCache.getServerCache().isFullyInitialized()) {\n      return viewCache;\n    } // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n\n\n    var curViewCache = viewCache;\n    var viewMergeTree;\n\n    if (path.isEmpty()) {\n      viewMergeTree = changedChildren;\n    } else {\n      viewMergeTree = ImmutableTree.Empty.setTree(path, changedChildren);\n    }\n\n    var serverNode = viewCache.getServerCache().getNode();\n    viewMergeTree.children.inorderTraversal(function (childKey, childTree) {\n      if (serverNode.hasChild(childKey)) {\n        var serverChild = viewCache.getServerCache().getNode().getImmediateChild(childKey);\n\n        var newChild = _this.applyMerge_(serverChild, childTree);\n\n        curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n      }\n    });\n    viewMergeTree.children.inorderTraversal(function (childKey, childMergeTree) {\n      var isUnknownDeepMerge = !viewCache.getServerCache().isCompleteForChild(childKey) && childMergeTree.value == null;\n\n      if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n        var serverChild = viewCache.getServerCache().getNode().getImmediateChild(childKey);\n\n        var newChild = _this.applyMerge_(serverChild, childMergeTree);\n\n        curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n      }\n    });\n    return curViewCache;\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Path} ackPath\r\n   * @param {!ImmutableTree<!boolean>} affectedTree\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} completeCache\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.ackUserWrite_ = function (viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\n    if (writesCache.shadowingWrite(ackPath) != null) {\n      return viewCache;\n    } // Only filter server node if it is currently filtered\n\n\n    var filterServerNode = viewCache.getServerCache().isFiltered(); // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n    // now that it won't be shadowed.\n\n    var serverCache = viewCache.getServerCache();\n\n    if (affectedTree.value != null) {\n      // This is an overwrite.\n      if (ackPath.isEmpty() && serverCache.isFullyInitialized() || serverCache.isCompleteForPath(ackPath)) {\n        return this.applyServerOverwrite_(viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\n      } else if (ackPath.isEmpty()) {\n        // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n        // should just re-apply whatever we have in our cache as a merge.\n        var changedChildren_1 = ImmutableTree.Empty;\n        serverCache.getNode().forEachChild(KEY_INDEX, function (name, node) {\n          changedChildren_1 = changedChildren_1.set(new Path(name), node);\n        });\n        return this.applyServerMerge_(viewCache, ackPath, changedChildren_1, writesCache, completeCache, filterServerNode, accumulator);\n      } else {\n        return viewCache;\n      }\n    } else {\n      // This is a merge.\n      var changedChildren_2 = ImmutableTree.Empty;\n      affectedTree.foreach(function (mergePath, value) {\n        var serverCachePath = ackPath.child(mergePath);\n\n        if (serverCache.isCompleteForPath(serverCachePath)) {\n          changedChildren_2 = changedChildren_2.set(mergePath, serverCache.getNode().getChild(serverCachePath));\n        }\n      });\n      return this.applyServerMerge_(viewCache, ackPath, changedChildren_2, writesCache, completeCache, filterServerNode, accumulator);\n    }\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Path} path\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.listenComplete_ = function (viewCache, path, writesCache, accumulator) {\n    var oldServerNode = viewCache.getServerCache();\n    var newViewCache = viewCache.updateServerSnap(oldServerNode.getNode(), oldServerNode.isFullyInitialized() || path.isEmpty(), oldServerNode.isFiltered());\n    return this.generateEventCacheAfterServerEvent_(newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Path} path\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} completeServerCache\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.revertUserWrite_ = function (viewCache, path, writesCache, completeServerCache, accumulator) {\n    var complete;\n\n    if (writesCache.shadowingWrite(path) != null) {\n      return viewCache;\n    } else {\n      var source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\n      var oldEventCache = viewCache.getEventCache().getNode();\n      var newEventCache = void 0;\n\n      if (path.isEmpty() || path.getFront() === '.priority') {\n        var newNode = void 0;\n\n        if (viewCache.getServerCache().isFullyInitialized()) {\n          newNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\n        } else {\n          var serverChildren = viewCache.getServerCache().getNode();\n          util.assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\n          newNode = writesCache.calcCompleteEventChildren(serverChildren);\n        }\n\n        newNode = newNode;\n        newEventCache = this.filter_.updateFullNode(oldEventCache, newNode, accumulator);\n      } else {\n        var childKey = path.getFront();\n        var newChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\n\n        if (newChild == null && viewCache.getServerCache().isCompleteForChild(childKey)) {\n          newChild = oldEventCache.getImmediateChild(childKey);\n        }\n\n        if (newChild != null) {\n          newEventCache = this.filter_.updateChild(oldEventCache, childKey, newChild, path.popFront(), source, accumulator);\n        } else if (viewCache.getEventCache().getNode().hasChild(childKey)) {\n          // No complete child available, delete the existing one, if any\n          newEventCache = this.filter_.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, path.popFront(), source, accumulator);\n        } else {\n          newEventCache = oldEventCache;\n        }\n\n        if (newEventCache.isEmpty() && viewCache.getServerCache().isFullyInitialized()) {\n          // We might have reverted all child writes. Maybe the old event was a leaf node\n          complete = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\n\n          if (complete.isLeafNode()) {\n            newEventCache = this.filter_.updateFullNode(newEventCache, complete, accumulator);\n          }\n        }\n      }\n\n      complete = viewCache.getServerCache().isFullyInitialized() || writesCache.shadowingWrite(Path.Empty) != null;\n      return viewCache.updateEventSnap(newEventCache, complete, this.filter_.filtersNodes());\n    }\n  };\n\n  return ViewProcessor;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n * @constructor\r\n */\n\n\nvar EventGenerator =\n/** @class */\nfunction () {\n  /**\r\n   *\r\n   * @param {!Query} query_\r\n   */\n  function EventGenerator(query_) {\n    this.query_ = query_;\n    /**\r\n     * @private\r\n     * @type {!Index}\r\n     */\n\n    this.index_ = this.query_.getQueryParams().getIndex();\n  }\n  /**\r\n   * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n   * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n   *\r\n   * Notes:\r\n   *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n   *    our index.\r\n   *  - prevName will be calculated based on the index ordering.\r\n   *\r\n   * @param {!Array.<!Change>} changes\r\n   * @param {!Node} eventCache\r\n   * @param {!Array.<!EventRegistration>} eventRegistrations\r\n   * @return {!Array.<!Event>}\r\n   */\n\n\n  EventGenerator.prototype.generateEventsForChanges = function (changes, eventCache, eventRegistrations) {\n    var _this = this;\n\n    var events = [];\n    var moves = [];\n    changes.forEach(function (change) {\n      if (change.type === Change.CHILD_CHANGED && _this.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\n        moves.push(Change.childMovedChange(change.childName, change.snapshotNode));\n      }\n    });\n    this.generateEventsForType_(events, Change.CHILD_REMOVED, changes, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change.CHILD_ADDED, changes, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change.CHILD_MOVED, moves, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change.CHILD_CHANGED, changes, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change.VALUE, changes, eventRegistrations, eventCache);\n    return events;\n  };\n  /**\r\n   * Given changes of a single change type, generate the corresponding events.\r\n   *\r\n   * @param {!Array.<!Event>} events\r\n   * @param {!string} eventType\r\n   * @param {!Array.<!Change>} changes\r\n   * @param {!Array.<!EventRegistration>} registrations\r\n   * @param {!Node} eventCache\r\n   * @private\r\n   */\n\n\n  EventGenerator.prototype.generateEventsForType_ = function (events, eventType, changes, registrations, eventCache) {\n    var _this = this;\n\n    var filteredChanges = changes.filter(function (change) {\n      return change.type === eventType;\n    });\n    filteredChanges.sort(this.compareChanges_.bind(this));\n    filteredChanges.forEach(function (change) {\n      var materializedChange = _this.materializeSingleChange_(change, eventCache);\n\n      registrations.forEach(function (registration) {\n        if (registration.respondsTo(change.type)) {\n          events.push(registration.createEvent(materializedChange, _this.query_));\n        }\n      });\n    });\n  };\n  /**\r\n   * @param {!Change} change\r\n   * @param {!Node} eventCache\r\n   * @return {!Change}\r\n   * @private\r\n   */\n\n\n  EventGenerator.prototype.materializeSingleChange_ = function (change, eventCache) {\n    if (change.type === 'value' || change.type === 'child_removed') {\n      return change;\n    } else {\n      change.prevName = eventCache.getPredecessorChildName(\n      /** @type {!string} */\n      change.childName, change.snapshotNode, this.index_);\n      return change;\n    }\n  };\n  /**\r\n   * @param {!Change} a\r\n   * @param {!Change} b\r\n   * @return {number}\r\n   * @private\r\n   */\n\n\n  EventGenerator.prototype.compareChanges_ = function (a, b) {\n    if (a.childName == null || b.childName == null) {\n      throw util.assertionError('Should only compare child_ events.');\n    }\n\n    var aWrapped = new NamedNode(a.childName, a.snapshotNode);\n    var bWrapped = new NamedNode(b.childName, b.snapshotNode);\n    return this.index_.compare(aWrapped, bWrapped);\n  };\n\n  return EventGenerator;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n * @constructor\r\n */\n\n\nvar View =\n/** @class */\nfunction () {\n  /**\r\n   *\r\n   * @param {!Query} query_\r\n   * @param {!ViewCache} initialViewCache\r\n   */\n  function View(query_, initialViewCache) {\n    this.query_ = query_;\n    this.eventRegistrations_ = [];\n    var params = this.query_.getQueryParams();\n    var indexFilter = new IndexedFilter(params.getIndex());\n    var filter = params.getNodeFilter();\n    /**\r\n     * @type {ViewProcessor}\r\n     * @private\r\n     */\n\n    this.processor_ = new ViewProcessor(filter);\n    var initialServerCache = initialViewCache.getServerCache();\n    var initialEventCache = initialViewCache.getEventCache(); // Don't filter server node with other filter than index, wait for tagged listen\n\n    var serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\n    var eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\n    var newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\n    var newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\n    /**\r\n     * @type {!ViewCache}\r\n     * @private\r\n     */\n\n    this.viewCache_ = new ViewCache(newEventCache, newServerCache);\n    /**\r\n     * @type {!EventGenerator}\r\n     * @private\r\n     */\n\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n  /**\r\n   * @return {!Query}\r\n   */\n\n\n  View.prototype.getQuery = function () {\n    return this.query_;\n  };\n  /**\r\n   * @return {?Node}\r\n   */\n\n\n  View.prototype.getServerCache = function () {\n    return this.viewCache_.getServerCache().getNode();\n  };\n  /**\r\n   * @param {!Path} path\r\n   * @return {?Node}\r\n   */\n\n\n  View.prototype.getCompleteServerCache = function (path) {\n    var cache = this.viewCache_.getCompleteServerSnap();\n\n    if (cache) {\n      // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n      // we need to see if it contains the child we're interested in.\n      if (this.query_.getQueryParams().loadsAllData() || !path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty()) {\n        return cache.getChild(path);\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  View.prototype.isEmpty = function () {\n    return this.eventRegistrations_.length === 0;\n  };\n  /**\r\n   * @param {!EventRegistration} eventRegistration\r\n   */\n\n\n  View.prototype.addEventRegistration = function (eventRegistration) {\n    this.eventRegistrations_.push(eventRegistration);\n  };\n  /**\r\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\r\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n   * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\r\n   */\n\n\n  View.prototype.removeEventRegistration = function (eventRegistration, cancelError) {\n    var cancelEvents = [];\n\n    if (cancelError) {\n      util.assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\n      var path_1 = this.query_.path;\n      this.eventRegistrations_.forEach(function (registration) {\n        cancelError\n        /** @type {!Error} */\n        = cancelError;\n        var maybeEvent = registration.createCancelEvent(cancelError, path_1);\n\n        if (maybeEvent) {\n          cancelEvents.push(maybeEvent);\n        }\n      });\n    }\n\n    if (eventRegistration) {\n      var remaining = [];\n\n      for (var i = 0; i < this.eventRegistrations_.length; ++i) {\n        var existing = this.eventRegistrations_[i];\n\n        if (!existing.matches(eventRegistration)) {\n          remaining.push(existing);\n        } else if (eventRegistration.hasAnyCallback()) {\n          // We're removing just this one\n          remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));\n          break;\n        }\n      }\n\n      this.eventRegistrations_ = remaining;\n    } else {\n      this.eventRegistrations_ = [];\n    }\n\n    return cancelEvents;\n  };\n  /**\r\n   * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n   *\r\n   * @param {!Operation} operation\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} completeServerCache\r\n   * @return {!Array.<!Event>}\r\n   */\n\n\n  View.prototype.applyOperation = function (operation, writesCache, completeServerCache) {\n    if (operation.type === OperationType.MERGE && operation.source.queryId !== null) {\n      util.assert(this.viewCache_.getCompleteServerSnap(), 'We should always have a full cache before handling merges');\n      util.assert(this.viewCache_.getCompleteEventSnap(), 'Missing event cache, even though we have a server cache');\n    }\n\n    var oldViewCache = this.viewCache_;\n    var result = this.processor_.applyOperation(oldViewCache, operation, writesCache, completeServerCache);\n    this.processor_.assertIndexed(result.viewCache);\n    util.assert(result.viewCache.getServerCache().isFullyInitialized() || !oldViewCache.getServerCache().isFullyInitialized(), 'Once a server snap is complete, it should never go back');\n    this.viewCache_ = result.viewCache;\n    return this.generateEventsForChanges_(result.changes, result.viewCache.getEventCache().getNode(), null);\n  };\n  /**\r\n   * @param {!EventRegistration} registration\r\n   * @return {!Array.<!Event>}\r\n   */\n\n\n  View.prototype.getInitialEvents = function (registration) {\n    var eventSnap = this.viewCache_.getEventCache();\n    var initialChanges = [];\n\n    if (!eventSnap.getNode().isLeafNode()) {\n      var eventNode = eventSnap.getNode();\n      eventNode.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n        initialChanges.push(Change.childAddedChange(key, childNode));\n      });\n    }\n\n    if (eventSnap.isFullyInitialized()) {\n      initialChanges.push(Change.valueChange(eventSnap.getNode()));\n    }\n\n    return this.generateEventsForChanges_(initialChanges, eventSnap.getNode(), registration);\n  };\n  /**\r\n   * @private\r\n   * @param {!Array.<!Change>} changes\r\n   * @param {!Node} eventCache\r\n   * @param {EventRegistration=} eventRegistration\r\n   * @return {!Array.<!Event>}\r\n   */\n\n\n  View.prototype.generateEventsForChanges_ = function (changes, eventCache, eventRegistration) {\n    var registrations = eventRegistration ? [eventRegistration] : this.eventRegistrations_;\n    return this.eventGenerator_.generateEventsForChanges(changes, eventCache, registrations);\n  };\n\n  return View;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar __referenceConstructor$1;\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\n\n\nvar SyncPoint =\n/** @class */\nfunction () {\n  function SyncPoint() {\n    /**\r\n     * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n     * queryId and the value is the View for that query.\r\n     *\r\n     * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n     */\n    this.views = new Map();\n  }\n\n  Object.defineProperty(SyncPoint, \"__referenceConstructor\", {\n    get: function () {\n      util.assert(__referenceConstructor$1, 'Reference.ts has not been loaded');\n      return __referenceConstructor$1;\n    },\n    set: function (val) {\n      util.assert(!__referenceConstructor$1, '__referenceConstructor has already been defined');\n      __referenceConstructor$1 = val;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  SyncPoint.prototype.isEmpty = function () {\n    return this.views.size === 0;\n  };\n\n  SyncPoint.prototype.applyOperation = function (operation, writesCache, optCompleteServerCache) {\n    var e_1, _a;\n\n    var queryId = operation.source.queryId;\n\n    if (queryId !== null) {\n      var view = this.views.get(queryId);\n      util.assert(view != null, 'SyncTree gave us an op for an invalid query.');\n      return view.applyOperation(operation, writesCache, optCompleteServerCache);\n    } else {\n      var events = [];\n\n      try {\n        for (var _b = tslib.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var view = _c.value;\n          events = events.concat(view.applyOperation(operation, writesCache, optCompleteServerCache));\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      return events;\n    }\n  };\n  /**\r\n   * Add an event callback for the specified query.\r\n   *\r\n   * @param {!Query} query\r\n   * @param {!EventRegistration} eventRegistration\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} serverCache Complete server cache, if we have it.\r\n   * @param {boolean} serverCacheComplete\r\n   * @return {!Array.<!Event>} Events to raise.\r\n   */\n\n\n  SyncPoint.prototype.addEventRegistration = function (query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\n    var queryId = query.queryIdentifier();\n    var view = this.views.get(queryId);\n\n    if (!view) {\n      // TODO: make writesCache take flag for complete server node\n      var eventCache = writesCache.calcCompleteEventCache(serverCacheComplete ? serverCache : null);\n      var eventCacheComplete = false;\n\n      if (eventCache) {\n        eventCacheComplete = true;\n      } else if (serverCache instanceof ChildrenNode) {\n        eventCache = writesCache.calcCompleteEventChildren(serverCache);\n        eventCacheComplete = false;\n      } else {\n        eventCache = ChildrenNode.EMPTY_NODE;\n        eventCacheComplete = false;\n      }\n\n      var viewCache = new ViewCache(new CacheNode(\n      /** @type {!Node} */\n      eventCache, eventCacheComplete, false), new CacheNode(\n      /** @type {!Node} */\n      serverCache, serverCacheComplete, false));\n      view = new View(query, viewCache);\n      this.views.set(queryId, view);\n    } // This is guaranteed to exist now, we just created anything that was missing\n\n\n    view.addEventRegistration(eventRegistration);\n    return view.getInitialEvents(eventRegistration);\n  };\n  /**\r\n   * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n   *\r\n   * If query is the default query, we'll check all views for the specified eventRegistration.\r\n   * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n   *\r\n   * @param {!Query} query\r\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\r\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n   * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events\r\n   */\n\n\n  SyncPoint.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\n    var e_2, _a;\n\n    var queryId = query.queryIdentifier();\n    var removed = [];\n    var cancelEvents = [];\n    var hadCompleteView = this.hasCompleteView();\n\n    if (queryId === 'default') {\n      try {\n        // When you do ref.off(...), we search all views for the registration to remove.\n        for (var _b = tslib.__values(this.views.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var _d = tslib.__read(_c.value, 2),\n              viewQueryId = _d[0],\n              view = _d[1];\n\n          cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\n\n          if (view.isEmpty()) {\n            this.views.delete(viewQueryId); // We'll deal with complete views later.\n\n            if (!view.getQuery().getQueryParams().loadsAllData()) {\n              removed.push(view.getQuery());\n            }\n          }\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    } else {\n      // remove the callback from the specific view.\n      var view = this.views.get(queryId);\n\n      if (view) {\n        cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\n\n        if (view.isEmpty()) {\n          this.views.delete(queryId); // We'll deal with complete views later.\n\n          if (!view.getQuery().getQueryParams().loadsAllData()) {\n            removed.push(view.getQuery());\n          }\n        }\n      }\n    }\n\n    if (hadCompleteView && !this.hasCompleteView()) {\n      // We removed our last complete view.\n      removed.push(new SyncPoint.__referenceConstructor(query.repo, query.path));\n    }\n\n    return {\n      removed: removed,\n      events: cancelEvents\n    };\n  };\n\n  SyncPoint.prototype.getQueryViews = function () {\n    var e_3, _a;\n\n    var result = [];\n\n    try {\n      for (var _b = tslib.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var view = _c.value;\n\n        if (!view.getQuery().getQueryParams().loadsAllData()) {\n          result.push(view);\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n\n    return result;\n  };\n  /**\r\n   * @param path The path to the desired complete snapshot\r\n   * @return A complete cache, if it exists\r\n   */\n\n\n  SyncPoint.prototype.getCompleteServerCache = function (path) {\n    var e_4, _a;\n\n    var serverCache = null;\n\n    try {\n      for (var _b = tslib.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var view = _c.value;\n        serverCache = serverCache || view.getCompleteServerCache(path);\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n\n    return serverCache;\n  };\n\n  SyncPoint.prototype.viewForQuery = function (query) {\n    var params = query.getQueryParams();\n\n    if (params.loadsAllData()) {\n      return this.getCompleteView();\n    } else {\n      var queryId = query.queryIdentifier();\n      return this.views.get(queryId);\n    }\n  };\n\n  SyncPoint.prototype.viewExistsForQuery = function (query) {\n    return this.viewForQuery(query) != null;\n  };\n\n  SyncPoint.prototype.hasCompleteView = function () {\n    return this.getCompleteView() != null;\n  };\n\n  SyncPoint.prototype.getCompleteView = function () {\n    var e_5, _a;\n\n    try {\n      for (var _b = tslib.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var view = _c.value;\n\n        if (view.getQuery().getQueryParams().loadsAllData()) {\n          return view;\n        }\n      }\n    } catch (e_5_1) {\n      e_5 = {\n        error: e_5_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_5) throw e_5.error;\n      }\n    }\n\n    return null;\n  };\n\n  return SyncPoint;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\n\n\nvar CompoundWrite =\n/** @class */\nfunction () {\n  function CompoundWrite(writeTree_) {\n    this.writeTree_ = writeTree_;\n  }\n\n  CompoundWrite.prototype.addWrite = function (path, node) {\n    if (path.isEmpty()) {\n      return new CompoundWrite(new ImmutableTree(node));\n    } else {\n      var rootmost = this.writeTree_.findRootMostValueAndPath(path);\n\n      if (rootmost != null) {\n        var rootMostPath = rootmost.path;\n        var value = rootmost.value;\n        var relativePath = Path.relativePath(rootMostPath, path);\n        value = value.updateChild(relativePath, node);\n        return new CompoundWrite(this.writeTree_.set(rootMostPath, value));\n      } else {\n        var subtree = new ImmutableTree(node);\n        var newWriteTree = this.writeTree_.setTree(path, subtree);\n        return new CompoundWrite(newWriteTree);\n      }\n    }\n  };\n\n  CompoundWrite.prototype.addWrites = function (path, updates) {\n    var newWrite = this;\n    each(updates, function (childKey, node) {\n      newWrite = newWrite.addWrite(path.child(childKey), node);\n    });\n    return newWrite;\n  };\n  /**\r\n   * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n   * location, which must be removed by calling this method with that path.\r\n   *\r\n   * @param path The path at which a write and all deeper writes should be removed\r\n   * @return {!CompoundWrite} The new CompoundWrite with the removed path\r\n   */\n\n\n  CompoundWrite.prototype.removeWrite = function (path) {\n    if (path.isEmpty()) {\n      return CompoundWrite.Empty;\n    } else {\n      var newWriteTree = this.writeTree_.setTree(path, ImmutableTree.Empty);\n      return new CompoundWrite(newWriteTree);\n    }\n  };\n  /**\r\n   * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n   * considered \"complete\".\r\n   *\r\n   * @param path The path to check for\r\n   * @return Whether there is a complete write at that path\r\n   */\n\n\n  CompoundWrite.prototype.hasCompleteWrite = function (path) {\n    return this.getCompleteNode(path) != null;\n  };\n  /**\r\n   * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n   * writes from deeper paths, but will return child nodes from a more shallow path.\r\n   *\r\n   * @param path The path to get a complete write\r\n   * @return The node if complete at that path, or null otherwise.\r\n   */\n\n\n  CompoundWrite.prototype.getCompleteNode = function (path) {\n    var rootmost = this.writeTree_.findRootMostValueAndPath(path);\n\n    if (rootmost != null) {\n      return this.writeTree_.get(rootmost.path).getChild(Path.relativePath(rootmost.path, path));\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * Returns all children that are guaranteed to be a complete overwrite.\r\n   *\r\n   * @return A list of all complete children.\r\n   */\n\n\n  CompoundWrite.prototype.getCompleteChildren = function () {\n    var children = [];\n    var node = this.writeTree_.value;\n\n    if (node != null) {\n      // If it's a leaf node, it has no children; so nothing to do.\n      if (!node.isLeafNode()) {\n        node.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\n          children.push(new NamedNode(childName, childNode));\n        });\n      }\n    } else {\n      this.writeTree_.children.inorderTraversal(function (childName, childTree) {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      });\n    }\n\n    return children;\n  };\n\n  CompoundWrite.prototype.childCompoundWrite = function (path) {\n    if (path.isEmpty()) {\n      return this;\n    } else {\n      var shadowingNode = this.getCompleteNode(path);\n\n      if (shadowingNode != null) {\n        return new CompoundWrite(new ImmutableTree(shadowingNode));\n      } else {\n        return new CompoundWrite(this.writeTree_.subtree(path));\n      }\n    }\n  };\n  /**\r\n   * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n   * @return Whether this CompoundWrite is empty\r\n   */\n\n\n  CompoundWrite.prototype.isEmpty = function () {\n    return this.writeTree_.isEmpty();\n  };\n  /**\r\n   * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n   * node\r\n   * @param node The node to apply this CompoundWrite to\r\n   * @return The node with all writes applied\r\n   */\n\n\n  CompoundWrite.prototype.apply = function (node) {\n    return applySubtreeWrite(Path.Empty, this.writeTree_, node);\n  };\n\n  CompoundWrite.Empty = new CompoundWrite(new ImmutableTree(null));\n  return CompoundWrite;\n}();\n\nfunction applySubtreeWrite(relativePath, writeTree, node) {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    var priorityWrite_1 = null;\n    writeTree.children.inorderTraversal(function (childKey, childTree) {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        util.assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\n        priorityWrite_1 = childTree.value;\n      } else {\n        node = applySubtreeWrite(relativePath.child(childKey), childTree, node);\n      }\n    }); // If there was a priority write, we only apply it if the node is not empty\n\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite_1 !== null) {\n      node = node.updateChild(relativePath.child('.priority'), priorityWrite_1);\n    }\n\n    return node;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\r\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\r\n * and addMerge(), and removed with removeWrite().\r\n *\r\n * @constructor\r\n */\n\n\nvar WriteTree =\n/** @class */\nfunction () {\n  function WriteTree() {\n    /**\r\n     * A tree tracking the result of applying all visible writes.  This does not include transactions with\r\n     * applyLocally=false or writes that are completely shadowed by other writes.\r\n     *\r\n     * @type {!CompoundWrite}\r\n     * @private\r\n     */\n    this.visibleWrites_ = CompoundWrite.Empty;\n    /**\r\n     * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\r\n     * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\r\n     * used by transactions).\r\n     *\r\n     * @type {!Array.<!WriteRecord>}\r\n     * @private\r\n     */\n\n    this.allWrites_ = [];\n    this.lastWriteId_ = -1;\n  }\n  /**\r\n   * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n   *\r\n   * @param {!Path} path\r\n   * @return {!WriteTreeRef}\r\n   */\n\n\n  WriteTree.prototype.childWrites = function (path) {\n    return new WriteTreeRef(path, this);\n  };\n  /**\r\n   * Record a new overwrite from user code.\r\n   *\r\n   * @param {!Path} path\r\n   * @param {!Node} snap\r\n   * @param {!number} writeId\r\n   * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches\r\n   */\n\n\n  WriteTree.prototype.addOverwrite = function (path, snap, writeId, visible) {\n    util.assert(writeId > this.lastWriteId_, 'Stacking an older write on top of newer ones');\n\n    if (visible === undefined) {\n      visible = true;\n    }\n\n    this.allWrites_.push({\n      path: path,\n      snap: snap,\n      writeId: writeId,\n      visible: visible\n    });\n\n    if (visible) {\n      this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);\n    }\n\n    this.lastWriteId_ = writeId;\n  };\n  /**\r\n   * Record a new merge from user code.\r\n   *\r\n   * @param {!Path} path\r\n   * @param {!Object.<string, !Node>} changedChildren\r\n   * @param {!number} writeId\r\n   */\n\n\n  WriteTree.prototype.addMerge = function (path, changedChildren, writeId) {\n    util.assert(writeId > this.lastWriteId_, 'Stacking an older merge on top of newer ones');\n    this.allWrites_.push({\n      path: path,\n      children: changedChildren,\n      writeId: writeId,\n      visible: true\n    });\n    this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);\n    this.lastWriteId_ = writeId;\n  };\n  /**\r\n   * @param {!number} writeId\r\n   * @return {?WriteRecord}\r\n   */\n\n\n  WriteTree.prototype.getWrite = function (writeId) {\n    for (var i = 0; i < this.allWrites_.length; i++) {\n      var record = this.allWrites_[i];\n\n      if (record.writeId === writeId) {\n        return record;\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n   * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n   *\r\n   * @param {!number} writeId\r\n   * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n   * events as a result).\r\n   */\n\n\n  WriteTree.prototype.removeWrite = function (writeId) {\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n    // out of order.\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n    var _this = this;\n\n    var idx = this.allWrites_.findIndex(function (s) {\n      return s.writeId === writeId;\n    });\n    util.assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n    var writeToRemove = this.allWrites_[idx];\n    this.allWrites_.splice(idx, 1);\n    var removedWriteWasVisible = writeToRemove.visible;\n    var removedWriteOverlapsWithOtherWrites = false;\n    var i = this.allWrites_.length - 1;\n\n    while (removedWriteWasVisible && i >= 0) {\n      var currentWrite = this.allWrites_[i];\n\n      if (currentWrite.visible) {\n        if (i >= idx && this.recordContainsPath_(currentWrite, writeToRemove.path)) {\n          // The removed write was completely shadowed by a subsequent write.\n          removedWriteWasVisible = false;\n        } else if (writeToRemove.path.contains(currentWrite.path)) {\n          // Either we're covering some writes or they're covering part of us (depending on which came first).\n          removedWriteOverlapsWithOtherWrites = true;\n        }\n      }\n\n      i--;\n    }\n\n    if (!removedWriteWasVisible) {\n      return false;\n    } else if (removedWriteOverlapsWithOtherWrites) {\n      // There's some shadowing going on. Just rebuild the visible writes from scratch.\n      this.resetTree_();\n      return true;\n    } else {\n      // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n      if (writeToRemove.snap) {\n        this.visibleWrites_ = this.visibleWrites_.removeWrite(writeToRemove.path);\n      } else {\n        var children = writeToRemove.children;\n        each(children, function (childName) {\n          _this.visibleWrites_ = _this.visibleWrites_.removeWrite(writeToRemove.path.child(childName));\n        });\n      }\n\n      return true;\n    }\n  };\n  /**\r\n   * Return a complete snapshot for the given path if there's visible write data at that path, else null.\r\n   * No server data is considered.\r\n   *\r\n   * @param {!Path} path\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTree.prototype.getCompleteWriteData = function (path) {\n    return this.visibleWrites_.getCompleteNode(path);\n  };\n  /**\r\n   * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n   * writes), attempt to calculate a complete snapshot for the given path\r\n   *\r\n   * @param {!Path} treePath\r\n   * @param {?Node} completeServerCache\r\n   * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded\r\n   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTree.prototype.calcCompleteEventCache = function (treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n    if (!writeIdsToExclude && !includeHiddenWrites) {\n      var shadowingNode = this.visibleWrites_.getCompleteNode(treePath);\n\n      if (shadowingNode != null) {\n        return shadowingNode;\n      } else {\n        var subMerge = this.visibleWrites_.childCompoundWrite(treePath);\n\n        if (subMerge.isEmpty()) {\n          return completeServerCache;\n        } else if (completeServerCache == null && !subMerge.hasCompleteWrite(Path.Empty)) {\n          // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n          return null;\n        } else {\n          var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return subMerge.apply(layeredCache);\n        }\n      }\n    } else {\n      var merge = this.visibleWrites_.childCompoundWrite(treePath);\n\n      if (!includeHiddenWrites && merge.isEmpty()) {\n        return completeServerCache;\n      } else {\n        // If the server cache is null, and we don't have a complete cache, we need to return null\n        if (!includeHiddenWrites && completeServerCache == null && !merge.hasCompleteWrite(Path.Empty)) {\n          return null;\n        } else {\n          var filter = function (write) {\n            return (write.visible || includeHiddenWrites) && (!writeIdsToExclude || !~writeIdsToExclude.indexOf(write.writeId)) && (write.path.contains(treePath) || treePath.contains(write.path));\n          };\n\n          var mergeAtPath = WriteTree.layerTree_(this.allWrites_, filter, treePath);\n          var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return mergeAtPath.apply(layeredCache);\n        }\n      }\n    }\n  };\n  /**\r\n   * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n   * Used when creating new views, to pre-fill their complete event children snapshot.\r\n   *\r\n   * @param {!Path} treePath\r\n   * @param {?ChildrenNode} completeServerChildren\r\n   * @return {!ChildrenNode}\r\n   */\n\n\n  WriteTree.prototype.calcCompleteEventChildren = function (treePath, completeServerChildren) {\n    var completeChildren = ChildrenNode.EMPTY_NODE;\n    var topLevelSet = this.visibleWrites_.getCompleteNode(treePath);\n\n    if (topLevelSet) {\n      if (!topLevelSet.isLeafNode()) {\n        // we're shadowing everything. Return the children.\n        topLevelSet.forEachChild(PRIORITY_INDEX, function (childName, childSnap) {\n          completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\n        });\n      }\n\n      return completeChildren;\n    } else if (completeServerChildren) {\n      // Layer any children we have on top of this\n      // We know we don't have a top-level set, so just enumerate existing children\n      var merge_1 = this.visibleWrites_.childCompoundWrite(treePath);\n      completeServerChildren.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\n        var node = merge_1.childCompoundWrite(new Path(childName)).apply(childNode);\n        completeChildren = completeChildren.updateImmediateChild(childName, node);\n      }); // Add any complete children we have from the set\n\n      merge_1.getCompleteChildren().forEach(function (namedNode) {\n        completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n      });\n      return completeChildren;\n    } else {\n      // We don't have anything to layer on top of. Layer on any children we have\n      // Note that we can return an empty snap if we have a defined delete\n      var merge = this.visibleWrites_.childCompoundWrite(treePath);\n      merge.getCompleteChildren().forEach(function (namedNode) {\n        completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n      });\n      return completeChildren;\n    }\n  };\n  /**\r\n   * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n   * applied to the event cache.\r\n   *\r\n   * Possibilities:\r\n   *\r\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n   *\r\n   * 2. Some write is completely shadowing. No events to be raised\r\n   *\r\n   * 3. Is partially shadowed. Events\r\n   *\r\n   * Either existingEventSnap or existingServerSnap must exist\r\n   *\r\n   * @param {!Path} treePath\r\n   * @param {!Path} childPath\r\n   * @param {?Node} existingEventSnap\r\n   * @param {?Node} existingServerSnap\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTree.prototype.calcEventCacheAfterServerOverwrite = function (treePath, childPath, existingEventSnap, existingServerSnap) {\n    util.assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\n    var path = treePath.child(childPath);\n\n    if (this.visibleWrites_.hasCompleteWrite(path)) {\n      // At this point we can probably guarantee that we're in case 2, meaning no events\n      // May need to check visibility while doing the findRootMostValueAndPath call\n      return null;\n    } else {\n      // No complete shadowing. We're either partially shadowing or not shadowing at all.\n      var childMerge = this.visibleWrites_.childCompoundWrite(path);\n\n      if (childMerge.isEmpty()) {\n        // We're not shadowing at all. Case 1\n        return existingServerSnap.getChild(childPath);\n      } else {\n        // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n        // However this is tricky to find out, since user updates don't necessary change the server\n        // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n        // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n        // only check if the updates change the serverNode.\n        // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n        return childMerge.apply(existingServerSnap.getChild(childPath));\n      }\n    }\n  };\n  /**\r\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n   * complete child for this ChildKey.\r\n   *\r\n   * @param {!Path} treePath\r\n   * @param {!string} childKey\r\n   * @param {!CacheNode} existingServerSnap\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTree.prototype.calcCompleteChild = function (treePath, childKey, existingServerSnap) {\n    var path = treePath.child(childKey);\n    var shadowingNode = this.visibleWrites_.getCompleteNode(path);\n\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      if (existingServerSnap.isCompleteForChild(childKey)) {\n        var childMerge = this.visibleWrites_.childCompoundWrite(path);\n        return childMerge.apply(existingServerSnap.getNode().getImmediateChild(childKey));\n      } else {\n        return null;\n      }\n    }\n  };\n  /**\r\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n   * a higher path, this will return the child of that write relative to the write and this path.\r\n   * Returns null if there is no write at this path.\r\n   */\n\n\n  WriteTree.prototype.shadowingWrite = function (path) {\n    return this.visibleWrites_.getCompleteNode(path);\n  };\n  /**\r\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n   * the window, but may now be in the window.\r\n   */\n\n\n  WriteTree.prototype.calcIndexedSlice = function (treePath, completeServerData, startPost, count, reverse, index) {\n    var toIterate;\n    var merge = this.visibleWrites_.childCompoundWrite(treePath);\n    var shadowingNode = merge.getCompleteNode(Path.Empty);\n\n    if (shadowingNode != null) {\n      toIterate = shadowingNode;\n    } else if (completeServerData != null) {\n      toIterate = merge.apply(completeServerData);\n    } else {\n      // no children to iterate on\n      return [];\n    }\n\n    toIterate = toIterate.withIndex(index);\n\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n      var nodes = [];\n      var cmp = index.getCompare();\n      var iter = reverse ? toIterate.getReverseIteratorFrom(startPost, index) : toIterate.getIteratorFrom(startPost, index);\n      var next = iter.getNext();\n\n      while (next && nodes.length < count) {\n        if (cmp(next, startPost) !== 0) {\n          nodes.push(next);\n        }\n\n        next = iter.getNext();\n      }\n\n      return nodes;\n    } else {\n      return [];\n    }\n  };\n\n  WriteTree.prototype.recordContainsPath_ = function (writeRecord, path) {\n    if (writeRecord.snap) {\n      return writeRecord.path.contains(path);\n    } else {\n      for (var childName in writeRecord.children) {\n        if (writeRecord.children.hasOwnProperty(childName) && writeRecord.path.child(childName).contains(path)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  };\n  /**\r\n   * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n   */\n\n\n  WriteTree.prototype.resetTree_ = function () {\n    this.visibleWrites_ = WriteTree.layerTree_(this.allWrites_, WriteTree.DefaultFilter_, Path.Empty);\n\n    if (this.allWrites_.length > 0) {\n      this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;\n    } else {\n      this.lastWriteId_ = -1;\n    }\n  };\n  /**\r\n   * The default filter used when constructing the tree. Keep everything that's visible.\r\n   */\n\n\n  WriteTree.DefaultFilter_ = function (write) {\n    return write.visible;\n  };\n  /**\r\n   * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n   * event data at that path.\r\n   */\n\n\n  WriteTree.layerTree_ = function (writes, filter, treeRoot) {\n    var compoundWrite = CompoundWrite.Empty;\n\n    for (var i = 0; i < writes.length; ++i) {\n      var write = writes[i]; // Theory, a later set will either:\n      // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n      // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n\n      if (filter(write)) {\n        var writePath = write.path;\n        var relativePath = void 0;\n\n        if (write.snap) {\n          if (treeRoot.contains(writePath)) {\n            relativePath = Path.relativePath(treeRoot, writePath);\n            compoundWrite = compoundWrite.addWrite(relativePath, write.snap);\n          } else if (writePath.contains(treeRoot)) {\n            relativePath = Path.relativePath(writePath, treeRoot);\n            compoundWrite = compoundWrite.addWrite(Path.Empty, write.snap.getChild(relativePath));\n          } else ;\n        } else if (write.children) {\n          if (treeRoot.contains(writePath)) {\n            relativePath = Path.relativePath(treeRoot, writePath);\n            compoundWrite = compoundWrite.addWrites(relativePath, write.children);\n          } else if (writePath.contains(treeRoot)) {\n            relativePath = Path.relativePath(writePath, treeRoot);\n\n            if (relativePath.isEmpty()) {\n              compoundWrite = compoundWrite.addWrites(Path.Empty, write.children);\n            } else {\n              var child = util.safeGet(write.children, relativePath.getFront());\n\n              if (child) {\n                // There exists a child in this node that matches the root path\n                var deepNode = child.getChild(relativePath.popFront());\n                compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);\n              }\n            }\n          } else ;\n        } else {\n          throw util.assertionError('WriteRecord should have .snap or .children');\n        }\n      }\n    }\n\n    return compoundWrite;\n  };\n\n  return WriteTree;\n}();\n/**\r\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\r\n * just proxy to the underlying WriteTree.\r\n *\r\n * @constructor\r\n */\n\n\nvar WriteTreeRef =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!Path} path\r\n   * @param {!WriteTree} writeTree\r\n   */\n  function WriteTreeRef(path, writeTree) {\n    this.treePath_ = path;\n    this.writeTree_ = writeTree;\n  }\n  /**\r\n   * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n   * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n   * can lead to a more expensive calculation.\r\n   *\r\n   * @param {?Node} completeServerCache\r\n   * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.\r\n   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTreeRef.prototype.calcCompleteEventCache = function (completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n    return this.writeTree_.calcCompleteEventCache(this.treePath_, completeServerCache, writeIdsToExclude, includeHiddenWrites);\n  };\n  /**\r\n   * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n   * mix of the given server data and write data.\r\n   *\r\n   * @param {?ChildrenNode} completeServerChildren\r\n   * @return {!ChildrenNode}\r\n   */\n\n\n  WriteTreeRef.prototype.calcCompleteEventChildren = function (completeServerChildren) {\n    return this.writeTree_.calcCompleteEventChildren(this.treePath_, completeServerChildren);\n  };\n  /**\r\n   * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n   * if anything, needs to be applied to the event cache.\r\n   *\r\n   * Possibilities:\r\n   *\r\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n   *\r\n   * 2. Some write is completely shadowing. No events to be raised\r\n   *\r\n   * 3. Is partially shadowed. Events should be raised\r\n   *\r\n   * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n   *\r\n   * @param {!Path} path\r\n   * @param {?Node} existingEventSnap\r\n   * @param {?Node} existingServerSnap\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTreeRef.prototype.calcEventCacheAfterServerOverwrite = function (path, existingEventSnap, existingServerSnap) {\n    return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_, path, existingEventSnap, existingServerSnap);\n  };\n  /**\r\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n   * a higher path, this will return the child of that write relative to the write and this path.\r\n   * Returns null if there is no write at this path.\r\n   *\r\n   * @param {!Path} path\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTreeRef.prototype.shadowingWrite = function (path) {\n    return this.writeTree_.shadowingWrite(this.treePath_.child(path));\n  };\n  /**\r\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n   * the window, but may now be in the window\r\n   *\r\n   * @param {?Node} completeServerData\r\n   * @param {!NamedNode} startPost\r\n   * @param {!number} count\r\n   * @param {boolean} reverse\r\n   * @param {!Index} index\r\n   * @return {!Array.<!NamedNode>}\r\n   */\n\n\n  WriteTreeRef.prototype.calcIndexedSlice = function (completeServerData, startPost, count, reverse, index) {\n    return this.writeTree_.calcIndexedSlice(this.treePath_, completeServerData, startPost, count, reverse, index);\n  };\n  /**\r\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n   * complete child for this ChildKey.\r\n   *\r\n   * @param {!string} childKey\r\n   * @param {!CacheNode} existingServerCache\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTreeRef.prototype.calcCompleteChild = function (childKey, existingServerCache) {\n    return this.writeTree_.calcCompleteChild(this.treePath_, childKey, existingServerCache);\n  };\n  /**\r\n   * Return a WriteTreeRef for a child.\r\n   *\r\n   * @param {string} childName\r\n   * @return {!WriteTreeRef}\r\n   */\n\n\n  WriteTreeRef.prototype.child = function (childName) {\n    return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);\n  };\n\n  return WriteTreeRef;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n * @constructor\r\n */\n\n\nvar SyncTree =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening\r\n   *   to server data.\r\n   */\n  function SyncTree(listenProvider_) {\n    this.listenProvider_ = listenProvider_;\n    /**\r\n     * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n     */\n\n    this.syncPointTree_ = ImmutableTree.Empty;\n    /**\r\n     * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n     */\n\n    this.pendingWriteTree_ = new WriteTree();\n    this.tagToQueryMap = new Map();\n    this.queryToTagMap = new Map();\n  }\n  /**\r\n   * Apply the data changes for a user-generated set() or transaction() call.\r\n   *\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyUserOverwrite = function (path, newData, writeId, visible) {\n    // Record pending write.\n    this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);\n\n    if (!visible) {\n      return [];\n    } else {\n      return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.User, path, newData));\n    }\n  };\n  /**\r\n   * Apply the data from a user-generated update() call\r\n   *\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyUserMerge = function (path, changedChildren, writeId) {\n    // Record pending merge.\n    this.pendingWriteTree_.addMerge(path, changedChildren, writeId);\n    var changeTree = ImmutableTree.fromObject(changedChildren);\n    return this.applyOperationToSyncPoints_(new Merge(OperationSource.User, path, changeTree));\n  };\n  /**\r\n   * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n   *\r\n   * @param revert True if the given write failed and needs to be reverted\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.ackUserWrite = function (writeId, revert) {\n    if (revert === void 0) {\n      revert = false;\n    }\n\n    var write = this.pendingWriteTree_.getWrite(writeId);\n    var needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);\n\n    if (!needToReevaluate) {\n      return [];\n    } else {\n      var affectedTree_1 = ImmutableTree.Empty;\n\n      if (write.snap != null) {\n        // overwrite\n        affectedTree_1 = affectedTree_1.set(Path.Empty, true);\n      } else {\n        each(write.children, function (pathString, node) {\n          affectedTree_1 = affectedTree_1.set(new Path(pathString), node);\n        });\n      }\n\n      return this.applyOperationToSyncPoints_(new AckUserWrite(write.path, affectedTree_1, revert));\n    }\n  };\n  /**\r\n   * Apply new server data for the specified path..\r\n   *\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyServerOverwrite = function (path, newData) {\n    return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.Server, path, newData));\n  };\n  /**\r\n   * Apply new server data to be merged in at the specified path.\r\n   *\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyServerMerge = function (path, changedChildren) {\n    var changeTree = ImmutableTree.fromObject(changedChildren);\n    return this.applyOperationToSyncPoints_(new Merge(OperationSource.Server, path, changeTree));\n  };\n  /**\r\n   * Apply a listen complete for a query\r\n   *\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyListenComplete = function (path) {\n    return this.applyOperationToSyncPoints_(new ListenComplete(OperationSource.Server, path));\n  };\n  /**\r\n   * Apply new server data for the specified tagged query.\r\n   *\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyTaggedQueryOverwrite = function (path, snap, tag) {\n    var queryKey = this.queryKeyForTag_(tag);\n\n    if (queryKey != null) {\n      var r = SyncTree.parseQueryKey_(queryKey);\n      var queryPath = r.path,\n          queryId = r.queryId;\n      var relativePath = Path.relativePath(queryPath, path);\n      var op = new Overwrite(OperationSource.forServerTaggedQuery(queryId), relativePath, snap);\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // Query must have been removed already\n      return [];\n    }\n  };\n  /**\r\n   * Apply server data to be merged in for the specified tagged query.\r\n   *\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyTaggedQueryMerge = function (path, changedChildren, tag) {\n    var queryKey = this.queryKeyForTag_(tag);\n\n    if (queryKey) {\n      var r = SyncTree.parseQueryKey_(queryKey);\n      var queryPath = r.path,\n          queryId = r.queryId;\n      var relativePath = Path.relativePath(queryPath, path);\n      var changeTree = ImmutableTree.fromObject(changedChildren);\n      var op = new Merge(OperationSource.forServerTaggedQuery(queryId), relativePath, changeTree);\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  };\n  /**\r\n   * Apply a listen complete for a tagged query\r\n   *\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyTaggedListenComplete = function (path, tag) {\n    var queryKey = this.queryKeyForTag_(tag);\n\n    if (queryKey) {\n      var r = SyncTree.parseQueryKey_(queryKey);\n      var queryPath = r.path,\n          queryId = r.queryId;\n      var relativePath = Path.relativePath(queryPath, path);\n      var op = new ListenComplete(OperationSource.forServerTaggedQuery(queryId), relativePath);\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  };\n  /**\r\n   * Add an event callback for the specified query.\r\n   *\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.addEventRegistration = function (query, eventRegistration) {\n    var path = query.path;\n    var serverCache = null;\n    var foundAncestorDefaultView = false; // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\n\n    this.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {\n      var relativePath = Path.relativePath(pathToSyncPoint, path);\n      serverCache = serverCache || sp.getCompleteServerCache(relativePath);\n      foundAncestorDefaultView = foundAncestorDefaultView || sp.hasCompleteView();\n    });\n    var syncPoint = this.syncPointTree_.get(path);\n\n    if (!syncPoint) {\n      syncPoint = new SyncPoint();\n      this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\n    } else {\n      foundAncestorDefaultView = foundAncestorDefaultView || syncPoint.hasCompleteView();\n      serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);\n    }\n\n    var serverCacheComplete;\n\n    if (serverCache != null) {\n      serverCacheComplete = true;\n    } else {\n      serverCacheComplete = false;\n      serverCache = ChildrenNode.EMPTY_NODE;\n      var subtree = this.syncPointTree_.subtree(path);\n      subtree.foreachChild(function (childName, childSyncPoint) {\n        var completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);\n\n        if (completeCache) {\n          serverCache = serverCache.updateImmediateChild(childName, completeCache);\n        }\n      });\n    }\n\n    var viewAlreadyExists = syncPoint.viewExistsForQuery(query);\n\n    if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\n      // We need to track a tag for this query\n      var queryKey = SyncTree.makeQueryKey_(query);\n      util.assert(!this.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\n      var tag = SyncTree.getNextQueryTag_();\n      this.queryToTagMap.set(queryKey, tag);\n      this.tagToQueryMap.set(tag, queryKey);\n    }\n\n    var writesCache = this.pendingWriteTree_.childWrites(path);\n    var events = syncPoint.addEventRegistration(query, eventRegistration, writesCache, serverCache, serverCacheComplete);\n\n    if (!viewAlreadyExists && !foundAncestorDefaultView) {\n      var view\n      /** @type !View */\n      = syncPoint.viewForQuery(query);\n      events = events.concat(this.setupListener_(query, view));\n    }\n\n    return events;\n  };\n  /**\r\n   * Remove event callback(s).\r\n   *\r\n   * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n   * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n   *\r\n   * @param eventRegistration If null, all callbacks are removed.\r\n   * @param cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n   * @return Cancel events, if cancelError was provided.\r\n   */\n\n\n  SyncTree.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\n    var _this = this; // Find the syncPoint first. Then deal with whether or not it has matching listeners\n\n\n    var path = query.path;\n    var maybeSyncPoint = this.syncPointTree_.get(path);\n    var cancelEvents = []; // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n    // not loadsAllData().\n\n    if (maybeSyncPoint && (query.queryIdentifier() === 'default' || maybeSyncPoint.viewExistsForQuery(query))) {\n      /**\r\n       * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}\r\n       */\n      var removedAndEvents = maybeSyncPoint.removeEventRegistration(query, eventRegistration, cancelError);\n\n      if (maybeSyncPoint.isEmpty()) {\n        this.syncPointTree_ = this.syncPointTree_.remove(path);\n      }\n\n      var removed = removedAndEvents.removed;\n      cancelEvents = removedAndEvents.events; // We may have just removed one of many listeners and can short-circuit this whole process\n      // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n      // properly set up.\n      //\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n\n      var removingDefault = -1 !== removed.findIndex(function (query) {\n        return query.getQueryParams().loadsAllData();\n      });\n      var covered = this.syncPointTree_.findOnPath(path, function (relativePath, parentSyncPoint) {\n        return parentSyncPoint.hasCompleteView();\n      });\n\n      if (removingDefault && !covered) {\n        var subtree = this.syncPointTree_.subtree(path); // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          var newViews = this.collectDistinctViewsForSubTree_(subtree); // Ok, we've collected all the listens we need. Set them up.\n\n          for (var i = 0; i < newViews.length; ++i) {\n            var view = newViews[i],\n                newQuery = view.getQuery();\n            var listener = this.createListenerForView_(view);\n            this.listenProvider_.startListening(SyncTree.queryForListening_(newQuery), this.tagForQuery_(newQuery), listener.hashFn, listener.onComplete);\n          }\n        }\n      } // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n\n\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          var defaultTag = null;\n          this.listenProvider_.stopListening(SyncTree.queryForListening_(query), defaultTag);\n        } else {\n          removed.forEach(function (queryToRemove) {\n            var tagToRemove = _this.queryToTagMap.get(SyncTree.makeQueryKey_(queryToRemove));\n\n            _this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToRemove), tagToRemove);\n          });\n        }\n      } // Now, clear all of the tags we're tracking for the removed listens\n\n\n      this.removeTags_(removed);\n    }\n\n    return cancelEvents;\n  };\n  /**\r\n   * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n   * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n   * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n   *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n   *\r\n   * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n   *\r\n   * @param path The path to the data we want\r\n   * @param writeIdsToExclude A specific set to be excluded\r\n   */\n\n\n  SyncTree.prototype.calcCompleteEventCache = function (path, writeIdsToExclude) {\n    var includeHiddenSets = true;\n    var writeTree = this.pendingWriteTree_;\n    var serverCache = this.syncPointTree_.findOnPath(path, function (pathSoFar, syncPoint) {\n      var relativePath = Path.relativePath(pathSoFar, path);\n      var serverCache = syncPoint.getCompleteServerCache(relativePath);\n\n      if (serverCache) {\n        return serverCache;\n      }\n    });\n    return writeTree.calcCompleteEventCache(path, serverCache, writeIdsToExclude, includeHiddenSets);\n  };\n  /**\r\n   * This collapses multiple unfiltered views into a single view, since we only need a single\r\n   * listener for them.\r\n   */\n\n\n  SyncTree.prototype.collectDistinctViewsForSubTree_ = function (subtree) {\n    return subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\n      if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\n        var completeView = maybeChildSyncPoint.getCompleteView();\n        return [completeView];\n      } else {\n        // No complete view here, flatten any deeper listens into an array\n        var views_1 = [];\n\n        if (maybeChildSyncPoint) {\n          views_1 = maybeChildSyncPoint.getQueryViews();\n        }\n\n        each(childMap, function (_key, childViews) {\n          views_1 = views_1.concat(childViews);\n        });\n        return views_1;\n      }\n    });\n  };\n\n  SyncTree.prototype.removeTags_ = function (queries) {\n    for (var j = 0; j < queries.length; ++j) {\n      var removedQuery = queries[j];\n\n      if (!removedQuery.getQueryParams().loadsAllData()) {\n        // We should have a tag for this\n        var removedQueryKey = SyncTree.makeQueryKey_(removedQuery);\n        var removedQueryTag = this.queryToTagMap.get(removedQueryKey);\n        this.queryToTagMap.delete(removedQueryKey);\n        this.tagToQueryMap.delete(removedQueryTag);\n      }\n    }\n  };\n  /**\r\n   * Normalizes a query to a query we send the server for listening\r\n   *\r\n   * @return The normalized query\r\n   */\n\n\n  SyncTree.queryForListening_ = function (query) {\n    if (query.getQueryParams().loadsAllData() && !query.getQueryParams().isDefault()) {\n      // We treat queries that load all data as default queries\n      // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n      // from Query\n      return query.getRef();\n    } else {\n      return query;\n    }\n  };\n  /**\r\n   * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n   *\r\n   * @return This method can return events to support synchronous data sources\r\n   */\n\n\n  SyncTree.prototype.setupListener_ = function (query, view) {\n    var path = query.path;\n    var tag = this.tagForQuery_(query);\n    var listener = this.createListenerForView_(view);\n    var events = this.listenProvider_.startListening(SyncTree.queryForListening_(query), tag, listener.hashFn, listener.onComplete);\n    var subtree = this.syncPointTree_.subtree(path); // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n    // may need to shadow other listens as well.\n\n    if (tag) {\n      util.assert(!subtree.value.hasCompleteView(), \"If we're adding a query, it shouldn't be shadowed\");\n    } else {\n      // Shadow everything at or below this location, this is a default listener.\n      var queriesToStop = subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\n        if (!relativePath.isEmpty() && maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\n          return [maybeChildSyncPoint.getCompleteView().getQuery()];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          var queries_1 = [];\n\n          if (maybeChildSyncPoint) {\n            queries_1 = queries_1.concat(maybeChildSyncPoint.getQueryViews().map(function (view) {\n              return view.getQuery();\n            }));\n          }\n\n          each(childMap, function (_key, childQueries) {\n            queries_1 = queries_1.concat(childQueries);\n          });\n          return queries_1;\n        }\n      });\n\n      for (var i = 0; i < queriesToStop.length; ++i) {\n        var queryToStop = queriesToStop[i];\n        this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToStop), this.tagForQuery_(queryToStop));\n      }\n    }\n\n    return events;\n  };\n\n  SyncTree.prototype.createListenerForView_ = function (view) {\n    var _this = this;\n\n    var query = view.getQuery();\n    var tag = this.tagForQuery_(query);\n    return {\n      hashFn: function () {\n        var cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;\n        return cache.hash();\n      },\n      onComplete: function (status) {\n        if (status === 'ok') {\n          if (tag) {\n            return _this.applyTaggedListenComplete(query.path, tag);\n          } else {\n            return _this.applyListenComplete(query.path);\n          }\n        } else {\n          // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n          // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n          var error = errorForServerCode(status, query);\n          return _this.removeEventRegistration(query,\n          /*eventRegistration*/\n          null, error);\n        }\n      }\n    };\n  };\n  /**\r\n   * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n   */\n\n\n  SyncTree.makeQueryKey_ = function (query) {\n    return query.path.toString() + '$' + query.queryIdentifier();\n  };\n  /**\r\n   * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n   */\n\n\n  SyncTree.parseQueryKey_ = function (queryKey) {\n    var splitIndex = queryKey.indexOf('$');\n    util.assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\n    return {\n      queryId: queryKey.substr(splitIndex + 1),\n      path: new Path(queryKey.substr(0, splitIndex))\n    };\n  };\n  /**\r\n   * Return the query associated with the given tag, if we have one\r\n   */\n\n\n  SyncTree.prototype.queryKeyForTag_ = function (tag) {\n    return this.tagToQueryMap.get(tag);\n  };\n  /**\r\n   * Return the tag associated with the given query.\r\n   */\n\n\n  SyncTree.prototype.tagForQuery_ = function (query) {\n    var queryKey = SyncTree.makeQueryKey_(query);\n    return this.queryToTagMap.get(queryKey);\n  };\n  /**\r\n   * Static accessor for query tags.\r\n   */\n\n\n  SyncTree.getNextQueryTag_ = function () {\n    return SyncTree.nextQueryTag_++;\n  };\n  /**\r\n   * A helper method to apply tagged operations\r\n   */\n\n\n  SyncTree.prototype.applyTaggedOperation_ = function (queryPath, operation) {\n    var syncPoint = this.syncPointTree_.get(queryPath);\n    util.assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n    var writesCache = this.pendingWriteTree_.childWrites(queryPath);\n    return syncPoint.applyOperation(operation, writesCache,\n    /*serverCache=*/\n    null);\n  };\n  /**\r\n   * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n   *\r\n   * NOTES:\r\n   * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n   *\r\n   * - We call applyOperation() on each SyncPoint passing three things:\r\n   *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n   *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n   *   3. A snapshot Node with cached server data, if we have it.\r\n   *\r\n   * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n   */\n\n\n  SyncTree.prototype.applyOperationToSyncPoints_ = function (operation) {\n    return this.applyOperationHelper_(operation, this.syncPointTree_,\n    /*serverCache=*/\n    null, this.pendingWriteTree_.childWrites(Path.Empty));\n  };\n  /**\r\n   * Recursive helper for applyOperationToSyncPoints_\r\n   */\n\n\n  SyncTree.prototype.applyOperationHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\n    if (operation.path.isEmpty()) {\n      return this.applyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\n    } else {\n      var syncPoint = syncPointTree.get(Path.Empty); // If we don't have cached server data, see if we can get it from this SyncPoint.\n\n      if (serverCache == null && syncPoint != null) {\n        serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n      }\n\n      var events = [];\n      var childName = operation.path.getFront();\n      var childOperation = operation.operationForChild(childName);\n      var childTree = syncPointTree.children.get(childName);\n\n      if (childTree && childOperation) {\n        var childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n        var childWritesCache = writesCache.child(childName);\n        events = events.concat(this.applyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\n      }\n\n      if (syncPoint) {\n        events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\n      }\n\n      return events;\n    }\n  };\n  /**\r\n   * Recursive helper for applyOperationToSyncPoints_\r\n   */\n\n\n  SyncTree.prototype.applyOperationDescendantsHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\n    var _this = this;\n\n    var syncPoint = syncPointTree.get(Path.Empty); // If we don't have cached server data, see if we can get it from this SyncPoint.\n\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n    }\n\n    var events = [];\n    syncPointTree.children.inorderTraversal(function (childName, childTree) {\n      var childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n      var childWritesCache = writesCache.child(childName);\n      var childOperation = operation.operationForChild(childName);\n\n      if (childOperation) {\n        events = events.concat(_this.applyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\n      }\n    });\n\n    if (syncPoint) {\n      events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\n    }\n\n    return events;\n  };\n  /**\r\n   * Static tracker for next query tag.\r\n   */\n\n\n  SyncTree.nextQueryTag_ = 1;\n  return SyncTree;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n *\r\n * @constructor\r\n */\n\n\nvar SnapshotHolder =\n/** @class */\nfunction () {\n  function SnapshotHolder() {\n    this.rootNode_ = ChildrenNode.EMPTY_NODE;\n  }\n\n  SnapshotHolder.prototype.getNode = function (path) {\n    return this.rootNode_.getChild(path);\n  };\n\n  SnapshotHolder.prototype.updateSnapshot = function (path, newSnapshotNode) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  };\n\n  return SnapshotHolder;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Tracks a collection of stats.\r\n *\r\n * @constructor\r\n */\n\n\nvar StatsCollection =\n/** @class */\nfunction () {\n  function StatsCollection() {\n    this.counters_ = {};\n  }\n\n  StatsCollection.prototype.incrementCounter = function (name, amount) {\n    if (amount === void 0) {\n      amount = 1;\n    }\n\n    if (!util.contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  };\n\n  StatsCollection.prototype.get = function () {\n    return util.deepCopy(this.counters_);\n  };\n\n  return StatsCollection;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar StatsManager =\n/** @class */\nfunction () {\n  function StatsManager() {}\n\n  StatsManager.getCollection = function (repoInfo) {\n    var hashString = repoInfo.toString();\n\n    if (!this.collections_[hashString]) {\n      this.collections_[hashString] = new StatsCollection();\n    }\n\n    return this.collections_[hashString];\n  };\n\n  StatsManager.getOrCreateReporter = function (repoInfo, creatorFunction) {\n    var hashString = repoInfo.toString();\n\n    if (!this.reporters_[hashString]) {\n      this.reporters_[hashString] = creatorFunction();\n    }\n\n    return this.reporters_[hashString];\n  };\n\n  StatsManager.collections_ = {};\n  StatsManager.reporters_ = {};\n  return StatsManager;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ The collection to \"listen\" to.\r\n * @constructor\r\n */\n\n\nvar StatsListener =\n/** @class */\nfunction () {\n  function StatsListener(collection_) {\n    this.collection_ = collection_;\n    this.last_ = null;\n  }\n\n  StatsListener.prototype.get = function () {\n    var newStats = this.collection_.get();\n\n    var delta = tslib.__assign({}, newStats);\n\n    if (this.last_) {\n      each(this.last_, function (stat, value) {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n\n    this.last_ = newStats;\n    return delta;\n  };\n\n  return StatsListener;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\n\n\nvar FIRST_STATS_MIN_TIME = 10 * 1000;\nvar FIRST_STATS_MAX_TIME = 30 * 1000; // We'll continue to report stats on average every 5 minutes.\n\nvar REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n/**\r\n * @constructor\r\n */\n\nvar StatsReporter =\n/** @class */\nfunction () {\n  /**\r\n   * @param collection\r\n   * @param server_\r\n   */\n  function StatsReporter(collection, server_) {\n    this.server_ = server_;\n    this.statsToReport_ = {};\n    this.statsListener_ = new StatsListener(collection);\n    var timeout = FIRST_STATS_MIN_TIME + (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  StatsReporter.prototype.includeStat = function (stat) {\n    this.statsToReport_[stat] = true;\n  };\n\n  StatsReporter.prototype.reportStats_ = function () {\n    var _this = this;\n\n    var stats = this.statsListener_.get();\n    var reportedStats = {};\n    var haveStatsToReport = false;\n    each(stats, function (stat, value) {\n      if (value > 0 && util.contains(_this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    } // queue our next run.\n\n\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\n  };\n\n  return StatsReporter;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n * @constructor\r\n */\n\n\nvar EventQueue =\n/** @class */\nfunction () {\n  function EventQueue() {\n    /**\r\n     * @private\r\n     * @type {!Array.<EventList>}\r\n     */\n    this.eventLists_ = [];\n    /**\r\n     * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n     * @private\r\n     * @type {!number}\r\n     */\n\n    this.recursionDepth_ = 0;\n  }\n  /**\r\n   * @param {!Array.<Event>} eventDataList The new events to queue.\r\n   */\n\n\n  EventQueue.prototype.queueEvents = function (eventDataList) {\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n    var currList = null;\n\n    for (var i = 0; i < eventDataList.length; i++) {\n      var eventData = eventDataList[i];\n      var eventPath = eventData.getPath();\n\n      if (currList !== null && !eventPath.equals(currList.getPath())) {\n        this.eventLists_.push(currList);\n        currList = null;\n      }\n\n      if (currList === null) {\n        currList = new EventList(eventPath);\n      }\n\n      currList.add(eventData);\n    }\n\n    if (currList) {\n      this.eventLists_.push(currList);\n    }\n  };\n  /**\r\n   * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n   * for the specified path.\r\n   *\r\n   * It is assumed that the new events are all for the specified path.\r\n   *\r\n   * @param {!Path} path The path to raise events for.\r\n   * @param {!Array.<Event>} eventDataList The new events to raise.\r\n   */\n\n\n  EventQueue.prototype.raiseEventsAtPath = function (path, eventDataList) {\n    this.queueEvents(eventDataList);\n    this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\n      return eventPath.equals(path);\n    });\n  };\n  /**\r\n   * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n   * locations related to the specified change path (i.e. all ancestors and descendants).\r\n   *\r\n   * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n   *\r\n   * @param {!Path} changedPath The path to raise events for.\r\n   * @param {!Array.<!Event>} eventDataList The events to raise\r\n   */\n\n\n  EventQueue.prototype.raiseEventsForChangedPath = function (changedPath, eventDataList) {\n    this.queueEvents(eventDataList);\n    this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\n      return eventPath.contains(changedPath) || changedPath.contains(eventPath);\n    });\n  };\n  /**\r\n   * @param {!function(!Path):boolean} predicate\r\n   * @private\r\n   */\n\n\n  EventQueue.prototype.raiseQueuedEventsMatchingPredicate_ = function (predicate) {\n    this.recursionDepth_++;\n    var sentAll = true;\n\n    for (var i = 0; i < this.eventLists_.length; i++) {\n      var eventList = this.eventLists_[i];\n\n      if (eventList) {\n        var eventPath = eventList.getPath();\n\n        if (predicate(eventPath)) {\n          this.eventLists_[i].raise();\n          this.eventLists_[i] = null;\n        } else {\n          sentAll = false;\n        }\n      }\n    }\n\n    if (sentAll) {\n      this.eventLists_ = [];\n    }\n\n    this.recursionDepth_--;\n  };\n\n  return EventQueue;\n}();\n/**\r\n * @param {!Path} path\r\n * @constructor\r\n */\n\n\nvar EventList =\n/** @class */\nfunction () {\n  function EventList(path_) {\n    this.path_ = path_;\n    /**\r\n     * @type {!Array.<Event>}\r\n     * @private\r\n     */\n\n    this.events_ = [];\n  }\n  /**\r\n   * @param {!Event} eventData\r\n   */\n\n\n  EventList.prototype.add = function (eventData) {\n    this.events_.push(eventData);\n  };\n  /**\r\n   * Iterates through the list and raises each event\r\n   */\n\n\n  EventList.prototype.raise = function () {\n    for (var i = 0; i < this.events_.length; i++) {\n      var eventData = this.events_[i];\n\n      if (eventData !== null) {\n        this.events_[i] = null;\n        var eventFn = eventData.getEventRunner();\n\n        if (logger) {\n          log('event: ' + eventData.toString());\n        }\n\n        exceptionGuard(eventFn);\n      }\n    }\n  };\n  /**\r\n   * @return {!Path}\r\n   */\n\n\n  EventList.prototype.getPath = function () {\n    return this.path_;\n  };\n\n  return EventList;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\n\n\nvar EventEmitter =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!Array.<string>} allowedEvents_\r\n   */\n  function EventEmitter(allowedEvents_) {\n    this.allowedEvents_ = allowedEvents_;\n    this.listeners_ = {};\n    util.assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\n  }\n  /**\r\n   * To be called by derived classes to trigger events.\r\n   * @param {!string} eventType\r\n   * @param {...*} varArgs\r\n   */\n\n\n  EventEmitter.prototype.trigger = function (eventType) {\n    var varArgs = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      varArgs[_i - 1] = arguments[_i];\n    }\n\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      var listeners = tslib.__spread(this.listeners_[eventType]);\n\n      for (var i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  };\n\n  EventEmitter.prototype.on = function (eventType, callback, context) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({\n      callback: callback,\n      context: context\n    });\n    var eventData = this.getInitialEvent(eventType);\n\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  };\n\n  EventEmitter.prototype.off = function (eventType, callback, context) {\n    this.validateEventType_(eventType);\n    var listeners = this.listeners_[eventType] || [];\n\n    for (var i = 0; i < listeners.length; i++) {\n      if (listeners[i].callback === callback && (!context || context === listeners[i].context)) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  };\n\n  EventEmitter.prototype.validateEventType_ = function (eventType) {\n    util.assert(this.allowedEvents_.find(function (et) {\n      return et === eventType;\n    }), 'Unknown event: ' + eventType);\n  };\n\n  return EventEmitter;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @extends {EventEmitter}\r\n */\n\n\nvar VisibilityMonitor =\n/** @class */\nfunction (_super) {\n  tslib.__extends(VisibilityMonitor, _super);\n\n  function VisibilityMonitor() {\n    var _this = _super.call(this, ['visible']) || this;\n\n    var hidden;\n    var visibilityChange;\n\n    if (typeof document !== 'undefined' && typeof document.addEventListener !== 'undefined') {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    } // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n\n\n    _this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(visibilityChange, function () {\n        var visible = !document[hidden];\n\n        if (visible !== _this.visible_) {\n          _this.visible_ = visible;\n\n          _this.trigger('visible', visible);\n        }\n      }, false);\n    }\n\n    return _this;\n  }\n\n  VisibilityMonitor.getInstance = function () {\n    return new VisibilityMonitor();\n  };\n  /**\r\n   * @param {!string} eventType\r\n   * @return {Array.<boolean>}\r\n   */\n\n\n  VisibilityMonitor.prototype.getInitialEvent = function (eventType) {\n    util.assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  };\n\n  return VisibilityMonitor;\n}(EventEmitter);\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n *\r\n * @extends {EventEmitter}\r\n */\n\n\nvar OnlineMonitor =\n/** @class */\nfunction (_super) {\n  tslib.__extends(OnlineMonitor, _super);\n\n  function OnlineMonitor() {\n    var _this = _super.call(this, ['online']) || this;\n\n    _this.online_ = true; // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n\n    if (typeof window !== 'undefined' && typeof window.addEventListener !== 'undefined' && !util.isMobileCordova()) {\n      window.addEventListener('online', function () {\n        if (!_this.online_) {\n          _this.online_ = true;\n\n          _this.trigger('online', true);\n        }\n      }, false);\n      window.addEventListener('offline', function () {\n        if (_this.online_) {\n          _this.online_ = false;\n\n          _this.trigger('online', false);\n        }\n      }, false);\n    }\n\n    return _this;\n  }\n\n  OnlineMonitor.getInstance = function () {\n    return new OnlineMonitor();\n  };\n  /**\r\n   * @param {!string} eventType\r\n   * @return {Array.<boolean>}\r\n   */\n\n\n  OnlineMonitor.prototype.getInitialEvent = function (eventType) {\n    util.assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  OnlineMonitor.prototype.currentlyOnline = function () {\n    return this.online_;\n  };\n\n  return OnlineMonitor;\n}(EventEmitter);\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n * @constructor\r\n */\n\n\nvar PacketReceiver =\n/** @class */\nfunction () {\n  /**\r\n   * @param onMessage_\r\n   */\n  function PacketReceiver(onMessage_) {\n    this.onMessage_ = onMessage_;\n    this.pendingResponses = [];\n    this.currentResponseNum = 0;\n    this.closeAfterResponse = -1;\n    this.onClose = null;\n  }\n\n  PacketReceiver.prototype.closeAfter = function (responseNum, callback) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  };\n  /**\r\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n   * browsers will respond in the same order as the requests we sent\r\n   * @param {number} requestNum\r\n   * @param {Array} data\r\n   */\n\n\n  PacketReceiver.prototype.handleResponse = function (requestNum, data) {\n    var _this = this;\n\n    this.pendingResponses[requestNum] = data;\n\n    var _loop_1 = function () {\n      var toProcess = this_1.pendingResponses[this_1.currentResponseNum];\n      delete this_1.pendingResponses[this_1.currentResponseNum];\n\n      var _loop_2 = function (i) {\n        if (toProcess[i]) {\n          exceptionGuard(function () {\n            _this.onMessage_(toProcess[i]);\n          });\n        }\n      };\n\n      for (var i = 0; i < toProcess.length; ++i) {\n        _loop_2(i);\n      }\n\n      if (this_1.currentResponseNum === this_1.closeAfterResponse) {\n        if (this_1.onClose) {\n          this_1.onClose();\n          this_1.onClose = null;\n        }\n\n        return \"break\";\n      }\n\n      this_1.currentResponseNum++;\n    };\n\n    var this_1 = this;\n\n    while (this.pendingResponses[this.currentResponseNum]) {\n      var state_1 = _loop_1();\n\n      if (state_1 === \"break\") break;\n    }\n  };\n\n  return PacketReceiver;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// URL query parameters associated with longpolling\n\n\nvar FIREBASE_LONGPOLL_START_PARAM = 'start';\nvar FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nvar FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nvar FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nvar FIREBASE_LONGPOLL_ID_PARAM = 'id';\nvar FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nvar FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nvar FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nvar FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nvar FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nvar FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nvar FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe'; //Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\n\nvar MAX_URL_DATA_SIZE = 1870;\nvar SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\n\nvar MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n * @const\r\n * @type {number}\r\n */\n\nvar KEEPALIVE_REQUEST_INTERVAL = 25000;\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n * @const\r\n * @type {number}\r\n */\n\nvar LP_CONNECT_TIMEOUT = 30000;\n/**\r\n * This class manages a single long-polling connection.\r\n *\r\n * @constructor\r\n * @implements {Transport}\r\n */\n\nvar BrowserPollConnection =\n/** @class */\nfunction () {\n  /**\r\n   * @param connId An identifier for this connection, used for logging\r\n   * @param repoInfo The info for the endpoint to send data to.\r\n   * @param applicationId The Firebase App ID for this project.\r\n   * @param transportSessionId Optional transportSessionid if we are reconnecting for an existing\r\n   *                                         transport session\r\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has already created a\r\n   *                                     connection previously\r\n   */\n  function BrowserPollConnection(connId, repoInfo, applicationId, transportSessionId, lastSessionId) {\n    this.connId = connId;\n    this.repoInfo = repoInfo;\n    this.applicationId = applicationId;\n    this.transportSessionId = transportSessionId;\n    this.lastSessionId = lastSessionId;\n    this.bytesSent = 0;\n    this.bytesReceived = 0;\n    this.everConnected_ = false;\n    this.log_ = logWrapper(connId);\n    this.stats_ = StatsManager.getCollection(repoInfo);\n\n    this.urlFn = function (params) {\n      return repoInfo.connectionURL(LONG_POLLING, params);\n    };\n  }\n  /**\r\n   *\r\n   * @param {function(Object)} onMessage Callback when messages arrive\r\n   * @param {function()} onDisconnect Callback with connection lost.\r\n   */\n\n\n  BrowserPollConnection.prototype.open = function (onMessage, onDisconnect) {\n    var _this = this;\n\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n    this.connectTimeoutTimer_ = setTimeout(function () {\n      _this.log_('Timed out trying to connect.'); // Make sure we clear the host cache\n\n\n      _this.onClosed_();\n\n      _this.connectTimeoutTimer_ = null; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)); // Ensure we delay the creation of the iframe until the DOM is loaded.\n\n    executeWhenDOMReady(function () {\n      if (_this.isClosed_) {\n        return;\n      } //Set up a callback that gets triggered once a connection is set up.\n\n\n      _this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var _a = tslib.__read(args, 5),\n            command = _a[0],\n            arg1 = _a[1],\n            arg2 = _a[2],\n            arg3 = _a[3],\n            arg4 = _a[4];\n\n        _this.incrementIncomingBytes_(args);\n\n        if (!_this.scriptTagHolder) {\n          return; // we closed the connection.\n        }\n\n        if (_this.connectTimeoutTimer_) {\n          clearTimeout(_this.connectTimeoutTimer_);\n          _this.connectTimeoutTimer_ = null;\n        }\n\n        _this.everConnected_ = true;\n\n        if (command === FIREBASE_LONGPOLL_START_PARAM) {\n          _this.id = arg1;\n          _this.password = arg2;\n        } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n          // Don't clear the host cache. We got a response from the server, so we know it's reachable\n          if (arg1) {\n            // We aren't expecting any more data (other than what the server's already in the process of sending us\n            // through our already open polls), so don't send any more.\n            _this.scriptTagHolder.sendNewPolls = false; // arg1 in this case is the last response number sent by the server. We should try to receive\n            // all of the responses up to this one before closing\n\n            _this.myPacketOrderer.closeAfter(arg1, function () {\n              _this.onClosed_();\n            });\n          } else {\n            _this.onClosed_();\n          }\n        } else {\n          throw new Error('Unrecognized command received: ' + command);\n        }\n      }, function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var _a = tslib.__read(args, 2),\n            pN = _a[0],\n            data = _a[1];\n\n        _this.incrementIncomingBytes_(args);\n\n        _this.myPacketOrderer.handleResponse(pN, data);\n      }, function () {\n        _this.onClosed_();\n      }, _this.urlFn); //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n\n      var urlParams = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\n\n      if (_this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n      if (_this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = _this.transportSessionId;\n      }\n\n      if (_this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = _this.lastSessionId;\n      }\n\n      if (_this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = _this.applicationId;\n      }\n\n      if (typeof location !== 'undefined' && location.href && location.href.indexOf(FORGE_DOMAIN) !== -1) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n\n      var connectURL = _this.urlFn(urlParams);\n\n      _this.log_('Connecting via long-poll to ' + connectURL);\n\n      _this.scriptTagHolder.addTag(connectURL, function () {\n        /* do nothing */\n      });\n    });\n  };\n  /**\r\n   * Call this when a handshake has completed successfully and we want to consider the connection established\r\n   */\n\n\n  BrowserPollConnection.prototype.start = function () {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  };\n  /**\r\n   * Forces long polling to be considered as a potential transport\r\n   */\n\n\n  BrowserPollConnection.forceAllow = function () {\n    BrowserPollConnection.forceAllow_ = true;\n  };\n  /**\r\n   * Forces longpolling to not be considered as a potential transport\r\n   */\n\n\n  BrowserPollConnection.forceDisallow = function () {\n    BrowserPollConnection.forceDisallow_ = true;\n  }; // Static method, use string literal so it can be accessed in a generic way\n\n\n  BrowserPollConnection.isAvailable = function () {\n    if (util.isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return !BrowserPollConnection.forceDisallow_ && typeof document !== 'undefined' && document.createElement != null && !isChromeExtensionContentScript() && !isWindowsStoreApp();\n    }\n  };\n  /**\r\n   * No-op for polling\r\n   */\n\n\n  BrowserPollConnection.prototype.markConnectionHealthy = function () {};\n  /**\r\n   * Stops polling and cleans up the iframe\r\n   * @private\r\n   */\n\n\n  BrowserPollConnection.prototype.shutdown_ = function () {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    } //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n\n\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  };\n  /**\r\n   * Triggered when this transport is closed\r\n   * @private\r\n   */\n\n\n  BrowserPollConnection.prototype.onClosed_ = function () {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  };\n  /**\r\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n   * that we've left.\r\n   */\n\n\n  BrowserPollConnection.prototype.close = function () {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  };\n  /**\r\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n   * broken into chunks (since URLs have a small maximum length).\r\n   * @param {!Object} data The JSON data to transmit.\r\n   */\n\n\n  BrowserPollConnection.prototype.send = function (data) {\n    var dataStr = util.stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length); //first, lets get the base64-encoded data\n\n    var base64data = util.base64Encode(dataStr); //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    var dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE); //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n\n    for (var i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\n      this.curSegmentNum++;\n    }\n  };\n  /**\r\n   * This is how we notify the server that we're leaving.\r\n   * We aren't able to send requests with DHTML on a window close event, but we can\r\n   * trigger XHR requests in some browsers (everything but Opera basically).\r\n   * @param {!string} id\r\n   * @param {!string} pw\r\n   */\n\n\n  BrowserPollConnection.prototype.addDisconnectPingFrame = function (id, pw) {\n    if (util.isNodeSdk()) {\n      return;\n    }\n\n    this.myDisconnFrame = document.createElement('iframe');\n    var urlParams = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n    document.body.appendChild(this.myDisconnFrame);\n  };\n  /**\r\n   * Used to track the bytes received by this client\r\n   * @param {*} args\r\n   * @private\r\n   */\n\n\n  BrowserPollConnection.prototype.incrementIncomingBytes_ = function (args) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    var bytesReceived = util.stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  };\n\n  return BrowserPollConnection;\n}();\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n * @constructor\r\n *********************************************************************************************/\n\n\nvar FirebaseIFrameScriptHolder =\n/** @class */\nfunction () {\n  /**\r\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n   */\n  function FirebaseIFrameScriptHolder(commandCB, onMessageCB, onDisconnect, urlFn) {\n    this.onDisconnect = onDisconnect;\n    this.urlFn = urlFn; //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n    //problems in some browsers.\n\n    this.outstandingRequests = new Set(); //A queue of the pending segments waiting for transmission to the server.\n\n    this.pendingSegs = []; //A serial number. We use this for two things:\n    // 1) A way to ensure the browser doesn't cache responses to polls\n    // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n    //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n    //    JSONP code in the order it was added to the iframe.\n\n    this.currentSerial = Math.floor(Math.random() * 100000000); // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n    // incoming data from the server that we're waiting for).\n\n    this.sendNewPolls = true;\n\n    if (!util.isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB; //Create an iframe for us to add script tags to.\n\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_(); // Set the iframe's contents.\n\n      var script = ''; // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n\n      if (this.myIFrame.src && this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\n        var currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n\n      var iframeContents = '<html><body>' + script + '</body></html>';\n\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n\n        if (e.stack) {\n          log(e.stack);\n        }\n\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n  /**\r\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n   * actually use.\r\n   * @private\r\n   * @return {Element}\r\n   */\n\n\n  FirebaseIFrameScriptHolder.createIFrame_ = function () {\n    var iframe = document.createElement('iframe');\n    iframe.style.display = 'none'; // This is necessary in order to initialize the document inside the iframe\n\n    if (document.body) {\n      document.body.appendChild(iframe);\n\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        var a = iframe.contentWindow.document;\n\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        var domain = document.domain;\n        iframe.src = \"javascript:void((function(){document.open();document.domain='\" + domain + \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    } // Get the document of the iframe in a browser-specific way.\n\n\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if (iframe.document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = iframe.document; //others?\n    }\n\n    return iframe;\n  };\n  /**\r\n   * Cancel all outstanding queries and remove the frame.\r\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.close = function () {\n    var _this = this; //Mark this iframe as dead, so no new requests are sent.\n\n\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(function () {\n        if (_this.myIFrame !== null) {\n          document.body.removeChild(_this.myIFrame);\n          _this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    } // Protect from being called recursively.\n\n\n    var onDisconnect = this.onDisconnect;\n\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  };\n  /**\r\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n   * @param {!string} id - The ID of this connection\r\n   * @param {!string} pw - The password for this connection\r\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.startLongPoll = function (id, pw) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true; //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n\n    while (this.newRequest_()) {}\n  };\n  /**\r\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n   * too many outstanding requests and we are still alive.\r\n   *\r\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n   * needed.\r\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.newRequest_ = function () {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (this.alive && this.sendNewPolls && this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\n      //construct our url\n      this.currentSerial++;\n      var urlParams = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      var theURL = this.urlFn(urlParams); //Now add as much data as we can.\n\n      var curDataString = '';\n      var i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        var nextSeg = this.pendingSegs[0];\n\n        if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <= MAX_URL_DATA_SIZE) {\n          //great, the segment will fit. Lets append it.\n          var theSeg = this.pendingSegs.shift();\n          curDataString = curDataString + '&' + FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM + i + '=' + theSeg.seg + '&' + FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET + i + '=' + theSeg.ts + '&' + FIREBASE_LONGPOLL_DATA_PARAM + i + '=' + theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n      return true;\n    } else {\n      return false;\n    }\n  };\n  /**\r\n   * Queue a packet for transmission to the server.\r\n   * @param segnum - A sequential id for this packet segment used for reassembly\r\n   * @param totalsegs - The total number of segments in this packet\r\n   * @param data - The data for this segment.\r\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.enqueueSegment = function (segnum, totalsegs, data) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({\n      seg: segnum,\n      ts: totalsegs,\n      d: data\n    }); //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n\n    if (this.alive) {\n      this.newRequest_();\n    }\n  };\n  /**\r\n   * Add a script tag for a regular long-poll request.\r\n   * @param {!string} url - The URL of the script tag.\r\n   * @param {!number} serial - The serial number of the request.\r\n   * @private\r\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.addLongPollTag_ = function (url, serial) {\n    var _this = this; //remember that we sent this request.\n\n\n    this.outstandingRequests.add(serial);\n\n    var doNewRequest = function () {\n      _this.outstandingRequests.delete(serial);\n\n      _this.newRequest_();\n    }; // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n\n\n    var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\n\n    var readyStateCB = function () {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout); // Trigger a new request so we can continue receiving data.\n\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  };\n  /**\r\n   * Add an arbitrary script tag to the iframe.\r\n   * @param {!string} url - The URL for the script tag source.\r\n   * @param {!function()} loadCB - A callback to be triggered once the script has loaded.\r\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.addTag = function (url, loadCB) {\n    var _this = this;\n\n    if (util.isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(function () {\n        try {\n          // if we're already closed, don't add this poll\n          if (!_this.sendNewPolls) {\n            return;\n          }\n\n          var newScript_1 = _this.myIFrame.doc.createElement('script');\n\n          newScript_1.type = 'text/javascript';\n          newScript_1.async = true;\n          newScript_1.src = url; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n          newScript_1.onload = newScript_1.onreadystatechange = function () {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var rstate = newScript_1.readyState;\n\n            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              newScript_1.onload = newScript_1.onreadystatechange = null;\n\n              if (newScript_1.parentNode) {\n                newScript_1.parentNode.removeChild(newScript_1);\n              }\n\n              loadCB();\n            }\n          };\n\n          newScript_1.onerror = function () {\n            log('Long-poll script failed to load: ' + url);\n            _this.sendNewPolls = false;\n\n            _this.close();\n          };\n\n          _this.myIFrame.doc.body.appendChild(newScript_1);\n        } catch (e) {// TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  };\n\n  return FirebaseIFrameScriptHolder;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** The semver (www.semver.org) version of the SDK. */\n\n\nvar SDK_VERSION = ''; // SDK_VERSION should be set before any database instance is created\n\nfunction setSDKVersion(version) {\n  SDK_VERSION = version;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar WEBSOCKET_MAX_FRAME_SIZE = 16384;\nvar WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\nvar WebSocketImpl = null;\n\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n * @constructor\r\n * @implements {Transport}\r\n */\n\n\nvar WebSocketConnection =\n/** @class */\nfunction () {\n  /**\r\n   * @param connId identifier for this transport\r\n   * @param repoInfo The info for the websocket endpoint.\r\n   * @param applicationId The Firebase App ID for this project.\r\n   * @param transportSessionId Optional transportSessionId if this is connecting to an existing transport\r\n   *                                         session\r\n   * @param lastSessionId Optional lastSessionId if there was a previous connection\r\n   */\n  function WebSocketConnection(connId, repoInfo, applicationId, transportSessionId, lastSessionId) {\n    this.connId = connId;\n    this.applicationId = applicationId;\n    this.keepaliveTimer = null;\n    this.frames = null;\n    this.totalFrames = 0;\n    this.bytesSent = 0;\n    this.bytesReceived = 0;\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = StatsManager.getCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId);\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n  /**\r\n   * @param {RepoInfo} repoInfo The info for the websocket endpoint.\r\n   * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\r\n   *                                         session\r\n   * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\r\n   * @return {string} connection url\r\n   * @private\r\n   */\n\n\n  WebSocketConnection.connectionURL_ = function (repoInfo, transportSessionId, lastSessionId) {\n    var urlParams = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (!util.isNodeSdk() && typeof location !== 'undefined' && location.href && location.href.indexOf(FORGE_DOMAIN) !== -1) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n\n    return repoInfo.connectionURL(WEBSOCKET, urlParams);\n  };\n  /**\r\n   *\r\n   * @param onMessage Callback when messages arrive\r\n   * @param onDisconnect Callback with connection lost.\r\n   */\n\n\n  WebSocketConnection.prototype.open = function (onMessage, onDisconnect) {\n    var _this = this;\n\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n    this.log_('Websocket connecting to ' + this.connURL);\n    this.everConnected_ = false; // Assume failure until proven otherwise.\n\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      if (util.isNodeSdk()) {\n        var device = this.nodeAdmin ? 'AdminNode' : 'Node'; // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n\n        var options = {\n          headers: {\n            'User-Agent': \"Firebase/\" + PROTOCOL_VERSION + \"/\" + SDK_VERSION + \"/\" + process.platform + \"/\" + device,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        }; // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n\n        var env = process['env'];\n        var proxy = this.connURL.indexOf('wss://') === 0 ? env['HTTPS_PROXY'] || env['https_proxy'] : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = {\n            origin: proxy\n          };\n        }\n\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      } else {\n        var options = {\n          headers: {\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      }\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      var error = e.message || e.data;\n\n      if (error) {\n        this.log_(error);\n      }\n\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = function () {\n      _this.log_('Websocket connected.');\n\n      _this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = function () {\n      _this.log_('Websocket connection was disconnected.');\n\n      _this.mySock = null;\n\n      _this.onClosed_();\n    };\n\n    this.mySock.onmessage = function (m) {\n      _this.handleIncomingFrame(m);\n    };\n\n    this.mySock.onerror = function (e) {\n      _this.log_('WebSocket error.  Closing connection.'); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n      var error = e.message || e.data;\n\n      if (error) {\n        _this.log_(error);\n      }\n\n      _this.onClosed_();\n    };\n  };\n  /**\r\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n   */\n\n\n  WebSocketConnection.prototype.start = function () {};\n\n  WebSocketConnection.forceDisallow = function () {\n    WebSocketConnection.forceDisallow_ = true;\n  };\n\n  WebSocketConnection.isAvailable = function () {\n    var isOldAndroid = false;\n\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      var oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      var oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return !isOldAndroid && WebSocketImpl !== null && !WebSocketConnection.forceDisallow_;\n  };\n  /**\r\n   * Returns true if we previously failed to connect with this transport.\r\n   * @return {boolean}\r\n   */\n\n\n  WebSocketConnection.previouslyFailed = function () {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return PersistentStorage.isInMemoryStorage || PersistentStorage.get('previous_websocket_failure') === true;\n  };\n\n  WebSocketConnection.prototype.markConnectionHealthy = function () {\n    PersistentStorage.remove('previous_websocket_failure');\n  };\n\n  WebSocketConnection.prototype.appendFrame_ = function (data) {\n    this.frames.push(data);\n\n    if (this.frames.length === this.totalFrames) {\n      var fullMess = this.frames.join('');\n      this.frames = null;\n      var jsonMess = util.jsonEval(fullMess); //handle the message\n\n      this.onMessage(jsonMess);\n    }\n  };\n  /**\r\n   * @param {number} frameCount The number of frames we are expecting from the server\r\n   * @private\r\n   */\n\n\n  WebSocketConnection.prototype.handleNewFrameCount_ = function (frameCount) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  };\n  /**\r\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n   * @param {!String} data\r\n   * @return {?String} Any remaining data to be process, or null if there is none\r\n   * @private\r\n   */\n\n\n  WebSocketConnection.prototype.extractFrameCount_ = function (data) {\n    util.assert(this.frames === null, 'We already have a frame buffer'); // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n\n    if (data.length <= 6) {\n      var frameCount = Number(data);\n\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n\n    this.handleNewFrameCount_(1);\n    return data;\n  };\n  /**\r\n   * Process a websocket frame that has arrived from the server.\r\n   * @param mess The frame data\r\n   */\n\n\n  WebSocketConnection.prototype.handleIncomingFrame = function (mess) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n\n    var data = mess['data'];\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      var remainingData = this.extractFrameCount_(data);\n\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  };\n  /**\r\n   * Send a message to the server\r\n   * @param {Object} data The JSON object to transmit\r\n   */\n\n\n  WebSocketConnection.prototype.send = function (data) {\n    this.resetKeepAlive();\n    var dataStr = util.stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length); //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    var dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE); //Send the length header\n\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    } //Send the actual data in segments.\n\n\n    for (var i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  };\n\n  WebSocketConnection.prototype.shutdown_ = function () {\n    this.isClosed_ = true;\n\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  };\n\n  WebSocketConnection.prototype.onClosed_ = function () {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_(); // since this is an internal close, trigger the close listener\n\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  };\n  /**\r\n   * External-facing close handler.\r\n   * Close the websocket and kill the connection.\r\n   */\n\n\n  WebSocketConnection.prototype.close = function () {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  };\n  /**\r\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n   * the last activity.\r\n   */\n\n\n  WebSocketConnection.prototype.resetKeepAlive = function () {\n    var _this = this;\n\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(function () {\n      //If there has been no websocket activity for a while, send a no-op\n      if (_this.mySock) {\n        _this.sendString_('0');\n      }\n\n      _this.resetKeepAlive(); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\n  };\n  /**\r\n   * Send a string over the websocket.\r\n   *\r\n   * @param {string} str String to send.\r\n   * @private\r\n   */\n\n\n  WebSocketConnection.prototype.sendString_ = function (str) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  };\n  /**\r\n   * Number of response before we consider the connection \"healthy.\"\r\n   * @type {number}\r\n   */\n\n\n  WebSocketConnection.responsesRequiredToBeHealthy = 2;\n  /**\r\n   * Time to wait for the connection te become healthy before giving up.\r\n   * @type {number}\r\n   */\n\n  WebSocketConnection.healthyTimeout = 30000;\n  return WebSocketConnection;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n * @constructor\r\n */\n\n\nvar TransportManager =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to\r\n   */\n  function TransportManager(repoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  Object.defineProperty(TransportManager, \"ALL_TRANSPORTS\", {\n    /**\r\n     * @const\r\n     * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}\r\n     */\n    get: function () {\n      return [BrowserPollConnection, WebSocketConnection];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * @param {!RepoInfo} repoInfo\r\n   * @private\r\n   */\n\n  TransportManager.prototype.initTransports_ = function (repoInfo) {\n    var e_1, _a;\n\n    var isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\n    var isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      var transports = this.transports_ = [];\n\n      try {\n        for (var _b = tslib.__values(TransportManager.ALL_TRANSPORTS), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var transport = _c.value;\n\n          if (transport && transport['isAvailable']()) {\n            transports.push(transport);\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n  };\n  /**\r\n   * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the\r\n   * initial transport to use\r\n   */\n\n\n  TransportManager.prototype.initialTransport = function () {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  };\n  /**\r\n   * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next\r\n   * transport, or null\r\n   */\n\n\n  TransportManager.prototype.upgradeTransport = function () {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  };\n\n  return TransportManager;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Abort upgrade attempt if it takes longer than 60s.\n\n\nvar UPGRADE_TIMEOUT = 60000; // For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\n\nvar DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000; // If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\n\nvar BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nvar BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\nvar MESSAGE_TYPE = 't';\nvar MESSAGE_DATA = 'd';\nvar CONTROL_SHUTDOWN = 's';\nvar CONTROL_RESET = 'r';\nvar CONTROL_ERROR = 'e';\nvar CONTROL_PONG = 'o';\nvar SWITCH_ACK = 'a';\nvar END_TRANSMISSION = 'n';\nvar PING = 'p';\nvar SERVER_HELLO = 'h';\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n *\r\n * @constructor\r\n */\n\nvar Connection =\n/** @class */\nfunction () {\n  /**\r\n   * @param id - an id for this connection\r\n   * @param repoInfo_ - the info for the endpoint to connect to\r\n   * @param applicationId_ - the Firebase App ID for this project\r\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n   */\n  function Connection(id, repoInfo_, applicationId_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\n    this.id = id;\n    this.repoInfo_ = repoInfo_;\n    this.applicationId_ = applicationId_;\n    this.onMessage_ = onMessage_;\n    this.onReady_ = onReady_;\n    this.onDisconnect_ = onDisconnect_;\n    this.onKill_ = onKill_;\n    this.lastSessionId = lastSessionId;\n    this.connectionCount = 0;\n    this.pendingDataMessages = [];\n    this.state_ = 0\n    /* CONNECTING */\n    ;\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n  /**\r\n   * Starts a connection attempt\r\n   * @private\r\n   */\n\n\n  Connection.prototype.start_ = function () {\n    var _this = this;\n\n    var conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, undefined, this.lastSessionId); // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n    var onMessageReceived = this.connReceiver_(this.conn_);\n    var onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n    /*\r\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n     * still have the context of your originating frame.\r\n     */\n\n    setTimeout(function () {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      _this.conn_ && _this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n    var healthyTimeoutMS = conn['healthyTimeout'] || 0;\n\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(function () {\n        _this.healthyTimeout_ = null;\n\n        if (!_this.isHealthy_) {\n          if (_this.conn_ && _this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\n            _this.log_('Connection exceeded healthy timeout but has received ' + _this.conn_.bytesReceived + ' bytes.  Marking connection healthy.');\n\n            _this.isHealthy_ = true;\n\n            _this.conn_.markConnectionHealthy();\n          } else if (_this.conn_ && _this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\n            _this.log_('Connection exceeded healthy timeout but has sent ' + _this.conn_.bytesSent + ' bytes.  Leaving connection alive.'); // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n\n          } else {\n            _this.log_('Closing unhealthy connection after timeout.');\n\n            _this.close();\n          }\n        } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      }, Math.floor(healthyTimeoutMS));\n    }\n  };\n  /**\r\n   * @return {!string}\r\n   * @private\r\n   */\n\n\n  Connection.prototype.nextTransportId_ = function () {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  };\n\n  Connection.prototype.disconnReceiver_ = function (conn) {\n    var _this = this;\n\n    return function (everConnected) {\n      if (conn === _this.conn_) {\n        _this.onConnectionLost_(everConnected);\n      } else if (conn === _this.secondaryConn_) {\n        _this.log_('Secondary connection lost.');\n\n        _this.onSecondaryConnectionLost_();\n      } else {\n        _this.log_('closing an old connection');\n      }\n    };\n  };\n\n  Connection.prototype.connReceiver_ = function (conn) {\n    var _this = this;\n\n    return function (message) {\n      if (_this.state_ !== 2\n      /* DISCONNECTED */\n      ) {\n        if (conn === _this.rx_) {\n          _this.onPrimaryMessageReceived_(message);\n        } else if (conn === _this.secondaryConn_) {\n          _this.onSecondaryMessageReceived_(message);\n        } else {\n          _this.log_('message on old connection');\n        }\n      }\n    };\n  };\n  /**\r\n   *\r\n   * @param {Object} dataMsg An arbitrary data message to be sent to the server\r\n   */\n\n\n  Connection.prototype.sendRequest = function (dataMsg) {\n    // wrap in a data message envelope and send it on\n    var msg = {\n      t: 'd',\n      d: dataMsg\n    };\n    this.sendData_(msg);\n  };\n\n  Connection.prototype.tryCleanupConnection = function () {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null; // the server will shutdown the old connection\n    }\n  };\n\n  Connection.prototype.onSecondaryControl_ = function (controlData) {\n    if (MESSAGE_TYPE in controlData) {\n      var cmd = controlData[MESSAGE_TYPE];\n\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close(); // If we were already using this connection for something, than we need to fully close\n\n        if (this.tx_ === this.secondaryConn_ || this.rx_ === this.secondaryConn_) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  };\n\n  Connection.prototype.onSecondaryMessageReceived_ = function (parsedData) {\n    var layer = requireKey('t', parsedData);\n    var data = requireKey('d', parsedData);\n\n    if (layer === 'c') {\n      this.onSecondaryControl_(data);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  };\n\n  Connection.prototype.upgradeIfSecondaryHealthy_ = function () {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({\n        t: 'c',\n        d: {\n          t: PING,\n          d: {}\n        }\n      });\n    }\n  };\n\n  Connection.prototype.proceedWithUpgrade_ = function () {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start(); // send ack\n\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({\n      t: 'c',\n      d: {\n        t: SWITCH_ACK,\n        d: {}\n      }\n    }); // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n\n    this.log_('Ending transmission on primary');\n    this.conn_.send({\n      t: 'c',\n      d: {\n        t: END_TRANSMISSION,\n        d: {}\n      }\n    });\n    this.tx_ = this.secondaryConn_;\n    this.tryCleanupConnection();\n  };\n\n  Connection.prototype.onPrimaryMessageReceived_ = function (parsedData) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    var layer = requireKey('t', parsedData);\n    var data = requireKey('d', parsedData);\n\n    if (layer === 'c') {\n      this.onControl_(data);\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  };\n\n  Connection.prototype.onDataMessage_ = function (message) {\n    this.onPrimaryResponse_(); // We don't do anything with data messages, just kick them up a level\n\n    this.onMessage_(message);\n  };\n\n  Connection.prototype.onPrimaryResponse_ = function () {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  };\n\n  Connection.prototype.onControl_ = function (controlData) {\n    var cmd = requireKey(MESSAGE_TYPE, controlData);\n\n    if (MESSAGE_DATA in controlData) {\n      var payload = controlData[MESSAGE_DATA];\n\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(payload);\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n\n        for (var i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  };\n  /**\r\n   *\r\n   * @param {Object} handshake The handshake data returned from the server\r\n   * @private\r\n   */\n\n\n  Connection.prototype.onHandshake_ = function (handshake) {\n    var timestamp = handshake.ts;\n    var version = handshake.v;\n    var host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.updateHost(host); // if we've already closed the connection, then don't bother trying to progress further\n\n    if (this.state_ === 0\n    /* CONNECTING */\n    ) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      } // TODO: do we want to upgrade? when? maybe a delay?\n\n\n      this.tryStartUpgrade_();\n    }\n  };\n\n  Connection.prototype.tryStartUpgrade_ = function () {\n    var conn = this.transportManager_.upgradeTransport();\n\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  };\n\n  Connection.prototype.startUpgrade_ = function (conn) {\n    var _this = this;\n\n    this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.sessionId); // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n\n    this.secondaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n    var onMessage = this.connReceiver_(this.secondaryConn_);\n    var onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect); // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n\n    setTimeoutNonBlocking(function () {\n      if (_this.secondaryConn_) {\n        _this.log_('Timed out trying to upgrade.');\n\n        _this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  };\n\n  Connection.prototype.onReset_ = function (host) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.updateHost(host); // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n\n    if (this.state_ === 1\n    /* CONNECTED */\n    ) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  };\n\n  Connection.prototype.onConnectionEstablished_ = function (conn, timestamp) {\n    var _this = this;\n\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = 1\n    /* CONNECTED */\n    ;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    } // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n\n\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(function () {\n        _this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  };\n\n  Connection.prototype.sendPingOnPrimaryIfNecessary_ = function () {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === 1\n    /* CONNECTED */\n    ) {\n      this.log_('sending ping on primary.');\n      this.sendData_({\n        t: 'c',\n        d: {\n          t: PING,\n          d: {}\n        }\n      });\n    }\n  };\n\n  Connection.prototype.onSecondaryConnectionLost_ = function () {\n    var conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  };\n  /**\r\n   *\r\n   * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if\r\n   * we should flush the host cache\r\n   * @private\r\n   */\n\n\n  Connection.prototype.onConnectionLost_ = function (everConnected) {\n    this.conn_ = null; // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n\n    if (!everConnected && this.state_ === 0\n    /* CONNECTING */\n    ) {\n      this.log_('Realtime connection failed.'); // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host); // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === 1\n    /* CONNECTED */\n    ) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  };\n  /**\r\n   *\r\n   * @param {string} reason\r\n   * @private\r\n   */\n\n\n  Connection.prototype.onConnectionShutdown_ = function (reason) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    } // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n\n\n    this.onDisconnect_ = null;\n    this.close();\n  };\n\n  Connection.prototype.sendData_ = function (data) {\n    if (this.state_ !== 1\n    /* CONNECTED */\n    ) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  };\n  /**\r\n   * Cleans up this connection, calling the appropriate callbacks\r\n   */\n\n\n  Connection.prototype.close = function () {\n    if (this.state_ !== 2\n    /* DISCONNECTED */\n    ) {\n      this.log_('Closing realtime connection.');\n      this.state_ = 2\n      /* DISCONNECTED */\n      ;\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  };\n  /**\r\n   *\r\n   * @private\r\n   */\n\n\n  Connection.prototype.closeConnections_ = function () {\n    this.log_('Shutting down all connections');\n\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  };\n\n  return Connection;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\n\n\nvar ServerActions =\n/** @class */\nfunction () {\n  function ServerActions() {}\n  /**\r\n   * @param {string} pathString\r\n   * @param {*} data\r\n   * @param {function(string, string)=} onComplete\r\n   * @param {string=} hash\r\n   */\n\n\n  ServerActions.prototype.put = function (pathString, data, onComplete, hash) {};\n  /**\r\n   * @param {string} pathString\r\n   * @param {*} data\r\n   * @param {function(string, ?string)} onComplete\r\n   * @param {string=} hash\r\n   */\n\n\n  ServerActions.prototype.merge = function (pathString, data, onComplete, hash) {};\n  /**\r\n   * Refreshes the auth token for the current connection.\r\n   * @param {string} token The authentication token\r\n   */\n\n\n  ServerActions.prototype.refreshAuthToken = function (token) {};\n  /**\r\n   * @param {string} pathString\r\n   * @param {*} data\r\n   * @param {function(string, string)=} onComplete\r\n   */\n\n\n  ServerActions.prototype.onDisconnectPut = function (pathString, data, onComplete) {};\n  /**\r\n   * @param {string} pathString\r\n   * @param {*} data\r\n   * @param {function(string, string)=} onComplete\r\n   */\n\n\n  ServerActions.prototype.onDisconnectMerge = function (pathString, data, onComplete) {};\n  /**\r\n   * @param {string} pathString\r\n   * @param {function(string, string)=} onComplete\r\n   */\n\n\n  ServerActions.prototype.onDisconnectCancel = function (pathString, onComplete) {};\n  /**\r\n   * @param {Object.<string, *>} stats\r\n   */\n\n\n  ServerActions.prototype.reportStats = function (stats) {};\n\n  return ServerActions;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar RECONNECT_MIN_DELAY = 1000;\nvar RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\n\nvar RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\n\nvar RECONNECT_DELAY_MULTIPLIER = 1.3;\nvar RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\n\nvar SERVER_KILL_INTERRUPT_REASON = 'server_kill'; // If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\n\nvar INVALID_AUTH_TOKEN_THRESHOLD = 3;\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\n\nvar PersistentConnection =\n/** @class */\nfunction (_super) {\n  tslib.__extends(PersistentConnection, _super);\n  /**\r\n   * @implements {ServerActions}\r\n   * @param repoInfo_ Data about the namespace we are connecting to\r\n   * @param applicationId_ The Firebase App ID for this project\r\n   * @param onDataUpdate_ A callback for new data from the server\r\n   */\n\n\n  function PersistentConnection(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, authOverride_) {\n    var _this = _super.call(this) || this;\n\n    _this.repoInfo_ = repoInfo_;\n    _this.applicationId_ = applicationId_;\n    _this.onDataUpdate_ = onDataUpdate_;\n    _this.onConnectStatus_ = onConnectStatus_;\n    _this.onServerInfoUpdate_ = onServerInfoUpdate_;\n    _this.authTokenProvider_ = authTokenProvider_;\n    _this.authOverride_ = authOverride_; // Used for diagnostic logging.\n\n    _this.id = PersistentConnection.nextPersistentConnectionId_++;\n    _this.log_ = logWrapper('p:' + _this.id + ':');\n    _this.interruptReasons_ = {};\n    /** Map<path, Map<queryId, ListenSpec>> */\n\n    _this.listens = new Map();\n    _this.outstandingPuts_ = [];\n    _this.outstandingPutCount_ = 0;\n    _this.onDisconnectRequestQueue_ = [];\n    _this.connected_ = false;\n    _this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n    _this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n    _this.securityDebugCallback_ = null;\n    _this.lastSessionId = null;\n    _this.establishConnectionTimer_ = null;\n    _this.visible_ = false; // Before we get connected, we keep a queue of pending messages to send.\n\n    _this.requestCBHash_ = {};\n    _this.requestNumber_ = 0;\n    _this.realtime_ = null;\n    _this.authToken_ = null;\n    _this.forceTokenRefresh_ = false;\n    _this.invalidAuthTokenCount_ = 0;\n    _this.firstConnection_ = true;\n    _this.lastConnectionAttemptTime_ = null;\n    _this.lastConnectionEstablishedTime_ = null;\n\n    if (authOverride_ && !util.isNodeSdk()) {\n      throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\n    }\n\n    _this.scheduleConnect_(0);\n\n    VisibilityMonitor.getInstance().on('visible', _this.onVisible_, _this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', _this.onOnline_, _this);\n    }\n\n    return _this;\n  }\n\n  PersistentConnection.prototype.sendRequest = function (action, body, onResponse) {\n    var curReqNum = ++this.requestNumber_;\n    var msg = {\n      r: curReqNum,\n      a: action,\n      b: body\n    };\n    this.log_(util.stringify(msg));\n    util.assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\n    this.realtime_.sendRequest(msg);\n\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.listen = function (query, currentHashFn, tag, onComplete) {\n    var queryId = query.queryIdentifier();\n    var pathString = query.path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n\n    util.assert(query.getQueryParams().isDefault() || !query.getQueryParams().loadsAllData(), 'listen() called for non-default but complete query');\n    util.assert(!this.listens.get(pathString).has(queryId), 'listen() called twice for same path/queryId.');\n    var listenSpec = {\n      onComplete: onComplete,\n      hashFn: currentHashFn,\n      query: query,\n      tag: tag\n    };\n    this.listens.get(pathString).set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  };\n\n  PersistentConnection.prototype.sendListen_ = function (listenSpec) {\n    var _this = this;\n\n    var query = listenSpec.query;\n    var pathString = query.path.toString();\n    var queryId = query.queryIdentifier();\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    var req = {\n      /*path*/\n      p: pathString\n    };\n    var action = 'q'; // Only bother to send query if it's non-default.\n\n    if (listenSpec.tag) {\n      req['q'] = query.queryObject();\n      req['t'] = listenSpec.tag;\n    }\n\n    req[\n    /*hash*/\n    'h'] = listenSpec.hashFn();\n    this.sendRequest(action, req, function (message) {\n      var payload = message[\n      /*data*/\n      'd'];\n      var status = message[\n      /*status*/\n      's']; // print warnings in any case...\n\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      var currentListenSpec = _this.listens.get(pathString) && _this.listens.get(pathString).get(queryId); // only trigger actions if the listen hasn't been removed and readded\n\n\n      if (currentListenSpec === listenSpec) {\n        _this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          _this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  };\n\n  PersistentConnection.warnOnListenWarnings_ = function (payload, query) {\n    if (payload && typeof payload === 'object' && util.contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      var warnings = util.safeGet(payload, 'w');\n\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        var indexSpec = '\".indexOn\": \"' + query.getQueryParams().getIndex().toString() + '\"';\n        var indexPath = query.path.toString();\n        warn(\"Using an unspecified index. Your data will be downloaded and \" + (\"filtered on the client. Consider adding \" + indexSpec + \" at \") + (indexPath + \" to your security rules for better performance.\"));\n      }\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.refreshAuthToken = function (token) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, function () {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  };\n\n  PersistentConnection.prototype.reduceReconnectDelayIfAdminCredential_ = function (credential) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    var isFirebaseSecret = credential && credential.length === 40;\n\n    if (isFirebaseSecret || util.isAdmin(credential)) {\n      this.log_('Admin auth credential detected.  Reducing max reconnect time.');\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  };\n  /**\r\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n   * a auth revoked (the connection is closed).\r\n   */\n\n\n  PersistentConnection.prototype.tryAuth = function () {\n    var _this = this;\n\n    if (this.connected_ && this.authToken_) {\n      var token_1 = this.authToken_;\n      var authMethod = util.isValidFormat(token_1) ? 'auth' : 'gauth';\n      var requestData = {\n        cred: token_1\n      };\n\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n\n      this.sendRequest(authMethod, requestData, function (res) {\n        var status = res[\n        /*status*/\n        's'];\n        var data = res[\n        /*data*/\n        'd'] || 'error';\n\n        if (_this.authToken_ === token_1) {\n          if (status === 'ok') {\n            _this.invalidAuthTokenCount_ = 0;\n          } else {\n            // Triggers reconnect and force refresh for auth token\n            _this.onAuthRevoked_(status, data);\n          }\n        }\n      });\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.unlisten = function (query, tag) {\n    var pathString = query.path.toString();\n    var queryId = query.queryIdentifier();\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n    util.assert(query.getQueryParams().isDefault() || !query.getQueryParams().loadsAllData(), 'unlisten() called for non-default but complete query');\n    var listen = this.removeListen_(pathString, queryId);\n\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);\n    }\n  };\n\n  PersistentConnection.prototype.sendUnlisten_ = function (pathString, queryId, queryObj, tag) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n    var req = {\n      /*path*/\n      p: pathString\n    };\n    var action = 'n'; // Only bother sending queryId if it's non-default.\n\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.onDisconnectPut = function (pathString, data, onComplete) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString: pathString,\n        action: 'o',\n        data: data,\n        onComplete: onComplete\n      });\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.onDisconnectMerge = function (pathString, data, onComplete) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString: pathString,\n        action: 'om',\n        data: data,\n        onComplete: onComplete\n      });\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.onDisconnectCancel = function (pathString, onComplete) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString: pathString,\n        action: 'oc',\n        data: null,\n        onComplete: onComplete\n      });\n    }\n  };\n\n  PersistentConnection.prototype.sendOnDisconnect_ = function (action, pathString, data, onComplete) {\n    var request = {\n      /*path*/\n      p: pathString,\n\n      /*data*/\n      d: data\n    };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, function (response) {\n      if (onComplete) {\n        setTimeout(function () {\n          onComplete(response[\n          /*status*/\n          's'], response[\n          /* data */\n          'd']);\n        }, Math.floor(0));\n      }\n    });\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.merge = function (pathString, data, onComplete, hash) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  };\n\n  PersistentConnection.prototype.putInternal = function (action, pathString, data, onComplete, hash) {\n    var request = {\n      /*path*/\n      p: pathString,\n\n      /*data*/\n      d: data\n    };\n\n    if (hash !== undefined) {\n      request[\n      /*hash*/\n      'h'] = hash;\n    } // TODO: Only keep track of the most recent put for a given path?\n\n\n    this.outstandingPuts_.push({\n      action: action,\n      request: request,\n      onComplete: onComplete\n    });\n    this.outstandingPutCount_++;\n    var index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  };\n\n  PersistentConnection.prototype.sendPut_ = function (index) {\n    var _this = this;\n\n    var action = this.outstandingPuts_[index].action;\n    var request = this.outstandingPuts_[index].request;\n    var onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n    this.sendRequest(action, request, function (message) {\n      _this.log_(action + ' response', message);\n\n      delete _this.outstandingPuts_[index];\n      _this.outstandingPutCount_--; // Clean up array occasionally.\n\n      if (_this.outstandingPutCount_ === 0) {\n        _this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(message[\n        /*status*/\n        's'], message[\n        /* data */\n        'd']);\n      }\n    });\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.reportStats = function (stats) {\n    var _this = this; // If we're not connected, we just drop the stats.\n\n\n    if (this.connected_) {\n      var request = {\n        /*counters*/\n        c: stats\n      };\n      this.log_('reportStats', request);\n      this.sendRequest(\n      /*stats*/\n      's', request, function (result) {\n        var status = result[\n        /*status*/\n        's'];\n\n        if (status !== 'ok') {\n          var errorReason = result[\n          /* data */\n          'd'];\n\n          _this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  };\n\n  PersistentConnection.prototype.onDataMessage_ = function (message) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + util.stringify(message));\n      var reqNum = message['r'];\n      var onResponse = this.requestCBHash_[reqNum];\n\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[\n        /*body*/\n        'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'], message['b']);\n    }\n  };\n\n  PersistentConnection.prototype.onDataPush_ = function (action, body) {\n    this.log_('handleServerMessage', action, body);\n\n    if (action === 'd') {\n      this.onDataUpdate_(body[\n      /*path*/\n      'p'], body[\n      /*data*/\n      'd'],\n      /*isMerge*/\n      false, body['t']);\n    } else if (action === 'm') {\n      this.onDataUpdate_(body[\n      /*path*/\n      'p'], body[\n      /*data*/\n      'd'],\n      /*isMerge=*/\n      true, body['t']);\n    } else if (action === 'c') {\n      this.onListenRevoked_(body[\n      /*path*/\n      'p'], body[\n      /*query*/\n      'q']);\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(body[\n      /*status code*/\n      's'], body[\n      /* explanation */\n      'd']);\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error('Unrecognized action received from server: ' + util.stringify(action) + '\\nAre you using the latest client?');\n    }\n  };\n\n  PersistentConnection.prototype.onReady_ = function (timestamp, sessionId) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  };\n\n  PersistentConnection.prototype.scheduleConnect_ = function (timeout) {\n    var _this = this;\n\n    util.assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    } // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n\n    this.establishConnectionTimer_ = setTimeout(function () {\n      _this.establishConnectionTimer_ = null;\n\n      _this.establishConnection_(); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    }, Math.floor(timeout));\n  };\n\n  PersistentConnection.prototype.onVisible_ = function (visible) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (visible && !this.visible_ && this.reconnectDelay_ === this.maxReconnectDelay_) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n\n    this.visible_ = visible;\n  };\n\n  PersistentConnection.prototype.onOnline_ = function (online) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  };\n\n  PersistentConnection.prototype.onRealtimeDisconnect_ = function () {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null; // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n\n    this.cancelSentTransactions_(); // Clear out the pending requests.\n\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\n\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\n      var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\n      reconnectDelay = Math.random() * reconnectDelay;\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay); // Adjust reconnect delay for next time.\n\n      this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\n    }\n\n    this.onConnectStatus_(false);\n  };\n\n  PersistentConnection.prototype.establishConnection_ = function () {\n    var _this = this;\n\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      var onDataMessage_1 = this.onDataMessage_.bind(this);\n      var onReady_1 = this.onReady_.bind(this);\n      var onDisconnect_1 = this.onRealtimeDisconnect_.bind(this);\n      var connId_1 = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      var self_1 = this;\n      var lastSessionId_1 = this.lastSessionId;\n      var canceled_1 = false;\n      var connection_1 = null;\n\n      var closeFn_1 = function () {\n        if (connection_1) {\n          connection_1.close();\n        } else {\n          canceled_1 = true;\n          onDisconnect_1();\n        }\n      };\n\n      var sendRequestFn = function (msg) {\n        util.assert(connection_1, \"sendRequest call when we're not connected not allowed.\");\n        connection_1.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn_1,\n        sendRequest: sendRequestFn\n      };\n      var forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false; // First fetch auth token, and establish connection after fetching the token was successful\n\n      this.authTokenProvider_.getToken(forceRefresh).then(function (result) {\n        if (!canceled_1) {\n          log('getToken() completed. Creating connection.');\n          self_1.authToken_ = result && result.accessToken;\n          connection_1 = new Connection(connId_1, self_1.repoInfo_, self_1.applicationId_, onDataMessage_1, onReady_1, onDisconnect_1,\n          /* onKill= */\n          function (reason) {\n            warn(reason + ' (' + self_1.repoInfo_.toString() + ')');\n            self_1.interrupt(SERVER_KILL_INTERRUPT_REASON);\n          }, lastSessionId_1);\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      }).then(null, function (error) {\n        self_1.log_('Failed to get token: ' + error);\n\n        if (!canceled_1) {\n          if (_this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n\n          closeFn_1();\n        }\n      });\n    }\n  };\n\n  PersistentConnection.prototype.interrupt = function (reason) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  };\n\n  PersistentConnection.prototype.resume = function (reason) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n\n    if (util.isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  };\n\n  PersistentConnection.prototype.handleTimestamp_ = function (timestamp) {\n    var delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({\n      serverTimeOffset: delta\n    });\n  };\n\n  PersistentConnection.prototype.cancelSentTransactions_ = function () {\n    for (var i = 0; i < this.outstandingPuts_.length; i++) {\n      var put = this.outstandingPuts_[i];\n\n      if (put &&\n      /*hash*/\n      'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    } // Clean up array occasionally.\n\n\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  };\n\n  PersistentConnection.prototype.onListenRevoked_ = function (pathString, query) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    var queryId;\n\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(function (q) {\n        return ObjectToUniqueKey(q);\n      }).join('$');\n    }\n\n    var listen = this.removeListen_(pathString, queryId);\n\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  };\n\n  PersistentConnection.prototype.removeListen_ = function (pathString, queryId) {\n    var normalizedPathString = new Path(pathString).toString(); // normalize path.\n\n    var listen;\n\n    if (this.listens.has(normalizedPathString)) {\n      var map = this.listens.get(normalizedPathString);\n      listen = map.get(queryId);\n      map.delete(queryId);\n\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n\n    return listen;\n  };\n\n  PersistentConnection.prototype.onAuthRevoked_ = function (statusCode, explanation) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n\n      if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS; // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  };\n\n  PersistentConnection.prototype.onSecurityDebugPacket_ = function (body) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\n      }\n    }\n  };\n\n  PersistentConnection.prototype.restoreState_ = function () {\n    var e_1, _a, e_2, _b; //Re-authenticate ourselves if we have a credential stored.\n\n\n    this.tryAuth();\n\n    try {\n      // Puts depend on having received the corresponding data update from the server before they complete, so we must\n      // make sure to send listens before puts.\n      for (var _c = tslib.__values(this.listens.values()), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var queries = _d.value;\n\n        try {\n          for (var _e = (e_2 = void 0, tslib.__values(queries.values())), _f = _e.next(); !_f.done; _f = _e.next()) {\n            var listenSpec = _f.value;\n            this.sendListen_(listenSpec);\n          }\n        } catch (e_2_1) {\n          e_2 = {\n            error: e_2_1\n          };\n        } finally {\n          try {\n            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    for (var i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      var request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\n    }\n  };\n  /**\r\n   * Sends client stats for first connection\r\n   */\n\n\n  PersistentConnection.prototype.sendConnectStats_ = function () {\n    var stats = {};\n    var clientName = 'js';\n\n    if (util.isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (util.isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (util.isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n\n    this.reportStats(stats);\n  };\n\n  PersistentConnection.prototype.shouldReconnect_ = function () {\n    var online = OnlineMonitor.getInstance().currentlyOnline();\n    return util.isEmpty(this.interruptReasons_) && online;\n  };\n\n  PersistentConnection.nextPersistentConnectionId_ = 0;\n  /**\r\n   * Counter for number of connections created. Mainly used for tagging in the logs\r\n   */\n\n  PersistentConnection.nextConnectionId_ = 0;\n  return PersistentConnection;\n}(ServerActions);\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\n\n\nvar ReadonlyRestClient =\n/** @class */\nfunction (_super) {\n  tslib.__extends(ReadonlyRestClient, _super);\n  /**\r\n   * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\r\n   * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\r\n   * @param {AuthTokenProvider} authTokenProvider_\r\n   * @implements {ServerActions}\r\n   */\n\n\n  function ReadonlyRestClient(repoInfo_, onDataUpdate_, authTokenProvider_) {\n    var _this = _super.call(this) || this;\n\n    _this.repoInfo_ = repoInfo_;\n    _this.onDataUpdate_ = onDataUpdate_;\n    _this.authTokenProvider_ = authTokenProvider_;\n    /** @private {function(...[*])} */\n\n    _this.log_ = logWrapper('p:rest:');\n    /**\r\n     * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n     * that's been removed. :-/\r\n     *\r\n     * @private {!Object.<string, !Object>}\r\n     */\n\n    _this.listens_ = {};\n    return _this;\n  }\n\n  ReadonlyRestClient.prototype.reportStats = function (stats) {\n    throw new Error('Method not implemented.');\n  };\n  /**\r\n   * @param {!Query} query\r\n   * @param {?number=} tag\r\n   * @return {string}\r\n   * @private\r\n   */\n\n\n  ReadonlyRestClient.getListenId_ = function (query, tag) {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      util.assert(query.getQueryParams().isDefault(), \"should have a tag if it's not a default query.\");\n      return query.path.toString();\n    }\n  };\n  /** @inheritDoc */\n\n\n  ReadonlyRestClient.prototype.listen = function (query, currentHashFn, tag, onComplete) {\n    var _this = this;\n\n    var pathString = query.path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query.queryIdentifier()); // Mark this listener so we can tell if it's removed.\n\n    var listenId = ReadonlyRestClient.getListenId_(query, tag);\n    var thisListen = {};\n    this.listens_[listenId] = thisListen;\n    var queryStringParameters = query.getQueryParams().toRestQueryStringParameters();\n    this.restRequest_(pathString + '.json', queryStringParameters, function (error, result) {\n      var data = result;\n\n      if (error === 404) {\n        data = null;\n        error = null;\n      }\n\n      if (error === null) {\n        _this.onDataUpdate_(pathString, data,\n        /*isMerge=*/\n        false, tag);\n      }\n\n      if (util.safeGet(_this.listens_, listenId) === thisListen) {\n        var status_1;\n\n        if (!error) {\n          status_1 = 'ok';\n        } else if (error === 401) {\n          status_1 = 'permission_denied';\n        } else {\n          status_1 = 'rest_error:' + error;\n        }\n\n        onComplete(status_1, null);\n      }\n    });\n  };\n  /** @inheritDoc */\n\n\n  ReadonlyRestClient.prototype.unlisten = function (query, tag) {\n    var listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  };\n  /** @inheritDoc */\n\n\n  ReadonlyRestClient.prototype.refreshAuthToken = function (token) {// no-op since we just always call getToken.\n  };\n  /**\r\n   * Performs a REST request to the given path, with the provided query string parameters,\r\n   * and any auth credentials we have.\r\n   *\r\n   * @param {!string} pathString\r\n   * @param {!Object.<string, *>} queryStringParameters\r\n   * @param {?function(?number, *=)} callback\r\n   * @private\r\n   */\n\n\n  ReadonlyRestClient.prototype.restRequest_ = function (pathString, queryStringParameters, callback) {\n    var _this = this;\n\n    if (queryStringParameters === void 0) {\n      queryStringParameters = {};\n    }\n\n    queryStringParameters['format'] = 'export';\n    this.authTokenProvider_.getToken(\n    /*forceRefresh=*/\n    false).then(function (authTokenData) {\n      var authToken = authTokenData && authTokenData.accessToken;\n\n      if (authToken) {\n        queryStringParameters['auth'] = authToken;\n      }\n\n      var url = (_this.repoInfo_.secure ? 'https://' : 'http://') + _this.repoInfo_.host + pathString + '?' + 'ns=' + _this.repoInfo_.namespace + util.querystring(queryStringParameters);\n\n      _this.log_('Sending REST request for ' + url);\n\n      var xhr = new XMLHttpRequest();\n\n      xhr.onreadystatechange = function () {\n        if (callback && xhr.readyState === 4) {\n          _this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\n\n          var res = null;\n\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = util.jsonEval(xhr.responseText);\n            } catch (e) {\n              warn('Failed to parse JSON response for ' + url + ': ' + xhr.responseText);\n            }\n\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn('Got unsuccessful REST response for ' + url + ' Status: ' + xhr.status);\n            }\n\n            callback(xhr.status);\n          }\n\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url,\n      /*asynchronous=*/\n      true);\n      xhr.send();\n    });\n  };\n\n  return ReadonlyRestClient;\n}(ServerActions);\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar INTERRUPT_REASON = 'repo_interrupt';\n/**\r\n * A connection to a single data repository.\r\n */\n\nvar Repo =\n/** @class */\nfunction () {\n  function Repo(repoInfo_, forceRestClient, app, authTokenProvider) {\n    var _this = this;\n\n    this.repoInfo_ = repoInfo_;\n    this.app = app;\n    this.dataUpdateCount = 0;\n    this.statsListener_ = null;\n    this.eventQueue_ = new EventQueue();\n    this.nextWriteId_ = 1;\n    this.interceptServerDataCallback_ = null;\n    /** A list of data pieces and paths to be set when this client disconnects. */\n\n    this.onDisconnect_ = new SparseSnapshotTree(); // TODO: This should be @private but it's used by test_access.js and internal.js\n\n    this.persistentConnection_ = null;\n    this.stats_ = StatsManager.getCollection(repoInfo_);\n\n    if (forceRestClient || beingCrawled()) {\n      this.server_ = new ReadonlyRestClient(this.repoInfo_, this.onDataUpdate_.bind(this), authTokenProvider); // Minor hack: Fire onConnect immediately, since there's no actual connection.\n\n      setTimeout(this.onConnectStatus_.bind(this, true), 0);\n    } else {\n      var authOverride = app.options['databaseAuthVariableOverride']; // Validate authOverride\n\n      if (typeof authOverride !== 'undefined' && authOverride !== null) {\n        if (typeof authOverride !== 'object') {\n          throw new Error('Only objects are supported for option databaseAuthVariableOverride');\n        }\n\n        try {\n          util.stringify(authOverride);\n        } catch (e) {\n          throw new Error('Invalid authOverride provided: ' + e);\n        }\n      }\n\n      this.persistentConnection_ = new PersistentConnection(this.repoInfo_, app.options.appId, this.onDataUpdate_.bind(this), this.onConnectStatus_.bind(this), this.onServerInfoUpdate_.bind(this), authTokenProvider, authOverride);\n      this.server_ = this.persistentConnection_;\n    }\n\n    authTokenProvider.addTokenChangeListener(function (token) {\n      _this.server_.refreshAuthToken(token);\n    }); // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n\n    this.statsReporter_ = StatsManager.getOrCreateReporter(repoInfo_, function () {\n      return new StatsReporter(_this.stats_, _this.server_);\n    });\n    this.transactionsInit_(); // Used for .info.\n\n    this.infoData_ = new SnapshotHolder();\n    this.infoSyncTree_ = new SyncTree({\n      startListening: function (query, tag, currentHashFn, onComplete) {\n        var infoEvents = [];\n\n        var node = _this.infoData_.getNode(query.path); // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n        // on initial data...\n\n\n        if (!node.isEmpty()) {\n          infoEvents = _this.infoSyncTree_.applyServerOverwrite(query.path, node);\n          setTimeout(function () {\n            onComplete('ok');\n          }, 0);\n        }\n\n        return infoEvents;\n      },\n      stopListening: function () {}\n    });\n    this.updateInfo_('connected', false);\n    this.serverSyncTree_ = new SyncTree({\n      startListening: function (query, tag, currentHashFn, onComplete) {\n        _this.server_.listen(query, currentHashFn, tag, function (status, data) {\n          var events = onComplete(status, data);\n\n          _this.eventQueue_.raiseEventsForChangedPath(query.path, events);\n        }); // No synchronous events for network-backed sync trees\n\n\n        return [];\n      },\n      stopListening: function (query, tag) {\n        _this.server_.unlisten(query, tag);\n      }\n    });\n  }\n  /**\r\n   * @return The URL corresponding to the root of this Firebase.\r\n   */\n\n\n  Repo.prototype.toString = function () {\n    return (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host;\n  };\n  /**\r\n   * @return The namespace represented by the repo.\r\n   */\n\n\n  Repo.prototype.name = function () {\n    return this.repoInfo_.namespace;\n  };\n  /**\r\n   * @return The time in milliseconds, taking the server offset into account if we have one.\r\n   */\n\n\n  Repo.prototype.serverTime = function () {\n    var offsetNode = this.infoData_.getNode(new Path('.info/serverTimeOffset'));\n    var offset = offsetNode.val() || 0;\n    return new Date().getTime() + offset;\n  };\n  /**\r\n   * Generate ServerValues using some variables from the repo object.\r\n   */\n\n\n  Repo.prototype.generateServerValues = function () {\n    return generateWithValues({\n      timestamp: this.serverTime()\n    });\n  };\n  /**\r\n   * Called by realtime when we get new messages from the server.\r\n   */\n\n\n  Repo.prototype.onDataUpdate_ = function (pathString, data, isMerge, tag) {\n    // For testing.\n    this.dataUpdateCount++;\n    var path = new Path(pathString);\n    data = this.interceptServerDataCallback_ ? this.interceptServerDataCallback_(pathString, data) : data;\n    var events = [];\n\n    if (tag) {\n      if (isMerge) {\n        var taggedChildren = util.map(data, function (raw) {\n          return nodeFromJSON$1(raw);\n        });\n        events = this.serverSyncTree_.applyTaggedQueryMerge(path, taggedChildren, tag);\n      } else {\n        var taggedSnap = nodeFromJSON$1(data);\n        events = this.serverSyncTree_.applyTaggedQueryOverwrite(path, taggedSnap, tag);\n      }\n    } else if (isMerge) {\n      var changedChildren = util.map(data, function (raw) {\n        return nodeFromJSON$1(raw);\n      });\n      events = this.serverSyncTree_.applyServerMerge(path, changedChildren);\n    } else {\n      var snap = nodeFromJSON$1(data);\n      events = this.serverSyncTree_.applyServerOverwrite(path, snap);\n    }\n\n    var affectedPath = path;\n\n    if (events.length > 0) {\n      // Since we have a listener outstanding for each transaction, receiving any events\n      // is a proxy for some change having occurred.\n      affectedPath = this.rerunTransactions_(path);\n    }\n\n    this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);\n  }; // TODO: This should be @private but it's used by test_access.js and internal.js\n\n\n  Repo.prototype.interceptServerData_ = function (callback) {\n    this.interceptServerDataCallback_ = callback;\n  };\n\n  Repo.prototype.onConnectStatus_ = function (connectStatus) {\n    this.updateInfo_('connected', connectStatus);\n\n    if (connectStatus === false) {\n      this.runOnDisconnectEvents_();\n    }\n  };\n\n  Repo.prototype.onServerInfoUpdate_ = function (updates) {\n    var _this = this;\n\n    each(updates, function (key, value) {\n      _this.updateInfo_(key, value);\n    });\n  };\n\n  Repo.prototype.updateInfo_ = function (pathString, value) {\n    var path = new Path('/.info/' + pathString);\n    var newNode = nodeFromJSON$1(value);\n    this.infoData_.updateSnapshot(path, newNode);\n    var events = this.infoSyncTree_.applyServerOverwrite(path, newNode);\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n  };\n\n  Repo.prototype.getNextWriteId_ = function () {\n    return this.nextWriteId_++;\n  };\n\n  Repo.prototype.setWithPriority = function (path, newVal, newPriority, onComplete) {\n    var _this = this;\n\n    this.log_('set', {\n      path: path.toString(),\n      value: newVal,\n      priority: newPriority\n    }); // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n    // (b) store unresolved paths on JSON parse\n\n    var serverValues = this.generateServerValues();\n    var newNodeUnresolved = nodeFromJSON$1(newVal, newPriority);\n    var existing = this.serverSyncTree_.calcCompleteEventCache(path);\n    var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\n    var writeId = this.getNextWriteId_();\n    var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, writeId, true);\n    this.eventQueue_.queueEvents(events);\n    this.server_.put(path.toString(), newNodeUnresolved.val(\n    /*export=*/\n    true), function (status, errorReason) {\n      var success = status === 'ok';\n\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n\n      var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId, !success);\n\n      _this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);\n\n      _this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n    var affectedPath = this.abortTransactions_(path);\n    this.rerunTransactions_(affectedPath); // We queued the events above, so just flush the queue here\n\n    this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);\n  };\n\n  Repo.prototype.update = function (path, childrenToMerge, onComplete) {\n    var _this = this;\n\n    this.log_('update', {\n      path: path.toString(),\n      value: childrenToMerge\n    }); // Start with our existing data and merge each child into it.\n\n    var empty = true;\n    var serverValues = this.generateServerValues();\n    var changedChildren = {};\n    each(childrenToMerge, function (changedKey, changedValue) {\n      empty = false;\n      changedChildren[changedKey] = resolveDeferredValueTree(path.child(changedKey), nodeFromJSON$1(changedValue), _this.serverSyncTree_, serverValues);\n    });\n\n    if (!empty) {\n      var writeId_1 = this.getNextWriteId_();\n      var events = this.serverSyncTree_.applyUserMerge(path, changedChildren, writeId_1);\n      this.eventQueue_.queueEvents(events);\n      this.server_.merge(path.toString(), childrenToMerge, function (status, errorReason) {\n        var success = status === 'ok';\n\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n\n        var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId_1, !success);\n\n        var affectedPath = clearEvents.length > 0 ? _this.rerunTransactions_(path) : path;\n\n        _this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);\n\n        _this.callOnCompleteCallback(onComplete, status, errorReason);\n      });\n      each(childrenToMerge, function (changedPath) {\n        var affectedPath = _this.abortTransactions_(path.child(changedPath));\n\n        _this.rerunTransactions_(affectedPath);\n      }); // We queued the events above, so just flush the queue here\n\n      this.eventQueue_.raiseEventsForChangedPath(path, []);\n    } else {\n      log(\"update() called with empty data.  Don't do anything.\");\n      this.callOnCompleteCallback(onComplete, 'ok');\n    }\n  };\n  /**\r\n   * Applies all of the changes stored up in the onDisconnect_ tree.\r\n   */\n\n\n  Repo.prototype.runOnDisconnectEvents_ = function () {\n    var _this = this;\n\n    this.log_('onDisconnectEvents');\n    var serverValues = this.generateServerValues();\n    var resolvedOnDisconnectTree = new SparseSnapshotTree();\n    this.onDisconnect_.forEachTree(Path.Empty, function (path, node) {\n      var resolved = resolveDeferredValueTree(path, node, _this.serverSyncTree_, serverValues);\n      resolvedOnDisconnectTree.remember(path, resolved);\n    });\n    var events = [];\n    resolvedOnDisconnectTree.forEachTree(Path.Empty, function (path, snap) {\n      events = events.concat(_this.serverSyncTree_.applyServerOverwrite(path, snap));\n\n      var affectedPath = _this.abortTransactions_(path);\n\n      _this.rerunTransactions_(affectedPath);\n    });\n    this.onDisconnect_ = new SparseSnapshotTree();\n    this.eventQueue_.raiseEventsForChangedPath(Path.Empty, events);\n  };\n\n  Repo.prototype.onDisconnectCancel = function (path, onComplete) {\n    var _this = this;\n\n    this.server_.onDisconnectCancel(path.toString(), function (status, errorReason) {\n      if (status === 'ok') {\n        _this.onDisconnect_.forget(path);\n      }\n\n      _this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n  };\n\n  Repo.prototype.onDisconnectSet = function (path, value, onComplete) {\n    var _this = this;\n\n    var newNode = nodeFromJSON$1(value);\n    this.server_.onDisconnectPut(path.toString(), newNode.val(\n    /*export=*/\n    true), function (status, errorReason) {\n      if (status === 'ok') {\n        _this.onDisconnect_.remember(path, newNode);\n      }\n\n      _this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n  };\n\n  Repo.prototype.onDisconnectSetWithPriority = function (path, value, priority, onComplete) {\n    var _this = this;\n\n    var newNode = nodeFromJSON$1(value, priority);\n    this.server_.onDisconnectPut(path.toString(), newNode.val(\n    /*export=*/\n    true), function (status, errorReason) {\n      if (status === 'ok') {\n        _this.onDisconnect_.remember(path, newNode);\n      }\n\n      _this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n  };\n\n  Repo.prototype.onDisconnectUpdate = function (path, childrenToMerge, onComplete) {\n    var _this = this;\n\n    if (util.isEmpty(childrenToMerge)) {\n      log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n      this.callOnCompleteCallback(onComplete, 'ok');\n      return;\n    }\n\n    this.server_.onDisconnectMerge(path.toString(), childrenToMerge, function (status, errorReason) {\n      if (status === 'ok') {\n        each(childrenToMerge, function (childName, childNode) {\n          var newChildNode = nodeFromJSON$1(childNode);\n\n          _this.onDisconnect_.remember(path.child(childName), newChildNode);\n        });\n      }\n\n      _this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n  };\n\n  Repo.prototype.addEventCallbackForQuery = function (query, eventRegistration) {\n    var events;\n\n    if (query.path.getFront() === '.info') {\n      events = this.infoSyncTree_.addEventRegistration(query, eventRegistration);\n    } else {\n      events = this.serverSyncTree_.addEventRegistration(query, eventRegistration);\n    }\n\n    this.eventQueue_.raiseEventsAtPath(query.path, events);\n  };\n\n  Repo.prototype.removeEventCallbackForQuery = function (query, eventRegistration) {\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n    // a little bit by handling the return values anyways.\n    var events;\n\n    if (query.path.getFront() === '.info') {\n      events = this.infoSyncTree_.removeEventRegistration(query, eventRegistration);\n    } else {\n      events = this.serverSyncTree_.removeEventRegistration(query, eventRegistration);\n    }\n\n    this.eventQueue_.raiseEventsAtPath(query.path, events);\n  };\n\n  Repo.prototype.interrupt = function () {\n    if (this.persistentConnection_) {\n      this.persistentConnection_.interrupt(INTERRUPT_REASON);\n    }\n  };\n\n  Repo.prototype.resume = function () {\n    if (this.persistentConnection_) {\n      this.persistentConnection_.resume(INTERRUPT_REASON);\n    }\n  };\n\n  Repo.prototype.stats = function (showDelta) {\n    if (showDelta === void 0) {\n      showDelta = false;\n    }\n\n    if (typeof console === 'undefined') {\n      return;\n    }\n\n    var stats;\n\n    if (showDelta) {\n      if (!this.statsListener_) {\n        this.statsListener_ = new StatsListener(this.stats_);\n      }\n\n      stats = this.statsListener_.get();\n    } else {\n      stats = this.stats_.get();\n    }\n\n    var longestName = Object.keys(stats).reduce(function (previousValue, currentValue) {\n      return Math.max(currentValue.length, previousValue);\n    }, 0);\n    each(stats, function (stat, value) {\n      var paddedStat = stat; // pad stat names to be the same length (plus 2 extra spaces).\n\n      for (var i = stat.length; i < longestName + 2; i++) {\n        paddedStat += ' ';\n      }\n\n      console.log(paddedStat + value);\n    });\n  };\n\n  Repo.prototype.statsIncrementCounter = function (metric) {\n    this.stats_.incrementCounter(metric);\n    this.statsReporter_.includeStat(metric);\n  };\n\n  Repo.prototype.log_ = function () {\n    var varArgs = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      varArgs[_i] = arguments[_i];\n    }\n\n    var prefix = '';\n\n    if (this.persistentConnection_) {\n      prefix = this.persistentConnection_.id + ':';\n    }\n\n    log.apply(void 0, tslib.__spread([prefix], varArgs));\n  };\n\n  Repo.prototype.callOnCompleteCallback = function (callback, status, errorReason) {\n    if (callback) {\n      exceptionGuard(function () {\n        if (status === 'ok') {\n          callback(null);\n        } else {\n          var code = (status || 'error').toUpperCase();\n          var message = code;\n\n          if (errorReason) {\n            message += ': ' + errorReason;\n          }\n\n          var error = new Error(message); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n          error.code = code;\n          callback(error);\n        }\n      });\n    }\n  };\n\n  Object.defineProperty(Repo.prototype, \"database\", {\n    get: function () {\n      return this.__database || (this.__database = new Database(this));\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Repo;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n */\n\n\nvar RangedFilter =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!QueryParams} params\r\n   */\n  function RangedFilter(params) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n  /**\r\n   * @return {!NamedNode}\r\n   */\n\n\n  RangedFilter.prototype.getStartPost = function () {\n    return this.startPost_;\n  };\n  /**\r\n   * @return {!NamedNode}\r\n   */\n\n\n  RangedFilter.prototype.getEndPost = function () {\n    return this.endPost_;\n  };\n  /**\r\n   * @param {!NamedNode} node\r\n   * @return {boolean}\r\n   */\n\n\n  RangedFilter.prototype.matches = function (node) {\n    return this.index_.compare(this.getStartPost(), node) <= 0 && this.index_.compare(node, this.getEndPost()) <= 0;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  RangedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n\n    return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  RangedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n\n    var filtered = newSnap.withIndex(this.index_); // Don't support priorities on queries\n\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    var self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  RangedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\n    // Don't support priorities on queries\n    return oldSnap;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  RangedFilter.prototype.filtersNodes = function () {\n    return true;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  RangedFilter.prototype.getIndexedFilter = function () {\n    return this.indexedFilter_;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  RangedFilter.prototype.getIndex = function () {\n    return this.index_;\n  };\n  /**\r\n   * @param {!QueryParams} params\r\n   * @return {!NamedNode}\r\n   * @private\r\n   */\n\n\n  RangedFilter.getStartPost_ = function (params) {\n    if (params.hasStart()) {\n      var startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  };\n  /**\r\n   * @param {!QueryParams} params\r\n   * @return {!NamedNode}\r\n   * @private\r\n   */\n\n\n  RangedFilter.getEndPost_ = function (params) {\n    if (params.hasEnd()) {\n      var endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  };\n\n  return RangedFilter;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n */\n\n\nvar LimitedFilter =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!QueryParams} params\r\n   */\n  function LimitedFilter(params) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LimitedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_.getIndexedFilter().updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n    } else {\n      return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LimitedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\n    var filtered;\n\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (this.limit_ * 2 < newSnap.numChildren() && newSnap.isIndexed(this.index_)) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_); // anchor to the startPost, endPost, or last element as appropriate\n\n        var iterator = void 0;\n\n        if (this.reverse_) {\n          iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\n        } else {\n          iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\n        }\n\n        var count = 0;\n\n        while (iterator.hasNext() && count < this.limit_) {\n          var next = iterator.getNext();\n          var inRange = void 0;\n\n          if (this.reverse_) {\n            inRange = this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange = this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_); // Don't support priorities on queries\n\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n        var startPost = void 0;\n        var endPost = void 0;\n        var cmp = void 0;\n        var iterator = void 0;\n\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          var indexCompare_1 = this.index_.getCompare();\n\n          cmp = function (a, b) {\n            return indexCompare_1(b, a);\n          };\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        var count = 0;\n        var foundStartPost = false;\n\n        while (iterator.hasNext()) {\n          var next = iterator.getNext();\n\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n\n          var inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\n          }\n        }\n      }\n    }\n\n    return this.rangedFilter_.getIndexedFilter().updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LimitedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\n    // Don't support priorities on queries\n    return oldSnap;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LimitedFilter.prototype.filtersNodes = function () {\n    return true;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LimitedFilter.prototype.getIndexedFilter = function () {\n    return this.rangedFilter_.getIndexedFilter();\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LimitedFilter.prototype.getIndex = function () {\n    return this.index_;\n  };\n  /**\r\n   * @param {!Node} snap\r\n   * @param {string} childKey\r\n   * @param {!Node} childSnap\r\n   * @param {!CompleteChildSource} source\r\n   * @param {?ChildChangeAccumulator} changeAccumulator\r\n   * @return {!Node}\r\n   * @private\r\n   */\n\n\n  LimitedFilter.prototype.fullLimitUpdateChild_ = function (snap, childKey, childSnap, source, changeAccumulator) {\n    // TODO: rename all cache stuff etc to general snap terminology\n    var cmp;\n\n    if (this.reverse_) {\n      var indexCmp_1 = this.index_.getCompare();\n\n      cmp = function (a, b) {\n        return indexCmp_1(b, a);\n      };\n    } else {\n      cmp = this.index_.getCompare();\n    }\n\n    var oldEventCache = snap;\n    util.assert(oldEventCache.numChildren() === this.limit_, '');\n    var newChildNamedNode = new NamedNode(childKey, childSnap);\n    var windowBoundary = this.reverse_ ? oldEventCache.getFirstChild(this.index_) : oldEventCache.getLastChild(this.index_);\n    var inRange = this.rangedFilter_.matches(newChildNamedNode);\n\n    if (oldEventCache.hasChild(childKey)) {\n      var oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\n\n      while (nextChild != null && (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\n      }\n\n      var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\n\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(Change.childChangedChange(childKey, childSnap, oldChildSnap));\n        }\n\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(Change.childRemovedChange(childKey, oldChildSnap));\n        }\n\n        var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\n        var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\n\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(Change.childAddedChange(nextChild.name, nextChild.node));\n          }\n\n          return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(Change.childRemovedChange(windowBoundary.name, windowBoundary.node));\n          changeAccumulator.trackChildChange(Change.childAddedChange(childKey, childSnap));\n        }\n\n        return oldEventCache.updateImmediateChild(childKey, childSnap).updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  };\n\n  return LimitedFilter;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n * @constructor\r\n */\n\n\nvar QueryParams =\n/** @class */\nfunction () {\n  function QueryParams() {\n    this.limitSet_ = false;\n    this.startSet_ = false;\n    this.startNameSet_ = false;\n    this.endSet_ = false;\n    this.endNameSet_ = false;\n    this.limit_ = 0;\n    this.viewFrom_ = '';\n    this.indexStartValue_ = null;\n    this.indexStartName_ = '';\n    this.indexEndValue_ = null;\n    this.indexEndName_ = '';\n    this.index_ = PRIORITY_INDEX;\n  }\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  QueryParams.prototype.hasStart = function () {\n    return this.startSet_;\n  };\n  /**\r\n   * @return {boolean} True if it would return from left.\r\n   */\n\n\n  QueryParams.prototype.isViewFromLeft = function () {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\n    }\n  };\n  /**\r\n   * Only valid to call if hasStart() returns true\r\n   * @return {*}\r\n   */\n\n\n  QueryParams.prototype.getIndexStartValue = function () {\n    util.assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  };\n  /**\r\n   * Only valid to call if hasStart() returns true.\r\n   * Returns the starting key name for the range defined by these query parameters\r\n   * @return {!string}\r\n   */\n\n\n  QueryParams.prototype.getIndexStartName = function () {\n    util.assert(this.startSet_, 'Only valid if start has been set');\n\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  QueryParams.prototype.hasEnd = function () {\n    return this.endSet_;\n  };\n  /**\r\n   * Only valid to call if hasEnd() returns true.\r\n   * @return {*}\r\n   */\n\n\n  QueryParams.prototype.getIndexEndValue = function () {\n    util.assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  };\n  /**\r\n   * Only valid to call if hasEnd() returns true.\r\n   * Returns the end key name for the range defined by these query parameters\r\n   * @return {!string}\r\n   */\n\n\n  QueryParams.prototype.getIndexEndName = function () {\n    util.assert(this.endSet_, 'Only valid if end has been set');\n\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  QueryParams.prototype.hasLimit = function () {\n    return this.limitSet_;\n  };\n  /**\r\n   * @return {boolean} True if a limit has been set and it has been explicitly anchored\r\n   */\n\n\n  QueryParams.prototype.hasAnchoredLimit = function () {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  };\n  /**\r\n   * Only valid to call if hasLimit() returns true\r\n   * @return {!number}\r\n   */\n\n\n  QueryParams.prototype.getLimit = function () {\n    util.assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  };\n  /**\r\n   * @return {!Index}\r\n   */\n\n\n  QueryParams.prototype.getIndex = function () {\n    return this.index_;\n  };\n  /**\r\n   * @return {!QueryParams}\r\n   * @private\r\n   */\n\n\n  QueryParams.prototype.copy_ = function () {\n    var copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  };\n  /**\r\n   * @param {!number} newLimit\r\n   * @return {!QueryParams}\r\n   */\n\n\n  QueryParams.prototype.limit = function (newLimit) {\n    var newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = '';\n    return newParams;\n  };\n  /**\r\n   * @param {!number} newLimit\r\n   * @return {!QueryParams}\r\n   */\n\n\n  QueryParams.prototype.limitToFirst = function (newLimit) {\n    var newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\n    return newParams;\n  };\n  /**\r\n   * @param {!number} newLimit\r\n   * @return {!QueryParams}\r\n   */\n\n\n  QueryParams.prototype.limitToLast = function (newLimit) {\n    var newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;\n    return newParams;\n  };\n  /**\r\n   * @param {*} indexValue\r\n   * @param {?string=} key\r\n   * @return {!QueryParams}\r\n   */\n\n\n  QueryParams.prototype.startAt = function (indexValue, key) {\n    var newParams = this.copy_();\n    newParams.startSet_ = true;\n\n    if (indexValue === undefined) {\n      indexValue = null;\n    }\n\n    newParams.indexStartValue_ = indexValue;\n\n    if (key != null) {\n      newParams.startNameSet_ = true;\n      newParams.indexStartName_ = key;\n    } else {\n      newParams.startNameSet_ = false;\n      newParams.indexStartName_ = '';\n    }\n\n    return newParams;\n  };\n  /**\r\n   * @param {*} indexValue\r\n   * @param {?string=} key\r\n   * @return {!QueryParams}\r\n   */\n\n\n  QueryParams.prototype.endAt = function (indexValue, key) {\n    var newParams = this.copy_();\n    newParams.endSet_ = true;\n\n    if (indexValue === undefined) {\n      indexValue = null;\n    }\n\n    newParams.indexEndValue_ = indexValue;\n\n    if (key !== undefined) {\n      newParams.endNameSet_ = true;\n      newParams.indexEndName_ = key;\n    } else {\n      newParams.endNameSet_ = false;\n      newParams.indexEndName_ = '';\n    }\n\n    return newParams;\n  };\n  /**\r\n   * @param {!Index} index\r\n   * @return {!QueryParams}\r\n   */\n\n\n  QueryParams.prototype.orderBy = function (index) {\n    var newParams = this.copy_();\n    newParams.index_ = index;\n    return newParams;\n  };\n  /**\r\n   * @return {!Object}\r\n   */\n\n\n  QueryParams.prototype.getQueryObject = function () {\n    var WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;\n    var obj = {};\n\n    if (this.startSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;\n\n      if (this.startNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;\n      }\n    }\n\n    if (this.endSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;\n\n      if (this.endNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;\n      }\n    }\n\n    if (this.limitSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;\n      var viewFrom = this.viewFrom_;\n\n      if (viewFrom === '') {\n        if (this.isViewFromLeft()) {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n        } else {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n        }\n      }\n\n      obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n    } // For now, priority index is the default, so we only specify if it's some other index\n\n\n    if (this.index_ !== PRIORITY_INDEX) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();\n    }\n\n    return obj;\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  QueryParams.prototype.loadsAllData = function () {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  QueryParams.prototype.isDefault = function () {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  };\n  /**\r\n   * @return {!NodeFilter}\r\n   */\n\n\n  QueryParams.prototype.getNodeFilter = function () {\n    if (this.loadsAllData()) {\n      return new IndexedFilter(this.getIndex());\n    } else if (this.hasLimit()) {\n      return new LimitedFilter(this);\n    } else {\n      return new RangedFilter(this);\n    }\n  };\n  /**\r\n   * Returns a set of REST query string parameters representing this query.\r\n   *\r\n   * @return {!Object.<string,*>} query string parameters\r\n   */\n\n\n  QueryParams.prototype.toRestQueryStringParameters = function () {\n    var REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;\n    var qs = {};\n\n    if (this.isDefault()) {\n      return qs;\n    }\n\n    var orderBy;\n\n    if (this.index_ === PRIORITY_INDEX) {\n      orderBy = REST_CONSTANTS.PRIORITY_INDEX;\n    } else if (this.index_ === VALUE_INDEX) {\n      orderBy = REST_CONSTANTS.VALUE_INDEX;\n    } else if (this.index_ === KEY_INDEX) {\n      orderBy = REST_CONSTANTS.KEY_INDEX;\n    } else {\n      util.assert(this.index_ instanceof PathIndex, 'Unrecognized index type!');\n      orderBy = this.index_.toString();\n    }\n\n    qs[REST_CONSTANTS.ORDER_BY] = util.stringify(orderBy);\n\n    if (this.startSet_) {\n      qs[REST_CONSTANTS.START_AT] = util.stringify(this.indexStartValue_);\n\n      if (this.startNameSet_) {\n        qs[REST_CONSTANTS.START_AT] += ',' + util.stringify(this.indexStartName_);\n      }\n    }\n\n    if (this.endSet_) {\n      qs[REST_CONSTANTS.END_AT] = util.stringify(this.indexEndValue_);\n\n      if (this.endNameSet_) {\n        qs[REST_CONSTANTS.END_AT] += ',' + util.stringify(this.indexEndName_);\n      }\n    }\n\n    if (this.limitSet_) {\n      if (this.isViewFromLeft()) {\n        qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;\n      } else {\n        qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;\n      }\n    }\n\n    return qs;\n  };\n  /**\r\n   * Wire Protocol Constants\r\n   * @const\r\n   * @enum {string}\r\n   * @private\r\n   */\n\n\n  QueryParams.WIRE_PROTOCOL_CONSTANTS_ = {\n    INDEX_START_VALUE: 'sp',\n    INDEX_START_NAME: 'sn',\n    INDEX_END_VALUE: 'ep',\n    INDEX_END_NAME: 'en',\n    LIMIT: 'l',\n    VIEW_FROM: 'vf',\n    VIEW_FROM_LEFT: 'l',\n    VIEW_FROM_RIGHT: 'r',\n    INDEX: 'i'\n  };\n  /**\r\n   * REST Query Constants\r\n   * @const\r\n   * @enum {string}\r\n   * @private\r\n   */\n\n  QueryParams.REST_QUERY_CONSTANTS_ = {\n    ORDER_BY: 'orderBy',\n    PRIORITY_INDEX: '$priority',\n    VALUE_INDEX: '$value',\n    KEY_INDEX: '$key',\n    START_AT: 'startAt',\n    END_AT: 'endAt',\n    LIMIT_TO_FIRST: 'limitToFirst',\n    LIMIT_TO_LAST: 'limitToLast'\n  };\n  /**\r\n   * Default, empty query parameters\r\n   * @type {!QueryParams}\r\n   * @const\r\n   */\n\n  QueryParams.DEFAULT = new QueryParams();\n  return QueryParams;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar Reference =\n/** @class */\nfunction (_super) {\n  tslib.__extends(Reference, _super);\n  /**\r\n   * Call options:\r\n   *   new Reference(Repo, Path) or\r\n   *   new Reference(url: string, string|RepoManager)\r\n   *\r\n   * Externally - this is the firebase.database.Reference type.\r\n   *\r\n   * @param {!Repo} repo\r\n   * @param {(!Path)} path\r\n   * @extends {Query}\r\n   */\n\n\n  function Reference(repo, path) {\n    var _this = this;\n\n    if (!(repo instanceof Repo)) {\n      throw new Error('new Reference() no longer supported - use app.database().');\n    } // call Query's constructor, passing in the repo and path.\n\n\n    _this = _super.call(this, repo, path, QueryParams.DEFAULT, false) || this;\n    return _this;\n  }\n  /** @return {?string} */\n\n\n  Reference.prototype.getKey = function () {\n    util.validateArgCount('Reference.key', 0, 0, arguments.length);\n\n    if (this.path.isEmpty()) {\n      return null;\n    } else {\n      return this.path.getBack();\n    }\n  };\n  /**\r\n   * @param {!(string|Path)} pathString\r\n   * @return {!Reference}\r\n   */\n\n\n  Reference.prototype.child = function (pathString) {\n    util.validateArgCount('Reference.child', 1, 1, arguments.length);\n\n    if (typeof pathString === 'number') {\n      pathString = String(pathString);\n    } else if (!(pathString instanceof Path)) {\n      if (this.path.getFront() === null) {\n        validateRootPathString('Reference.child', 1, pathString, false);\n      } else {\n        validatePathString('Reference.child', 1, pathString, false);\n      }\n    }\n\n    return new Reference(this.repo, this.path.child(pathString));\n  };\n  /** @return {?Reference} */\n\n\n  Reference.prototype.getParent = function () {\n    util.validateArgCount('Reference.parent', 0, 0, arguments.length);\n    var parentPath = this.path.parent();\n    return parentPath === null ? null : new Reference(this.repo, parentPath);\n  };\n  /** @return {!Reference} */\n\n\n  Reference.prototype.getRoot = function () {\n    util.validateArgCount('Reference.root', 0, 0, arguments.length);\n    var ref = this;\n\n    while (ref.getParent() !== null) {\n      ref = ref.getParent();\n    }\n\n    return ref;\n  };\n  /** @return {!Database} */\n\n\n  Reference.prototype.databaseProp = function () {\n    return this.repo.database;\n  };\n  /**\r\n   * @param {*} newVal\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!Promise}\r\n   */\n\n\n  Reference.prototype.set = function (newVal, onComplete) {\n    util.validateArgCount('Reference.set', 1, 2, arguments.length);\n    validateWritablePath('Reference.set', this.path);\n    validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);\n    util.validateCallback('Reference.set', 2, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo.setWithPriority(this.path, newVal,\n    /*priority=*/\n    null, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {!Object} objectToMerge\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!Promise}\r\n   */\n\n\n  Reference.prototype.update = function (objectToMerge, onComplete) {\n    util.validateArgCount('Reference.update', 1, 2, arguments.length);\n    validateWritablePath('Reference.update', this.path);\n\n    if (Array.isArray(objectToMerge)) {\n      var newObjectToMerge = {};\n\n      for (var i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n\n      objectToMerge = newObjectToMerge;\n      warn('Passing an Array to Firebase.update() is deprecated. ' + 'Use set() if you want to overwrite the existing data, or ' + 'an Object with integer keys if you really do want to ' + 'only update some of the children.');\n    }\n\n    validateFirebaseMergeDataArg('Reference.update', 1, objectToMerge, this.path, false);\n    util.validateCallback('Reference.update', 2, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo.update(this.path, objectToMerge, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {*} newVal\r\n   * @param {string|number|null} newPriority\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!Promise}\r\n   */\n\n\n  Reference.prototype.setWithPriority = function (newVal, newPriority, onComplete) {\n    util.validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('Reference.setWithPriority', this.path);\n    validateFirebaseDataArg('Reference.setWithPriority', 1, newVal, this.path, false);\n    validatePriority('Reference.setWithPriority', 2, newPriority, false);\n    util.validateCallback('Reference.setWithPriority', 3, onComplete, true);\n\n    if (this.getKey() === '.length' || this.getKey() === '.keys') {\n      throw 'Reference.setWithPriority failed: ' + this.getKey() + ' is a read-only object.';\n    }\n\n    var deferred = new util.Deferred();\n    this.repo.setWithPriority(this.path, newVal, newPriority, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!Promise}\r\n   */\n\n\n  Reference.prototype.remove = function (onComplete) {\n    util.validateArgCount('Reference.remove', 0, 1, arguments.length);\n    validateWritablePath('Reference.remove', this.path);\n    util.validateCallback('Reference.remove', 1, onComplete, true);\n    return this.set(null, onComplete);\n  };\n  /**\r\n   * @param {function(*):*} transactionUpdate\r\n   * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete\r\n   * @param {boolean=} applyLocally\r\n   * @return {!Promise}\r\n   */\n\n\n  Reference.prototype.transaction = function (transactionUpdate, onComplete, applyLocally) {\n    util.validateArgCount('Reference.transaction', 1, 3, arguments.length);\n    validateWritablePath('Reference.transaction', this.path);\n    util.validateCallback('Reference.transaction', 1, transactionUpdate, false);\n    util.validateCallback('Reference.transaction', 2, onComplete, true); // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how\n    // to expose it.\n\n    validateBoolean('Reference.transaction', 3, applyLocally, true);\n\n    if (this.getKey() === '.length' || this.getKey() === '.keys') {\n      throw 'Reference.transaction failed: ' + this.getKey() + ' is a read-only object.';\n    }\n\n    if (applyLocally === undefined) {\n      applyLocally = true;\n    }\n\n    var deferred = new util.Deferred();\n\n    if (typeof onComplete === 'function') {\n      deferred.promise.catch(function () {});\n    }\n\n    var promiseComplete = function (error, committed, snapshot) {\n      if (error) {\n        deferred.reject(error);\n      } else {\n        deferred.resolve(new TransactionResult(committed, snapshot));\n      }\n\n      if (typeof onComplete === 'function') {\n        onComplete(error, committed, snapshot);\n      }\n    };\n\n    this.repo.startTransaction(this.path, transactionUpdate, promiseComplete, applyLocally);\n    return deferred.promise;\n  };\n  /**\r\n   * @param {string|number|null} priority\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!Promise}\r\n   */\n\n\n  Reference.prototype.setPriority = function (priority, onComplete) {\n    util.validateArgCount('Reference.setPriority', 1, 2, arguments.length);\n    validateWritablePath('Reference.setPriority', this.path);\n    validatePriority('Reference.setPriority', 1, priority, false);\n    util.validateCallback('Reference.setPriority', 2, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo.setWithPriority(this.path.child('.priority'), priority, null, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {*=} value\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!Reference}\r\n   */\n\n\n  Reference.prototype.push = function (value, onComplete) {\n    util.validateArgCount('Reference.push', 0, 2, arguments.length);\n    validateWritablePath('Reference.push', this.path);\n    validateFirebaseDataArg('Reference.push', 1, value, this.path, true);\n    util.validateCallback('Reference.push', 2, onComplete, true);\n    var now = this.repo.serverTime();\n    var name = nextPushId(now); // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.\n    // We use child() to create handles to two different references. The first is turned into a\n    // ThennableReference below by adding then() and catch() methods and is used as the\n    // return value of push(). The second remains a regular Reference and is used as the fulfilled\n    // value of the first ThennableReference.\n\n    var thennablePushRef = this.child(name);\n    var pushRef = this.child(name);\n    var promise;\n\n    if (value != null) {\n      promise = thennablePushRef.set(value, onComplete).then(function () {\n        return pushRef;\n      });\n    } else {\n      promise = Promise.resolve(pushRef);\n    }\n\n    thennablePushRef.then = promise.then.bind(promise);\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\n\n    if (typeof onComplete === 'function') {\n      promise.catch(function () {});\n    }\n\n    return thennablePushRef;\n  };\n  /**\r\n   * @return {!OnDisconnect}\r\n   */\n\n\n  Reference.prototype.onDisconnect = function () {\n    validateWritablePath('Reference.onDisconnect', this.path);\n    return new OnDisconnect(this.repo, this.path);\n  };\n\n  Object.defineProperty(Reference.prototype, \"database\", {\n    get: function () {\n      return this.databaseProp();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"key\", {\n    get: function () {\n      return this.getKey();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"parent\", {\n    get: function () {\n      return this.getParent();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"root\", {\n    get: function () {\n      return this.getRoot();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Reference;\n}(Query);\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\n\n\nQuery.__referenceConstructor = Reference;\nSyncPoint.__referenceConstructor = Reference;\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Node in a Tree.\r\n */\n\nvar TreeNode =\n/** @class */\nfunction () {\n  function TreeNode() {\n    // TODO: Consider making accessors that create children and value lazily or\n    // separate Internal / Leaf 'types'.\n    this.children = {};\n    this.childCount = 0;\n    this.value = null;\n  }\n\n  return TreeNode;\n}();\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\n\n\nvar Tree =\n/** @class */\nfunction () {\n  /**\r\n   * @template T\r\n   * @param {string=} name_ Optional name of the node.\r\n   * @param {Tree=} parent_ Optional parent node.\r\n   * @param {TreeNode=} node_ Optional node to wrap.\r\n   */\n  function Tree(name_, parent_, node_) {\n    if (name_ === void 0) {\n      name_ = '';\n    }\n\n    if (parent_ === void 0) {\n      parent_ = null;\n    }\n\n    if (node_ === void 0) {\n      node_ = new TreeNode();\n    }\n\n    this.name_ = name_;\n    this.parent_ = parent_;\n    this.node_ = node_;\n  }\n  /**\r\n   * Returns a sub-Tree for the given path.\r\n   *\r\n   * @param {!(string|Path)} pathObj Path to look up.\r\n   * @return {!Tree.<T>} Tree for path.\r\n   */\n\n\n  Tree.prototype.subTree = function (pathObj) {\n    // TODO: Require pathObj to be Path?\n    var path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n    var child = this,\n        next = path.getFront();\n\n    while (next !== null) {\n      var childNode = util.safeGet(child.node_.children, next) || new TreeNode();\n      child = new Tree(next, child, childNode);\n      path = path.popFront();\n      next = path.getFront();\n    }\n\n    return child;\n  };\n  /**\r\n   * Returns the data associated with this tree node.\r\n   *\r\n   * @return {?T} The data or null if no data exists.\r\n   */\n\n\n  Tree.prototype.getValue = function () {\n    return this.node_.value;\n  };\n  /**\r\n   * Sets data to this tree node.\r\n   *\r\n   * @param {!T} value Value to set.\r\n   */\n\n\n  Tree.prototype.setValue = function (value) {\n    util.assert(typeof value !== 'undefined', 'Cannot set value to undefined');\n    this.node_.value = value;\n    this.updateParents_();\n  };\n  /**\r\n   * Clears the contents of the tree node (its value and all children).\r\n   */\n\n\n  Tree.prototype.clear = function () {\n    this.node_.value = null;\n    this.node_.children = {};\n    this.node_.childCount = 0;\n    this.updateParents_();\n  };\n  /**\r\n   * @return {boolean} Whether the tree has any children.\r\n   */\n\n\n  Tree.prototype.hasChildren = function () {\n    return this.node_.childCount > 0;\n  };\n  /**\r\n   * @return {boolean} Whether the tree is empty (no value or children).\r\n   */\n\n\n  Tree.prototype.isEmpty = function () {\n    return this.getValue() === null && !this.hasChildren();\n  };\n  /**\r\n   * Calls action for each child of this tree node.\r\n   *\r\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n   */\n\n\n  Tree.prototype.forEachChild = function (action) {\n    var _this = this;\n\n    each(this.node_.children, function (child, childTree) {\n      action(new Tree(child, _this, childTree));\n    });\n  };\n  /**\r\n   * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n   *\r\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n   * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to\r\n   *   false.\r\n   * @param {boolean=} childrenFirst Whether to call action on children before calling it on\r\n   *   parent.\r\n   */\n\n\n  Tree.prototype.forEachDescendant = function (action, includeSelf, childrenFirst) {\n    if (includeSelf && !childrenFirst) {\n      action(this);\n    }\n\n    this.forEachChild(function (child) {\n      child.forEachDescendant(action,\n      /*includeSelf=*/\n      true, childrenFirst);\n    });\n\n    if (includeSelf && childrenFirst) {\n      action(this);\n    }\n  };\n  /**\r\n   * Calls action on each ancestor node.\r\n   *\r\n   * @param {function(!Tree.<T>)} action Action to be called on each parent; return\r\n   *   true to abort.\r\n   * @param {boolean=} includeSelf Whether to call action on this node as well.\r\n   * @return {boolean} true if the action callback returned true.\r\n   */\n\n\n  Tree.prototype.forEachAncestor = function (action, includeSelf) {\n    var node = includeSelf ? this : this.parent();\n\n    while (node !== null) {\n      if (action(node)) {\n        return true;\n      }\n\n      node = node.parent();\n    }\n\n    return false;\n  };\n  /**\r\n   * Does a depth-first traversal of this node's descendants.  When a descendant with a value\r\n   * is found, action is called on it and traversal does not continue inside the node.\r\n   * Action is *not* called on this node.\r\n   *\r\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n   */\n\n\n  Tree.prototype.forEachImmediateDescendantWithValue = function (action) {\n    this.forEachChild(function (child) {\n      if (child.getValue() !== null) {\n        action(child);\n      } else {\n        child.forEachImmediateDescendantWithValue(action);\n      }\n    });\n  };\n  /**\r\n   * @return {!Path} The path of this tree node, as a Path.\r\n   */\n\n\n  Tree.prototype.path = function () {\n    return new Path(this.parent_ === null ? this.name_ : this.parent_.path() + '/' + this.name_);\n  };\n  /**\r\n   * @return {string} The name of the tree node.\r\n   */\n\n\n  Tree.prototype.name = function () {\n    return this.name_;\n  };\n  /**\r\n   * @return {?Tree} The parent tree node, or null if this is the root of the tree.\r\n   */\n\n\n  Tree.prototype.parent = function () {\n    return this.parent_;\n  };\n  /**\r\n   * Adds or removes this child from its parent based on whether it's empty or not.\r\n   *\r\n   * @private\r\n   */\n\n\n  Tree.prototype.updateParents_ = function () {\n    if (this.parent_ !== null) {\n      this.parent_.updateChild_(this.name_, this);\n    }\n  };\n  /**\r\n   * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n   *\r\n   * @param {string} childName The name of the child to update.\r\n   * @param {!Tree.<T>} child The child to update.\r\n   * @private\r\n   */\n\n\n  Tree.prototype.updateChild_ = function (childName, child) {\n    var childEmpty = child.isEmpty();\n    var childExists = util.contains(this.node_.children, childName);\n\n    if (childEmpty && childExists) {\n      delete this.node_.children[childName];\n      this.node_.childCount--;\n      this.updateParents_();\n    } else if (!childEmpty && !childExists) {\n      this.node_.children[childName] = child.node_;\n      this.node_.childCount++;\n      this.updateParents_();\n    }\n  };\n\n  return Tree;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific\n// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well\n// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.\n// For now it's part of Repo, but in its own file.\n\n/**\r\n * @enum {number}\r\n */\n\n\nvar TransactionStatus;\n\n(function (TransactionStatus) {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  TransactionStatus[TransactionStatus[\"RUN\"] = 0] = \"RUN\"; // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n\n  TransactionStatus[TransactionStatus[\"SENT\"] = 1] = \"SENT\"; // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n\n  TransactionStatus[TransactionStatus[\"COMPLETED\"] = 2] = \"COMPLETED\"; // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n\n  TransactionStatus[TransactionStatus[\"SENT_NEEDS_ABORT\"] = 3] = \"SENT_NEEDS_ABORT\"; // Temporary state used to mark transactions that need to be aborted.\n\n  TransactionStatus[TransactionStatus[\"NEEDS_ABORT\"] = 4] = \"NEEDS_ABORT\";\n})(TransactionStatus || (TransactionStatus = {}));\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's\r\n * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.\r\n * @type {number}\r\n * @const\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nRepo.MAX_TRANSACTION_RETRIES_ = 25;\n/**\r\n * Setup the transaction data structures\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nRepo.prototype.transactionsInit_ = function () {\n  /**\r\n   * Stores queues of outstanding transactions for Firebase locations.\r\n   *\r\n   * @type {!Tree.<Array.<!Transaction>>}\r\n   * @private\r\n   */\n  this.transactionQueueTree_ = new Tree();\n};\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.\r\n *\r\n * @param {!Path} path Path at which to do transaction.\r\n * @param {function(*):*} transactionUpdate Update callback.\r\n * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.\r\n * @param {boolean} applyLocally Whether or not to make intermediate results visible\r\n */\n\n\nRepo.prototype.startTransaction = function (path, transactionUpdate, onComplete, applyLocally) {\n  this.log_('transaction on ' + path); // Add a watch to make sure we get server updates.\n\n  var valueCallback = function () {};\n\n  var watchRef = new Reference(this, path);\n  watchRef.on('value', valueCallback);\n\n  var unwatcher = function () {\n    watchRef.off('value', valueCallback);\n  }; // Initialize transaction.\n\n\n  var transaction = {\n    path: path,\n    update: transactionUpdate,\n    onComplete: onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally: applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher: unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  }; // Run transaction initially.\n\n  var currentState = this.getLatestState_(path);\n  transaction.currentInputSnapshot = currentState;\n  var newVal = transaction.update(currentState.val());\n\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n\n    if (transaction.onComplete) {\n      // We just set the input snapshot, so this cast should be safe\n      var snapshot = new DataSnapshot(transaction.currentInputSnapshot, new Reference(this, transaction.path), PRIORITY_INDEX);\n      transaction.onComplete(null, false, snapshot);\n    }\n  } else {\n    validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path); // Mark as run and add to our queue.\n\n    transaction.status = TransactionStatus.RUN;\n    var queueNode = this.transactionQueueTree_.subTree(path);\n    var nodeQueue = queueNode.getValue() || [];\n    nodeQueue.push(transaction);\n    queueNode.setValue(nodeQueue); // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our transaction state, since the user could\n    // start new transactions from the event callbacks.\n\n    var priorityForNode = void 0;\n\n    if (typeof newVal === 'object' && newVal !== null && util.contains(newVal, '.priority')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = util.safeGet(newVal, '.priority');\n      util.assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' + 'Priority must be a valid string, finite number, server value, or null.');\n    } else {\n      var currentNode = this.serverSyncTree_.calcCompleteEventCache(path) || ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    priorityForNode\n    /** @type {null|number|string} */\n    = priorityForNode;\n    var serverValues = this.generateServerValues();\n    var newNodeUnresolved = nodeFromJSON$1(newVal, priorityForNode);\n    var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = this.getNextWriteId_();\n    var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, transaction.currentWriteId, transaction.applyLocally);\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n    this.sendReadyTransactions_();\n  }\n};\n/**\r\n * @param {!Path} path\r\n * @param {Array.<number>=} excludeSets A specific set to exclude\r\n * @return {Node}\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nRepo.prototype.getLatestState_ = function (path, excludeSets) {\n  return this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) || ChildrenNode.EMPTY_NODE;\n};\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding transactions to\r\n * complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively with a particular\r\n * transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nRepo.prototype.sendReadyTransactions_ = function (node) {\n  var _this = this;\n\n  if (node === void 0) {\n    node = this.transactionQueueTree_;\n  } // Before recursing, make sure any completed transactions are removed.\n\n\n  if (!node) {\n    this.pruneCompletedTransactionsBelowNode_(node);\n  }\n\n  if (node.getValue() !== null) {\n    var queue = this.buildTransactionQueue_(node);\n    util.assert(queue.length > 0, 'Sending zero length transaction queue');\n    var allRun = queue.every(function (transaction) {\n      return transaction.status === TransactionStatus.RUN;\n    }); // If they're all run (and not sent), we can send them.  Else, we must wait.\n\n    if (allRun) {\n      this.sendTransactionQueue_(node.path(), queue);\n    }\n  } else if (node.hasChildren()) {\n    node.forEachChild(function (childNode) {\n      _this.sendReadyTransactions_(childNode);\n    });\n  }\n};\n/**\r\n * Given a list of run transactions, send them to the server and then handle the result (success or failure).\r\n *\r\n * @param {!Path} path The location of the queue.\r\n * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nRepo.prototype.sendTransactionQueue_ = function (path, queue) {\n  var _this = this; // Mark transactions as sent and increment retry count!\n\n\n  var setsToIgnore = queue.map(function (txn) {\n    return txn.currentWriteId;\n  });\n  var latestState = this.getLatestState_(path, setsToIgnore);\n  var snapToSend = latestState;\n  var latestHash = latestState.hash();\n\n  for (var i = 0; i < queue.length; i++) {\n    var txn = queue[i];\n    util.assert(txn.status === TransactionStatus.RUN, 'tryToSendTransactionQueue_: items in queue should all be run.');\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    var relativePath = Path.relativePath(path, txn.path); // If we've gotten to this point, the output snapshot must be defined.\n\n    snapToSend = snapToSend.updateChild(relativePath\n    /** @type {!Node} */\n    , txn.currentOutputSnapshotRaw);\n  }\n\n  var dataToSend = snapToSend.val(true);\n  var pathToSend = path; // Send the put.\n\n  this.server_.put(pathToSend.toString(), dataToSend, function (status) {\n    _this.log_('transaction put response', {\n      path: pathToSend.toString(),\n      status: status\n    });\n\n    var events = [];\n\n    if (status === 'ok') {\n      // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n      // the callback could trigger more transactions or sets.\n      var callbacks = [];\n\n      for (var i = 0; i < queue.length; i++) {\n        queue[i].status = TransactionStatus.COMPLETED;\n        events = events.concat(_this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId));\n\n        if (queue[i].onComplete) {\n          // We never unset the output snapshot, and given that this transaction is complete, it should be set\n          var node = queue[i].currentOutputSnapshotResolved;\n          var ref = new Reference(_this, queue[i].path);\n          var snapshot = new DataSnapshot(node, ref, PRIORITY_INDEX);\n          callbacks.push(queue[i].onComplete.bind(null, null, true, snapshot));\n        }\n\n        queue[i].unwatcher();\n      } // Now remove the completed transactions.\n\n\n      _this.pruneCompletedTransactionsBelowNode_(_this.transactionQueueTree_.subTree(path)); // There may be pending transactions that we can now send.\n\n\n      _this.sendReadyTransactions_();\n\n      _this.eventQueue_.raiseEventsForChangedPath(path, events); // Finally, trigger onComplete callbacks.\n\n\n      for (var i = 0; i < callbacks.length; i++) {\n        exceptionGuard(callbacks[i]);\n      }\n    } else {\n      // transactions are no longer sent.  Update their status appropriately.\n      if (status === 'datastale') {\n        for (var i = 0; i < queue.length; i++) {\n          if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n          } else {\n            queue[i].status = TransactionStatus.RUN;\n          }\n        }\n      } else {\n        warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\n\n        for (var i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.NEEDS_ABORT;\n          queue[i].abortReason = status;\n        }\n      }\n\n      _this.rerunTransactions_(path);\n    }\n  }, latestHash);\n};\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to\r\n * be raised for.\r\n *\r\n * @param {!Path} changedPath The path in mergedData that changed.\r\n * @return {!Path} The rootmost path that was affected by rerunning transactions.\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nRepo.prototype.rerunTransactions_ = function (changedPath) {\n  var rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);\n  var path = rootMostTransactionNode.path();\n  var queue = this.buildTransactionQueue_(rootMostTransactionNode);\n  this.rerunTransactionQueue_(queue, path);\n  return path;\n};\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).\r\n *\r\n * @param {Array.<Transaction>} queue The queue of transactions to run.\r\n * @param {!Path} path The path the queue is for.\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nRepo.prototype.rerunTransactionQueue_ = function (queue, path) {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  } // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n  // the callback could trigger more transactions or sets.\n\n\n  var callbacks = [];\n  var events = []; // Ignore all of the sets we're going to re-run.\n\n  var txnsToRerun = queue.filter(function (q) {\n    return q.status === TransactionStatus.RUN;\n  });\n  var setsToIgnore = txnsToRerun.map(function (q) {\n    return q.currentWriteId;\n  });\n\n  for (var i = 0; i < queue.length; i++) {\n    var transaction = queue[i];\n    var relativePath = Path.relativePath(path, transaction.path);\n    var abortTransaction = false,\n        abortReason = void 0;\n    util.assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\n    } else if (transaction.status === TransactionStatus.RUN) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      if (transaction.retryCount >= Repo.MAX_TRANSACTION_RETRIES_) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\n      } else {\n        // This code reruns a transaction\n        var currentNode = this.getLatestState_(transaction.path, setsToIgnore);\n        transaction.currentInputSnapshot = currentNode;\n        var newData = queue[i].update(currentNode.val());\n\n        if (newData !== undefined) {\n          validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\n          var newDataNode = nodeFromJSON$1(newData);\n          var hasExplicitPriority = typeof newData === 'object' && newData != null && util.contains(newData, '.priority');\n\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          var oldWriteId = transaction.currentWriteId;\n          var serverValues = this.generateServerValues();\n          var newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = this.getNextWriteId_(); // Mutates setsToIgnore in place\n\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(this.serverSyncTree_.applyUserOverwrite(transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\n          events = events.concat(this.serverSyncTree_.ackUserWrite(oldWriteId, true));\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\n        }\n      }\n    }\n\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n    events = [];\n\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED; // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).\n      // So defer the unwatcher until we're done.\n\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          var ref = new Reference(this, queue[i].path); // We set this field immediately, so it's safe to cast to an actual snapshot\n\n          var lastInput\n          /** @type {!Node} */\n          = queue[i].currentInputSnapshot;\n          var snapshot = new DataSnapshot(lastInput, ref, PRIORITY_INDEX);\n          callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));\n        } else {\n          callbacks.push(queue[i].onComplete.bind(null, new Error(abortReason), false, null));\n        }\n      }\n    }\n  } // Clean up completed transactions.\n\n\n  this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_); // Now fire callbacks, now that we're in a good, known state.\n\n  for (var i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  } // Try to send the transaction result to the server.\n\n\n  this.sendReadyTransactions_();\n};\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns\r\n * the node for the given path if there are no pending transactions on any ancestor.\r\n *\r\n * @param {!Path} path The location to start at.\r\n * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nRepo.prototype.getAncestorTransactionNode_ = function (path) {\n  var front; // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.\n\n  var transactionNode = this.transactionQueueTree_;\n  front = path.getFront();\n\n  while (front !== null && transactionNode.getValue() === null) {\n    transactionNode = transactionNode.subTree(front);\n    path = path.popFront();\n    front = path.getFront();\n  }\n\n  return transactionNode;\n};\n/**\r\n * Builds the queue of all transactions at or below the specified transactionNode.\r\n *\r\n * @param {!Tree.<Array.<Transaction>>} transactionNode\r\n * @return {Array.<Transaction>} The generated queue.\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nRepo.prototype.buildTransactionQueue_ = function (transactionNode) {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  var transactionQueue = [];\n  this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue); // Sort them by the order the transactions were created.\n\n  transactionQueue.sort(function (a, b) {\n    return a.order - b.order;\n  });\n  return transactionQueue;\n};\n/**\r\n * @param {!Tree.<Array.<Transaction>>} node\r\n * @param {Array.<Transaction>} queue\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nRepo.prototype.aggregateTransactionQueuesForNode_ = function (node, queue) {\n  var _this = this;\n\n  var nodeQueue = node.getValue();\n\n  if (nodeQueue !== null) {\n    for (var i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  node.forEachChild(function (child) {\n    _this.aggregateTransactionQueuesForNode_(child, queue);\n  });\n};\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n *\r\n * @param {!Tree.<Array.<!Transaction>>} node\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nRepo.prototype.pruneCompletedTransactionsBelowNode_ = function (node) {\n  var _this = this;\n\n  var queue = node.getValue();\n\n  if (queue) {\n    var to = 0;\n\n    for (var from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n\n    queue.length = to;\n    node.setValue(queue.length > 0 ? queue : null);\n  }\n\n  node.forEachChild(function (childNode) {\n    _this.pruneCompletedTransactionsBelowNode_(childNode);\n  });\n};\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()\r\n * since we consider them incompatible with transactions.\r\n *\r\n * @param {!Path} path Path for which we want to abort related transactions.\r\n * @return {!Path}\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nRepo.prototype.abortTransactions_ = function (path) {\n  var _this = this;\n\n  var affectedPath = this.getAncestorTransactionNode_(path).path();\n  var transactionNode = this.transactionQueueTree_.subTree(path);\n  transactionNode.forEachAncestor(function (node) {\n    _this.abortTransactionsOnNode_(node);\n  });\n  this.abortTransactionsOnNode_(transactionNode);\n  transactionNode.forEachDescendant(function (node) {\n    _this.abortTransactionsOnNode_(node);\n  });\n  return affectedPath;\n};\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nRepo.prototype.abortTransactionsOnNode_ = function (node) {\n  var queue = node.getValue();\n\n  if (queue !== null) {\n    // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n    // the callback could trigger more transactions or sets.\n    var callbacks = []; // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones\n    // can be immediately aborted and removed.\n\n    var events = [];\n    var lastSent = -1;\n\n    for (var i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) ;else if (queue[i].status === TransactionStatus.SENT) {\n        util.assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\n        lastSent = i; // Mark transaction for abort when it comes back.\n\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        util.assert(queue[i].status === TransactionStatus.RUN, 'Unexpected transaction status in abort'); // We can abort it immediately.\n\n        queue[i].unwatcher();\n        events = events.concat(this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true));\n\n        if (queue[i].onComplete) {\n          var snapshot = null;\n          callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, snapshot));\n        }\n      }\n    }\n\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      node.setValue(null);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    } // Now fire the callbacks.\n\n\n    this.eventQueue_.raiseEventsForChangedPath(node.path(), events);\n\n    for (var i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n};\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\n\n\nvar FirebaseAuthTokenProvider =\n/** @class */\nfunction () {\n  function FirebaseAuthTokenProvider(app_, authProvider_) {\n    var _this = this;\n\n    this.app_ = app_;\n    this.authProvider_ = authProvider_;\n    this.auth_ = null;\n    this.auth_ = authProvider_.getImmediate({\n      optional: true\n    });\n\n    if (!this.auth_) {\n      authProvider_.get().then(function (auth) {\n        return _this.auth_ = auth;\n      });\n    }\n  }\n  /**\r\n   * @param {boolean} forceRefresh\r\n   * @return {!Promise<FirebaseAuthTokenData>}\r\n   */\n\n\n  FirebaseAuthTokenProvider.prototype.getToken = function (forceRefresh) {\n    if (!this.auth_) {\n      return Promise.resolve(null);\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(function (error) {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  };\n\n  FirebaseAuthTokenProvider.prototype.addTokenChangeListener = function (listener) {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      setTimeout(function () {\n        return listener(null);\n      }, 0);\n      this.authProvider_.get().then(function (auth) {\n        return auth.addAuthTokenListener(listener);\n      });\n    }\n  };\n\n  FirebaseAuthTokenProvider.prototype.removeTokenChangeListener = function (listener) {\n    this.authProvider_.get().then(function (auth) {\n      return auth.removeAuthTokenListener(listener);\n    });\n  };\n\n  FirebaseAuthTokenProvider.prototype.notifyForInvalidToken = function () {\n    var errorMessage = 'Provided authentication credentials for the app named \"' + this.app_.name + '\" are invalid. This usually indicates your app was not ' + 'initialized correctly. ';\n\n    if ('credential' in this.app_.options) {\n      errorMessage += 'Make sure the \"credential\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n    } else if ('serviceAccount' in this.app_.options) {\n      errorMessage += 'Make sure the \"serviceAccount\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n    } else {\n      errorMessage += 'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' + 'initializeApp() match the values provided for your app at ' + 'https://console.firebase.google.com/.';\n    }\n\n    warn(errorMessage);\n  };\n\n  return FirebaseAuthTokenProvider;\n}();\n/* Auth token provider that the Admin SDK uses to connect to the Emulator. */\n\n\nvar EmulatorAdminTokenProvider =\n/** @class */\nfunction () {\n  function EmulatorAdminTokenProvider() {}\n\n  EmulatorAdminTokenProvider.prototype.getToken = function (forceRefresh) {\n    return Promise.resolve({\n      accessToken: EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN\n    });\n  };\n\n  EmulatorAdminTokenProvider.prototype.addTokenChangeListener = function (listener) {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN);\n  };\n\n  EmulatorAdminTokenProvider.prototype.removeTokenChangeListener = function (listener) {};\n\n  EmulatorAdminTokenProvider.prototype.notifyForInvalidToken = function () {};\n\n  EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN = 'owner';\n  return EmulatorAdminTokenProvider;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * This variable is also defined in the firebase node.js admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\n\n\nvar FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\nvar _staticInstance;\n/**\r\n * Creates and caches Repo instances.\r\n */\n\n\nvar RepoManager =\n/** @class */\nfunction () {\n  function RepoManager() {\n    /**\r\n     * @private {!Object.<string, Object<string, !fb.core.Repo>>}\r\n     */\n    this.repos_ = {};\n    /**\r\n     * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\r\n     * @private {boolean}\r\n     */\n\n    this.useRestClient_ = false;\n  }\n\n  RepoManager.getInstance = function () {\n    if (!_staticInstance) {\n      _staticInstance = new RepoManager();\n    }\n\n    return _staticInstance;\n  }; // TODO(koss): Remove these functions unless used in tests?\n\n\n  RepoManager.prototype.interrupt = function () {\n    var e_1, _a, e_2, _b;\n\n    try {\n      for (var _c = tslib.__values(Object.keys(this.repos_)), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var appName = _d.value;\n\n        try {\n          for (var _e = (e_2 = void 0, tslib.__values(Object.keys(this.repos_[appName]))), _f = _e.next(); !_f.done; _f = _e.next()) {\n            var dbUrl = _f.value;\n            this.repos_[appName][dbUrl].interrupt();\n          }\n        } catch (e_2_1) {\n          e_2 = {\n            error: e_2_1\n          };\n        } finally {\n          try {\n            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  RepoManager.prototype.resume = function () {\n    var e_3, _a, e_4, _b;\n\n    try {\n      for (var _c = tslib.__values(Object.keys(this.repos_)), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var appName = _d.value;\n\n        try {\n          for (var _e = (e_4 = void 0, tslib.__values(Object.keys(this.repos_[appName]))), _f = _e.next(); !_f.done; _f = _e.next()) {\n            var dbUrl = _f.value;\n            this.repos_[appName][dbUrl].resume();\n          }\n        } catch (e_4_1) {\n          e_4 = {\n            error: e_4_1\n          };\n        } finally {\n          try {\n            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n          } finally {\n            if (e_4) throw e_4.error;\n          }\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n  };\n  /**\r\n   * This function should only ever be called to CREATE a new database instance.\r\n   *\r\n   * @param {!FirebaseApp} app\r\n   * @return {!Database}\r\n   */\n\n\n  RepoManager.prototype.databaseFromApp = function (app, authProvider, url, nodeAdmin) {\n    var dbUrl = url || app.options.databaseURL;\n\n    if (dbUrl === undefined) {\n      if (!app.options.projectId) {\n        fatal(\"Can't determine Firebase Database URL. Be sure to include \" + ' a Project ID when calling firebase.initializeApp().');\n      }\n\n      log('Using default host for project ', app.options.projectId);\n      dbUrl = app.options.projectId + \"-default-rtdb.firebaseio.com\";\n    }\n\n    var parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    var repoInfo = parsedUrl.repoInfo;\n    var isEmulator;\n    var dbEmulatorHost = undefined;\n\n    if (typeof process !== 'undefined') {\n      dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n    }\n\n    if (dbEmulatorHost) {\n      isEmulator = true;\n      dbUrl = \"http://\" + dbEmulatorHost + \"?ns=\" + repoInfo.namespace;\n      parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n      repoInfo = parsedUrl.repoInfo;\n    } else {\n      isEmulator = !parsedUrl.repoInfo.secure;\n    }\n\n    var authTokenProvider = nodeAdmin && isEmulator ? new EmulatorAdminTokenProvider() : new FirebaseAuthTokenProvider(app, authProvider);\n    validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\n\n    if (!parsedUrl.path.isEmpty()) {\n      fatal('Database URL must point to the root of a Firebase Database ' + '(not including a child path).');\n    }\n\n    var repo = this.createRepo(repoInfo, app, authTokenProvider);\n    return repo.database;\n  };\n  /**\r\n   * Remove the repo and make sure it is disconnected.\r\n   *\r\n   * @param {!Repo} repo\r\n   */\n\n\n  RepoManager.prototype.deleteRepo = function (repo) {\n    var appRepos = util.safeGet(this.repos_, repo.app.name); // This should never happen...\n\n    if (!appRepos || util.safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {\n      fatal(\"Database \" + repo.app.name + \"(\" + repo.repoInfo_ + \") has already been deleted.\");\n    }\n\n    repo.interrupt();\n    delete appRepos[repo.repoInfo_.toURLString()];\n  };\n  /**\r\n   * Ensures a repo doesn't already exist and then creates one using the\r\n   * provided app.\r\n   *\r\n   * @param {!RepoInfo} repoInfo The metadata about the Repo\r\n   * @param {!FirebaseApp} app\r\n   * @return {!Repo} The Repo object for the specified server / repoName.\r\n   */\n\n\n  RepoManager.prototype.createRepo = function (repoInfo, app, authTokenProvider) {\n    var appRepos = util.safeGet(this.repos_, app.name);\n\n    if (!appRepos) {\n      appRepos = {};\n      this.repos_[app.name] = appRepos;\n    }\n\n    var repo = util.safeGet(appRepos, repoInfo.toURLString());\n\n    if (repo) {\n      fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\n    }\n\n    repo = new Repo(repoInfo, this.useRestClient_, app, authTokenProvider);\n    appRepos[repoInfo.toURLString()] = repo;\n    return repo;\n  };\n  /**\r\n   * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n   * @param {boolean} forceRestClient\r\n   */\n\n\n  RepoManager.prototype.forceRestClient = function (forceRestClient) {\n    this.useRestClient_ = forceRestClient;\n  };\n\n  return RepoManager;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Class representing a firebase database.\r\n * @implements {FirebaseService}\r\n */\n\n\nvar Database =\n/** @class */\nfunction () {\n  /**\r\n   * The constructor should not be called by users of our public API.\r\n   * @param {!Repo} repo_\r\n   */\n  function Database(repo_) {\n    this.repo_ = repo_;\n\n    if (!(repo_ instanceof Repo)) {\n      fatal(\"Don't call new Database() directly - please use firebase.database().\");\n    }\n    /** @type {Reference} */\n\n\n    this.root_ = new Reference(repo_, Path.Empty);\n    this.INTERNAL = new DatabaseInternals(this);\n  }\n\n  Object.defineProperty(Database.prototype, \"app\", {\n    get: function () {\n      return this.repo_.app;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Database.prototype.ref = function (path) {\n    this.checkDeleted_('ref');\n    util.validateArgCount('database.ref', 0, 1, arguments.length);\n\n    if (path instanceof Reference) {\n      return this.refFromURL(path.toString());\n    }\n\n    return path !== undefined ? this.root_.child(path) : this.root_;\n  };\n  /**\r\n   * Returns a reference to the root or the path specified in url.\r\n   * We throw a exception if the url is not in the same domain as the\r\n   * current repo.\r\n   * @param {string} url\r\n   * @return {!Reference} Firebase reference.\r\n   */\n\n\n  Database.prototype.refFromURL = function (url) {\n    /** @const {string} */\n    var apiName = 'database.refFromURL';\n    this.checkDeleted_(apiName);\n    util.validateArgCount(apiName, 1, 1, arguments.length);\n    var parsedURL = parseRepoInfo(url, this.repo_.repoInfo_.nodeAdmin);\n    validateUrl(apiName, 1, parsedURL);\n    var repoInfo = parsedURL.repoInfo;\n\n    if (repoInfo.host !== this.repo_.repoInfo_.host) {\n      fatal(apiName + ': Host name does not match the current database: ' + '(found ' + repoInfo.host + ' but expected ' + this.repo_.repoInfo_.host + ')');\n    }\n\n    return this.ref(parsedURL.path.toString());\n  };\n  /**\r\n   * @param {string} apiName\r\n   */\n\n\n  Database.prototype.checkDeleted_ = function (apiName) {\n    if (this.repo_ === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }; // Make individual repo go offline.\n\n\n  Database.prototype.goOffline = function () {\n    util.validateArgCount('database.goOffline', 0, 0, arguments.length);\n    this.checkDeleted_('goOffline');\n    this.repo_.interrupt();\n  };\n\n  Database.prototype.goOnline = function () {\n    util.validateArgCount('database.goOnline', 0, 0, arguments.length);\n    this.checkDeleted_('goOnline');\n    this.repo_.resume();\n  };\n\n  Database.ServerValue = {\n    TIMESTAMP: {\n      '.sv': 'timestamp'\n    },\n    increment: function (delta) {\n      return {\n        '.sv': {\n          'increment': delta\n        }\n      };\n    }\n  };\n  return Database;\n}();\n\nvar DatabaseInternals =\n/** @class */\nfunction () {\n  /** @param {!Database} database */\n  function DatabaseInternals(database) {\n    this.database = database;\n  }\n  /** @return {Promise<void>} */\n\n\n  DatabaseInternals.prototype.delete = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      return tslib.__generator(this, function (_a) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.database.checkDeleted_('delete'); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n        RepoManager.getInstance().deleteRepo(this.database.repo_); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n        this.database.repo_ = null; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n        this.database.root_ = null;\n        this.database.INTERNAL = null;\n        this.database = null;\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  return DatabaseInternals;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * INTERNAL methods for internal-use only (tests, etc.).\r\n *\r\n * Customers shouldn't use these or else should be aware that they could break at any time.\r\n *\r\n * @const\r\n */\n\n\nvar forceLongPolling = function () {\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n};\n\nvar forceWebSockets = function () {\n  BrowserPollConnection.forceDisallow();\n};\n/* Used by App Manager */\n\n\nvar isWebSocketsAvailable = function () {\n  return WebSocketConnection['isAvailable']();\n};\n\nvar setSecurityDebugCallback = function (ref, callback) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ref.repo.persistentConnection_.securityDebugCallback_ = callback;\n};\n\nvar stats = function (ref, showDelta) {\n  ref.repo.stats(showDelta);\n};\n\nvar statsIncrementCounter = function (ref, metric) {\n  ref.repo.statsIncrementCounter(metric);\n};\n\nvar dataUpdateCount = function (ref) {\n  return ref.repo.dataUpdateCount;\n};\n\nvar interceptServerData = function (ref, callback) {\n  return ref.repo.interceptServerData_(callback);\n};\n\nvar INTERNAL = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  forceLongPolling: forceLongPolling,\n  forceWebSockets: forceWebSockets,\n  isWebSocketsAvailable: isWebSocketsAvailable,\n  setSecurityDebugCallback: setSecurityDebugCallback,\n  stats: stats,\n  statsIncrementCounter: statsIncrementCounter,\n  dataUpdateCount: dataUpdateCount,\n  interceptServerData: interceptServerData\n});\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar DataConnection = PersistentConnection;\n/**\r\n * @param {!string} pathString\r\n * @param {function(*)} onComplete\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\n  this.sendRequest('q', {\n    p: pathString\n  }, onComplete);\n};\n/**\r\n * @param {*} data\r\n * @param {function(*)} onEcho\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nPersistentConnection.prototype.echo = function (data, onEcho) {\n  this.sendRequest('echo', {\n    d: data\n  }, onEcho);\n}; // RealTimeConnection properties that we use in tests.\n\n\nvar RealTimeConnection = Connection;\n/**\r\n * @param {function(): string} newHash\r\n * @return {function()}\r\n */\n\nvar hijackHash = function (newHash) {\n  var oldPut = PersistentConnection.prototype.put;\n\n  PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n/**\r\n * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}\r\n */\n\n\nvar ConnectionTarget = RepoInfo;\n/**\r\n * @param {!Query} query\r\n * @return {!string}\r\n */\n\nvar queryIdentifier = function (query) {\n  return query.queryIdentifier();\n};\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n *\r\n * @param {boolean} forceRestClient\r\n */\n\n\nvar forceRestClient = function (forceRestClient) {\n  RepoManager.getInstance().forceRestClient(forceRestClient);\n};\n\nvar TEST_ACCESS = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  DataConnection: DataConnection,\n  RealTimeConnection: RealTimeConnection,\n  hijackHash: hijackHash,\n  ConnectionTarget: ConnectionTarget,\n  queryIdentifier: queryIdentifier,\n  forceRestClient: forceRestClient\n});\nvar name = \"@firebase/database\";\nvar version = \"0.6.13\";\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar ServerValue = Database.ServerValue;\n\nfunction registerDatabase(instance) {\n  // set SDK_VERSION\n  setSDKVersion(instance.SDK_VERSION); // Register the Database Service with the 'firebase' namespace.\n\n  var namespace = instance.INTERNAL.registerComponent(new component.Component('database', function (container, url) {\n    /* Dependencies */\n    // getImmediate for FirebaseApp will always succeed\n    var app = container.getProvider('app').getImmediate();\n    var authProvider = container.getProvider('auth-internal');\n    return RepoManager.getInstance().databaseFromApp(app, authProvider, url);\n  }, \"PUBLIC\"\n  /* PUBLIC */\n  ).setServiceProps( // firebase.database namespace properties\n  {\n    Reference: Reference,\n    Query: Query,\n    Database: Database,\n    DataSnapshot: DataSnapshot,\n    enableLogging: enableLogging,\n    INTERNAL: INTERNAL,\n    ServerValue: ServerValue,\n    TEST_ACCESS: TEST_ACCESS\n  }).setMultipleInstances(true));\n  instance.registerVersion(name, version);\n\n  if (util.isNodeSdk()) {\n    module.exports = namespace;\n  }\n}\n\nregisterDatabase(firebase__default['default']);\nexports.DataSnapshot = DataSnapshot;\nexports.Database = Database;\nexports.OnDisconnect = OnDisconnect;\nexports.Query = Query;\nexports.Reference = Reference;\nexports.ServerValue = ServerValue;\nexports.enableLogging = enableLogging;\nexports.registerDatabase = registerDatabase;","map":{"version":3,"sources":["/Users/shaunteeshad/__apps/luminous-dashboard/node_modules/@firebase/database/dist/index.cjs.js"],"names":["Object","defineProperty","exports","value","firebase","require","tslib","util","logger$1","component","_interopDefaultLegacy","e","firebase__default","DOMStorageWrapper","domStorage_","prefix_","prototype","set","key","removeItem","prefixedName_","setItem","stringify","get","storedVal","getItem","jsonEval","remove","name","toString","MemoryStorage","cache_","isInMemoryStorage","contains","createStoragefor","domStorageName","window","domStorage","PersistentStorage","SessionStorage","logClient","Logger","LUIDGenerator","id","sha1","str","utf8Bytes","stringToByteArray","Sha1","update","sha1Bytes","digest","base64","encodeByteArray","buildLogMessage_","varArgs","_i","arguments","length","message","i","arg","Array","isArray","apply","logger","firstLog_","enableLogging","logger_","persistent","assert","logLevel","LogLevel","VERBOSE","log","bind","logWrapper","prefix","__spread","error","fatal","Error","warn","warnIfPageIsSecure","location","protocol","indexOf","isInvalidJSONNumber","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","executeWhenDOMReady","fn","isNodeSdk","document","readyState","called_1","wrappedFn_1","body","setTimeout","Math","floor","addEventListener","attachEvent","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","keys","k","push","sort","splitStringBySize","segsize","len","dataSegs","c","substring","each","hasOwnProperty","doubleToIEEE754String","v","ebits","fbits","bias","s","f","ln","Infinity","abs","pow","min","LN2","round","bits","reverse","join","hexByteString","hexByte","parseInt","substr","toLowerCase","isChromeExtensionContentScript","test","href","isWindowsStoreApp","Windows","UI","errorForServerCode","code","query","reason","path","toUpperCase","INTEGER_REGEXP_","RegExp","intVal","exceptionGuard","stack","beingCrawled","userAgent","search","setTimeoutNonBlocking","time","timeout","Path","pathOrString","pieceNum","pieces_","split","copyTo","pieceNum_","enumerable","configurable","getFront","getLength","popFront","getBack","pathString","toUrlEncodedString","encodeURIComponent","String","slice","begin","parent","pieces","child","childPathObj","childPieces","isEmpty","relativePath","outerPath","innerPath","outer","inner","comparePaths","left","right","leftKeys","rightKeys","cmp","equals","other","j","ValidationPath","errorPrefix_","parts_","byteLength_","max","stringLength","checkValid_","pop","last","MAX_PATH_LENGTH_BYTES","MAX_PATH_DEPTH","toErrorString","PROTOCOL_VERSION","VERSION_PARAM","TRANSPORT_SESSION_PARAM","REFERER_PARAM","FORGE_REF","FORGE_DOMAIN","LAST_SESSION_PARAM","APPLICATION_ID_PARAM","WEBSOCKET","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","domain","internalHost","needsQueryParam","isCustomHost","isCacheableHost","isDemoHost","updateHost","newHost","connectionURL","type","params","connURL","pairs","toURLString","decodePath","pathStringDecoded","piece","decodeURIComponent","replace","decodeQuery","queryString","e_1","_a","results","charAt","_b","__values","_c","next","done","segment","kv","e_1_1","return","call","parseRepoInfo","dataURL","parsedUrl","parseDatabaseURL","scheme","repoInfo","subdomain","port","colonInd","slashInd","questionMarkInd","queryParams","hostWithoutPort","dotInd","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","isValidRootPathString","isValidPriority","priority","validateFirebaseDataArg","fnName","argumentNumber","optional","undefined","validateFirebaseData","errorPrefix","path_","hasDotValue_1","hasActualChild_1","validateFirebaseMergePaths","mergePaths","curPath","prevPath","validateFirebaseMergeDataArg","validatePriority","validateEventType","eventType","validateKey","validatePathString","validateRootPathString","validateWritablePath","validateUrl","validateBoolean","bool","OnDisconnect","repo_","cancel","onComplete","validateArgCount","validateCallback","deferred","Deferred","onDisconnectCancel","wrapCallback","promise","onDisconnectSet","setWithPriority","onDisconnectSetWithPriority","objectToMerge","newObjectToMerge","onDisconnectUpdate","TransactionResult","committed","snapshot","toJSON","nextPushId","PUSH_CHARS","lastPushTime","lastRandChars","now","duplicateTime","timeStampChars","random","NamedNode","node","Wrap","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__EMPTY_NODE","KeyIndex","_super","__extends","val","isDefinedOn","assertionError","maxPost","makePost","indexValue","KEY_INDEX","MAX_NODE","setMaxNode","priorityHashText","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","LeafNode","value_","priorityNode_","EMPTY_NODE","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","index","action","exportFormat","getValue","hash","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","nodeFromJSON","MAX_NODE$1","setNodeFromJSON","setMaxNode$1","PriorityIndex","aPriority","bPriority","indexCmp","PRIORITY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","getNext","result","hasNext","peek","LLRBNode","color","RED","SortedMap","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","n","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","LLRBEmptyNode","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","LOG_2","Base12Num","logBase2","num","bitMask","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","high","namedNode","middle","buildFrom12Array","base12","root","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","_defaultIndexMap","fallbackObject","IndexMap","indexes_","indexSet_","indexKey","sortedMap","safeGet","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","newIndex","indexName","newIndexSet","__assign","newIndexes","addToIndexes","_this","map","indexedChildren","existingSnap","newChildren","removeFromIndexes","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","ChildrenNode","children_","indexMap_","Default","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","toHash_1","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","MAX_NODE$2","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","defineProperties","MAX","USE_HINZE","nodeFromJSON$1","json","jsonLeaf","children_1","childrenHavePriority_1","hinzeJsonObj","childSet","sortedChildSet","node_1","childData","ValueIndex","valueNode","VALUE_INDEX","PathIndex","indexPath_","extractChild","snap","aChild","bChild","DataSnapshot","node_","ref_","index_","exportVal","exists","childPathString","childPath","childRef","forEach","childrenNode","hasChildren","getKey","getRef","DataEvent","eventRegistration","prevName","getPath","ref","getParent","getEventType","getEventRunner","CancelEvent","ValueEventRegistration","callback_","cancelCallback_","context_","respondsTo","createEvent","change","getQueryParams","getIndex","snapshotNode","eventData","ctx","cancelCB_1","cb_1","createCancelEvent","matches","hasAnyCallback","ChildEventRegistration","callbacks_","eventToCheck","cancelCB_2","cb_2","otherKeys","thisKeys","otherCount","thisCount","otherKey","thisKey","every","__referenceConstructor","Query","repo","queryParams_","orderByCalled_","validateQueryEndpoints_","startNode","endNode","hasStart","getIndexStartValue","hasEnd","getIndexEndValue","tooManyArgsError","wrongArgTypeError","startName","getIndexStartName","endName","getIndexEndName","validateLimit_","hasLimit","hasAnchoredLimit","validateNoPreviousOrderByCall_","on","callback","cancelCallbackOrContext","context","ret","getCancelAndContextArgs_","onValueEvent","callbacks","onChildEvent","cancelCallback","container","addEventCallbackForQuery","off","validateContextObject","valueCallback","removeEventCallbackForQuery","once","userCallback","failureCallbackOrContext","firstCall","catch","onceCallback","resolve","err","reject","limitToFirst","limit","limitToLast","orderByChild","parsedPath","newParams","orderBy","orderByKey","orderByPriority","orderByValue","startAt","endAt","equalTo","queryObject","getQueryObject","queryIdentifier","isEqual","sameRepo","samePath","sameQueryIdentifier","cancelOrContext","ExistingValueProvider","DeferredValueProvider","syncTree","syncTree_","calcCompleteEventCache","generateWithValues","values","Date","getTime","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","JSON","op","existing","unused","delta","existingNode","leaf","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","SparseSnapshotTree","children","Map","find","size","childKey","has","remember","clear","forget","self_1","tree","safeToRemove","delete","forEachTree","prefixPath","func","OperationType","OperationSource","fromUser","fromServer","queryId","tagged","User","Server","forServerTaggedQuery","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","source","operationForChild","subtree","Empty","emptyChildrenSingleton","EmptyChildren","ImmutableTree","fromObject","childSnap","findRootMostMatchingPathAndValue","predicate","childExistingPathAndValue","fullPath","findRootMostValueAndPath","toSet","newChild","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","nextChild","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","getNode","ViewCache","eventCache_","serverCache_","updateEventSnap","eventSnap","complete","filtered","updateServerSnap","serverSnap","getEventCache","getCompleteEventSnap","getServerCache","getCompleteServerSnap","Change","oldSnap","valueChange","VALUE","childAddedChange","CHILD_ADDED","childRemovedChange","CHILD_REMOVED","childChangedChange","newSnapshot","oldSnapshot","CHILD_CHANGED","childMovedChange","CHILD_MOVED","IndexedFilter","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","ChildChangeAccumulator","changeMap","oldChange","oldType","getChanges","from","NoCompleteChildSource_","getCompleteChild","getChildAfterChild","NO_COMPLETE_CHILD_SOURCE","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","calcCompleteChild","completeServerData","nodes","calcIndexedSlice","ProcessorResult","viewCache","changes","ViewProcessor","filter_","assertIndexed","applyOperation","oldViewCache","operation","writesCache","completeCache","accumulator","newViewCache","filterServerNode","overwrite","applyUserOverwrite_","applyServerOverwrite_","merge","applyUserMerge_","applyServerMerge_","ackUserWrite","ackUserWrite_","revertUserWrite_","listenComplete_","maybeAddValueEvent_","isLeafOrEmpty","oldCompleteSnap","generateEventCacheAfterServerEvent_","changePath","oldEventSnap","shadowingWrite","newEventCache","serverCache","completeChildren","completeEventChildren","calcCompleteEventChildren","completeNode","oldEventNode","updatedPriority","calcEventCacheAfterServerOverwrite","childChangePath","newEventChild","eventChildUpdate","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","newEventSnap","cacheHasChild_","changedChildren","curViewCache","writePath","applyMerge_","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","changedChildren_1","changedChildren_2","mergePath","serverCachePath","oldServerNode","completeServerCache","oldEventCache","serverChildren","EventGenerator","query_","generateEventsForChanges","eventCache","eventRegistrations","events","moves","generateEventsForType_","registrations","filteredChanges","filter","compareChanges_","materializedChange","materializeSingleChange_","registration","aWrapped","bWrapped","View","initialViewCache","eventRegistrations_","indexFilter","getNodeFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","getQuery","getCompleteServerCache","cache","loadsAllData","addEventRegistration","removeEventRegistration","cancelError","cancelEvents","path_1","maybeEvent","remaining","concat","generateEventsForChanges_","getInitialEvents","initialChanges","eventNode","__referenceConstructor$1","SyncPoint","views","optCompleteServerCache","view","serverCacheComplete","eventCacheComplete","e_2","removed","hadCompleteView","hasCompleteView","entries","_d","__read","viewQueryId","e_2_1","getQueryViews","e_3","e_3_1","e_4","e_4_1","viewForQuery","getCompleteView","viewExistsForQuery","e_5","e_5_1","CompoundWrite","writeTree_","addWrite","rootmost","rootMostPath","newWriteTree","addWrites","updates","newWrite","removeWrite","hasCompleteWrite","getCompleteNode","getCompleteChildren","childCompoundWrite","shadowingNode","applySubtreeWrite","writeTree","priorityWrite_1","WriteTree","visibleWrites_","allWrites_","lastWriteId_","childWrites","WriteTreeRef","addOverwrite","writeId","visible","addMerge","getWrite","record","findIndex","writeToRemove","splice","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","recordContainsPath_","resetTree_","getCompleteWriteData","treePath","writeIdsToExclude","includeHiddenWrites","subMerge","layeredCache","write","mergeAtPath","layerTree_","completeServerChildren","topLevelSet","merge_1","existingEventSnap","existingServerSnap","childMerge","toIterate","writeRecord","DefaultFilter_","writes","treeRoot","compoundWrite","deepNode","treePath_","existingServerCache","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","applyUserOverwrite","newData","applyOperationToSyncPoints_","applyUserMerge","changeTree","needToReevaluate","affectedTree_1","applyServerOverwrite","applyServerMerge","applyListenComplete","applyTaggedQueryOverwrite","tag","queryKey","queryKeyForTag_","r","parseQueryKey_","queryPath","applyTaggedOperation_","applyTaggedQueryMerge","applyTaggedListenComplete","foundAncestorDefaultView","pathToSyncPoint","sp","syncPoint","childSyncPoint","viewAlreadyExists","makeQueryKey_","getNextQueryTag_","setupListener_","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","collectDistinctViewsForSubTree_","newQuery","listener","createListenerForView_","startListening","queryForListening_","tagForQuery_","hashFn","defaultTag","stopListening","queryToRemove","tagToRemove","removeTags_","includeHiddenSets","maybeChildSyncPoint","childMap","completeView","views_1","_key","childViews","queries","removedQuery","removedQueryKey","removedQueryTag","isDefault","queriesToStop","queries_1","childQueries","queryToStop","status","splitIndex","nextQueryTag_","applyOperationHelper_","syncPointTree","applyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","SnapshotHolder","rootNode_","updateSnapshot","newSnapshotNode","StatsCollection","counters_","incrementCounter","amount","deepCopy","StatsManager","getCollection","hashString","collections_","getOrCreateReporter","creatorFunction","reporters_","StatsListener","collection_","last_","newStats","stat","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","REPORT_STATS_INTERVAL","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","includeStat","stats","reportedStats","haveStatsToReport","reportStats","EventQueue","eventLists_","recursionDepth_","queueEvents","eventDataList","currList","eventPath","EventList","add","raiseEventsAtPath","raiseQueuedEventsMatchingPredicate_","raiseEventsForChangedPath","changedPath","sentAll","eventList","raise","events_","eventFn","EventEmitter","allowedEvents_","listeners_","trigger","listeners","validateEventType_","getInitialEvent","et","VisibilityMonitor","hidden","visibilityChange","visible_","getInstance","OnlineMonitor","online_","isMobileCordova","currentlyOnline","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","_loop_1","toProcess","this_1","_loop_2","state_1","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","FIREBASE_LONGPOLL_ID_PARAM","FIREBASE_LONGPOLL_PW_PARAM","FIREBASE_LONGPOLL_SERIAL_PARAM","FIREBASE_LONGPOLL_CALLBACK_ID_PARAM","FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM","FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET","FIREBASE_LONGPOLL_DATA_PARAM","FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM","MAX_URL_DATA_SIZE","SEG_HEADER_SIZE","MAX_PAYLOAD_SIZE","KEEPALIVE_REQUEST_INTERVAL","LP_CONNECT_TIMEOUT","BrowserPollConnection","connId","applicationId","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","open","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","scriptTagHolder","FirebaseIFrameScriptHolder","args","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","pN","urlParams","uniqueCallbackIdentifier","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","forceAllow","forceAllow_","forceDisallow","forceDisallow_","isAvailable","createElement","markConnectionHealthy","shutdown_","close","myDisconnFrame","removeChild","send","dataStr","base64data","base64Encode","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","Set","pendingSegs","currentSerial","myIFrame","createIFrame_","script","currentDomain","iframeContents","doc","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","newRequest_","theURL","curDataString","nextSeg","d","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","doNewRequest","keepaliveTimeout","readyStateCB","loadCB","doNodeLongPoll","newScript_1","async","onload","onreadystatechange","rstate","parentNode","onerror","SDK_VERSION","setSDKVersion","version","WEBSOCKET_MAX_FRAME_SIZE","WEBSOCKET_KEEPALIVE_INTERVAL","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","device","options","headers","process","platform","env","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","navigator","oldAndroidRegex","oldAndroidMatch","match","parseFloat","previouslyFailed","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","isWebSocketsAvailable","isSkipPollConnection","transports_","transports","ALL_TRANSPORTS","transport","initialTransport","upgradeTransport","UPGRADE_TIMEOUT","DELAY_BEFORE_SENDING_EXTRA_REQUESTS","BYTES_SENT_HEALTHY_OVERRIDE","BYTES_RECEIVED_HEALTHY_OVERRIDE","MESSAGE_TYPE","MESSAGE_DATA","CONTROL_SHUTDOWN","CONTROL_RESET","CONTROL_ERROR","CONTROL_PONG","SWITCH_ACK","END_TRANSMISSION","PING","SERVER_HELLO","Connection","repoInfo_","applicationId_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","t","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","ServerActions","put","refreshAuthToken","token","onDisconnectPut","onDisconnectMerge","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","RECONNECT_MAX_DELAY_FOR_ADMINS","RECONNECT_DELAY_MULTIPLIER","RECONNECT_DELAY_RESET_TIMEOUT","SERVER_KILL_INTERRUPT_REASON","INVALID_AUTH_TOKEN_THRESHOLD","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","outstandingPuts_","outstandingPutCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","authToken_","forceTokenRefresh_","invalidAuthTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","scheduleConnect_","onVisible_","onOnline_","onResponse","curReqNum","listen","currentHashFn","listenSpec","sendListen_","req","p","warnOnListenWarnings_","currentListenSpec","removeListen_","warnings","indexSpec","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isFirebaseSecret","isAdmin","token_1","authMethod","isValidFormat","requestData","cred","res","onAuthRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","request","response","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","handleTimestamp_","sendConnectStats_","restoreState_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectSucceeded","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage_1","onReady_1","onDisconnect_1","connId_1","nextConnectionId_","lastSessionId_1","canceled_1","connection_1","closeFn_1","sendRequestFn","forceRefresh","getToken","then","accessToken","interrupt","resume","serverTimeOffset","q","normalizedPathString","statusCode","explanation","notifyForInvalidToken","console","_e","_f","clientName","isReactNative","ReadonlyRestClient","listens_","getListenId_","listenId","thisListen","queryStringParameters","toRestQueryStringParameters","restRequest_","status_1","authTokenData","authToken","querystring","xhr","XMLHttpRequest","responseText","INTERRUPT_REASON","Repo","forceRestClient","app","authTokenProvider","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","persistentConnection_","authOverride","appId","addTokenChangeListener","statsReporter_","transactionsInit_","infoData_","infoSyncTree_","infoEvents","updateInfo_","serverSyncTree_","serverTime","offsetNode","offset","generateServerValues","isMerge","taggedChildren","raw","taggedSnap","rerunTransactions_","interceptServerData_","connectStatus","runOnDisconnectEvents_","getNextWriteId_","newVal","newNodeUnresolved","success","clearEvents","callOnCompleteCallback","abortTransactions_","childrenToMerge","empty","changedKey","changedValue","writeId_1","resolvedOnDisconnectTree","resolved","showDelta","longestName","reduce","previousValue","currentValue","paddedStat","statsIncrementCounter","metric","__database","Database","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","self","LimitedFilter","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","fullLimitUpdateChild_","inRange","indexCompare_1","foundStartPost","changeAccumulator","indexCmp_1","newChildNamedNode","windowBoundary","oldChildSnap","compareNext","remainsInWindow","nextChildInRange","QueryParams","limitSet_","startSet_","startNameSet_","endSet_","endNameSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","WIRE_PROTOCOL_CONSTANTS_","VIEW_FROM_LEFT","copy_","newLimit","VIEW_FROM_RIGHT","WIRE_PROTOCOL_CONSTANTS","INDEX_START_VALUE","INDEX_START_NAME","INDEX_END_VALUE","INDEX_END_NAME","LIMIT","viewFrom","VIEW_FROM","INDEX","REST_CONSTANTS","REST_QUERY_CONSTANTS_","qs","ORDER_BY","START_AT","END_AT","LIMIT_TO_FIRST","LIMIT_TO_LAST","DEFAULT","Reference","parentPath","getRoot","databaseProp","database","transaction","transactionUpdate","applyLocally","promiseComplete","startTransaction","setPriority","thennablePushRef","pushRef","Promise","TreeNode","childCount","Tree","name_","parent_","subTree","pathObj","setValue","updateParents_","forEachDescendant","includeSelf","childrenFirst","forEachAncestor","forEachImmediateDescendantWithValue","updateChild_","childEmpty","childExists","TransactionStatus","MAX_TRANSACTION_RETRIES_","transactionQueueTree_","watchRef","unwatcher","order","retryCount","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","getLatestState_","RUN","queueNode","nodeQueue","priorityForNode","currentNode","sendReadyTransactions_","excludeSets","pruneCompletedTransactionsBelowNode_","queue","buildTransactionQueue_","allRun","sendTransactionQueue_","setsToIgnore","txn","latestState","snapToSend","latestHash","SENT","dataToSend","pathToSend","COMPLETED","SENT_NEEDS_ABORT","NEEDS_ABORT","rootMostTransactionNode","getAncestorTransactionNode_","rerunTransactionQueue_","txnsToRerun","abortTransaction","newDataNode","hasExplicitPriority","oldWriteId","newNodeResolved","lastInput","transactionNode","transactionQueue","aggregateTransactionQueuesForNode_","to","abortTransactionsOnNode_","lastSent","FirebaseAuthTokenProvider","app_","authProvider_","auth_","getImmediate","auth","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","EmulatorAdminTokenProvider","EMULATOR_AUTH_TOKEN","FIREBASE_DATABASE_EMULATOR_HOST_VAR","_staticInstance","RepoManager","repos_","useRestClient_","appName","dbUrl","databaseFromApp","authProvider","databaseURL","projectId","isEmulator","dbEmulatorHost","createRepo","deleteRepo","appRepos","INTERNAL","DatabaseInternals","checkDeleted_","refFromURL","apiName","parsedURL","goOffline","goOnline","ServerValue","TIMESTAMP","increment","__awaiter","__generator","forceLongPolling","forceWebSockets","setSecurityDebugCallback","interceptServerData","freeze","__proto__","DataConnection","simpleListen","echo","onEcho","RealTimeConnection","hijackHash","newHash","oldPut","ConnectionTarget","TEST_ACCESS","registerDatabase","instance","registerComponent","Component","getProvider","setServiceProps","setMultipleInstances","registerVersion","module"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar firebase = require('@firebase/app');\nvar tslib = require('tslib');\nvar util = require('@firebase/util');\nvar logger$1 = require('@firebase/logger');\nvar component = require('@firebase/component');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar firebase__default = /*#__PURE__*/_interopDefaultLegacy(firebase);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n * @constructor\r\n */\r\nvar DOMStorageWrapper = /** @class */ (function () {\r\n    /**\r\n     * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */\r\n    function DOMStorageWrapper(domStorage_) {\r\n        this.domStorage_ = domStorage_;\r\n        // Use a prefix to avoid collisions with other stuff saved by the app.\r\n        this.prefix_ = 'firebase:';\r\n    }\r\n    /**\r\n     * @param {string} key The key to save the value under\r\n     * @param {?Object} value The value being stored, or null to remove the key.\r\n     */\r\n    DOMStorageWrapper.prototype.set = function (key, value) {\r\n        if (value == null) {\r\n            this.domStorage_.removeItem(this.prefixedName_(key));\r\n        }\r\n        else {\r\n            this.domStorage_.setItem(this.prefixedName_(key), util.stringify(value));\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} key\r\n     * @return {*} The value that was stored under this key, or null\r\n     */\r\n    DOMStorageWrapper.prototype.get = function (key) {\r\n        var storedVal = this.domStorage_.getItem(this.prefixedName_(key));\r\n        if (storedVal == null) {\r\n            return null;\r\n        }\r\n        else {\r\n            return util.jsonEval(storedVal);\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} key\r\n     */\r\n    DOMStorageWrapper.prototype.remove = function (key) {\r\n        this.domStorage_.removeItem(this.prefixedName_(key));\r\n    };\r\n    /**\r\n     * @param {string} name\r\n     * @return {string}\r\n     */\r\n    DOMStorageWrapper.prototype.prefixedName_ = function (name) {\r\n        return this.prefix_ + name;\r\n    };\r\n    DOMStorageWrapper.prototype.toString = function () {\r\n        return this.domStorage_.toString();\r\n    };\r\n    return DOMStorageWrapper;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n *\r\n * @constructor\r\n */\r\nvar MemoryStorage = /** @class */ (function () {\r\n    function MemoryStorage() {\r\n        this.cache_ = {};\r\n        this.isInMemoryStorage = true;\r\n    }\r\n    MemoryStorage.prototype.set = function (key, value) {\r\n        if (value == null) {\r\n            delete this.cache_[key];\r\n        }\r\n        else {\r\n            this.cache_[key] = value;\r\n        }\r\n    };\r\n    MemoryStorage.prototype.get = function (key) {\r\n        if (util.contains(this.cache_, key)) {\r\n            return this.cache_[key];\r\n        }\r\n        return null;\r\n    };\r\n    MemoryStorage.prototype.remove = function (key) {\r\n        delete this.cache_[key];\r\n    };\r\n    return MemoryStorage;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param {string} domStorageName Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @return {?} Turning off type information until a common interface is defined.\r\n */\r\nvar createStoragefor = function (domStorageName) {\r\n    try {\r\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\r\n        // so it must be inside the try/catch.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window[domStorageName] !== 'undefined') {\r\n            // Need to test cache. Just because it's here doesn't mean it works\r\n            var domStorage = window[domStorageName];\r\n            domStorage.setItem('firebase:sentinel', 'cache');\r\n            domStorage.removeItem('firebase:sentinel');\r\n            return new DOMStorageWrapper(domStorage);\r\n        }\r\n    }\r\n    catch (e) { }\r\n    // Failed to create wrapper.  Just return in-memory storage.\r\n    // TODO: log?\r\n    return new MemoryStorage();\r\n};\r\n/** A storage object that lasts across sessions */\r\nvar PersistentStorage = createStoragefor('localStorage');\r\n/** A storage object that only lasts one session */\r\nvar SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar logClient = new logger$1.Logger('@firebase/database');\r\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n * @type {function(): number} Generated ID.\r\n */\r\nvar LUIDGenerator = (function () {\r\n    var id = 1;\r\n    return function () {\r\n        return id++;\r\n    };\r\n})();\r\n/**\r\n * Sha1 hash of the input string\r\n * @param {!string} str The string to hash\r\n * @return {!string} The resulting hash\r\n */\r\nvar sha1 = function (str) {\r\n    var utf8Bytes = util.stringToByteArray(str);\r\n    var sha1 = new util.Sha1();\r\n    sha1.update(utf8Bytes);\r\n    var sha1Bytes = sha1.digest();\r\n    return util.base64.encodeByteArray(sha1Bytes);\r\n};\r\n/**\r\n * @param {...*} varArgs\r\n * @return {string}\r\n * @private\r\n */\r\nvar buildLogMessage_ = function () {\r\n    var varArgs = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        varArgs[_i] = arguments[_i];\r\n    }\r\n    var message = '';\r\n    for (var i = 0; i < varArgs.length; i++) {\r\n        var arg = varArgs[i];\r\n        if (Array.isArray(arg) ||\r\n            (arg &&\r\n                typeof arg === 'object' &&\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                typeof arg.length === 'number')) {\r\n            message += buildLogMessage_.apply(null, arg);\r\n        }\r\n        else if (typeof arg === 'object') {\r\n            message += util.stringify(arg);\r\n        }\r\n        else {\r\n            message += arg;\r\n        }\r\n        message += ' ';\r\n    }\r\n    return message;\r\n};\r\n/**\r\n * Use this for all debug messages in Firebase.\r\n * @type {?function(string)}\r\n */\r\nvar logger = null;\r\n/**\r\n * Flag to check for log availability on first log message\r\n * @type {boolean}\r\n * @private\r\n */\r\nvar firstLog_ = true;\r\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger\r\n * @param {boolean=} persistent Whether or not to persist logging settings across refreshes\r\n */\r\nvar enableLogging = function (logger_, persistent) {\r\n    util.assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\r\n    if (logger_ === true) {\r\n        logClient.logLevel = logger$1.LogLevel.VERBOSE;\r\n        logger = logClient.log.bind(logClient);\r\n        if (persistent) {\r\n            SessionStorage.set('logging_enabled', true);\r\n        }\r\n    }\r\n    else if (typeof logger_ === 'function') {\r\n        logger = logger_;\r\n    }\r\n    else {\r\n        logger = null;\r\n        SessionStorage.remove('logging_enabled');\r\n    }\r\n};\r\n/**\r\n *\r\n * @param {...(string|Arguments)} varArgs\r\n */\r\nvar log = function () {\r\n    var varArgs = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        varArgs[_i] = arguments[_i];\r\n    }\r\n    if (firstLog_ === true) {\r\n        firstLog_ = false;\r\n        if (logger === null && SessionStorage.get('logging_enabled') === true) {\r\n            enableLogging(true);\r\n        }\r\n    }\r\n    if (logger) {\r\n        var message = buildLogMessage_.apply(null, varArgs);\r\n        logger(message);\r\n    }\r\n};\r\n/**\r\n * @param {!string} prefix\r\n * @return {function(...[*])}\r\n */\r\nvar logWrapper = function (prefix) {\r\n    return function () {\r\n        var varArgs = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            varArgs[_i] = arguments[_i];\r\n        }\r\n        log.apply(void 0, tslib.__spread([prefix], varArgs));\r\n    };\r\n};\r\n/**\r\n * @param {...string} varArgs\r\n */\r\nvar error = function () {\r\n    var varArgs = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        varArgs[_i] = arguments[_i];\r\n    }\r\n    var message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_.apply(void 0, tslib.__spread(varArgs));\r\n    logClient.error(message);\r\n};\r\n/**\r\n * @param {...string} varArgs\r\n */\r\nvar fatal = function () {\r\n    var varArgs = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        varArgs[_i] = arguments[_i];\r\n    }\r\n    var message = \"FIREBASE FATAL ERROR: \" + buildLogMessage_.apply(void 0, tslib.__spread(varArgs));\r\n    logClient.error(message);\r\n    throw new Error(message);\r\n};\r\n/**\r\n * @param {...*} varArgs\r\n */\r\nvar warn = function () {\r\n    var varArgs = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        varArgs[_i] = arguments[_i];\r\n    }\r\n    var message = 'FIREBASE WARNING: ' + buildLogMessage_.apply(void 0, tslib.__spread(varArgs));\r\n    logClient.warn(message);\r\n};\r\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\r\nvar warnIfPageIsSecure = function () {\r\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\r\n    if (typeof window !== 'undefined' &&\r\n        window.location &&\r\n        window.location.protocol &&\r\n        window.location.protocol.indexOf('https:') !== -1) {\r\n        warn('Insecure Firebase access from a secure page. ' +\r\n            'Please use https in calls to new Firebase().');\r\n    }\r\n};\r\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n * @param {*} data\r\n * @return {boolean}\r\n */\r\nvar isInvalidJSONNumber = function (data) {\r\n    return (typeof data === 'number' &&\r\n        (data !== data || // NaN\r\n            data === Number.POSITIVE_INFINITY ||\r\n            data === Number.NEGATIVE_INFINITY));\r\n};\r\n/**\r\n * @param {function()} fn\r\n */\r\nvar executeWhenDOMReady = function (fn) {\r\n    if (util.isNodeSdk() || document.readyState === 'complete') {\r\n        fn();\r\n    }\r\n    else {\r\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\r\n        // fire before onload), but fall back to onload.\r\n        var called_1 = false;\r\n        var wrappedFn_1 = function () {\r\n            if (!document.body) {\r\n                setTimeout(wrappedFn_1, Math.floor(10));\r\n                return;\r\n            }\r\n            if (!called_1) {\r\n                called_1 = true;\r\n                fn();\r\n            }\r\n        };\r\n        if (document.addEventListener) {\r\n            document.addEventListener('DOMContentLoaded', wrappedFn_1, false);\r\n            // fallback to onload.\r\n            window.addEventListener('load', wrappedFn_1, false);\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (document.attachEvent) {\r\n            // IE.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            document.attachEvent('onreadystatechange', function () {\r\n                if (document.readyState === 'complete') {\r\n                    wrappedFn_1();\r\n                }\r\n            });\r\n            // fallback to onload.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            window.attachEvent('onload', wrappedFn_1);\r\n            // jQuery has an extra hack for IE that we could employ (based on\r\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\r\n            // I'm hoping we don't need it.\r\n        }\r\n    }\r\n};\r\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n * @type {!string}\r\n */\r\nvar MIN_NAME = '[MIN_NAME]';\r\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n * @type {!string}\r\n */\r\nvar MAX_NAME = '[MAX_NAME]';\r\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number}\r\n */\r\nvar nameCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a === MIN_NAME || b === MAX_NAME) {\r\n        return -1;\r\n    }\r\n    else if (b === MIN_NAME || a === MAX_NAME) {\r\n        return 1;\r\n    }\r\n    else {\r\n        var aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\r\n        if (aAsInt !== null) {\r\n            if (bAsInt !== null) {\r\n                return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (bAsInt !== null) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return a < b ? -1 : 1;\r\n        }\r\n    }\r\n};\r\n/**\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number} comparison result.\r\n */\r\nvar stringCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n};\r\n/**\r\n * @param {string} key\r\n * @param {Object} obj\r\n * @return {*}\r\n */\r\nvar requireKey = function (key, obj) {\r\n    if (obj && key in obj) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        throw new Error('Missing required key (' + key + ') in object: ' + util.stringify(obj));\r\n    }\r\n};\r\n/**\r\n * @param {*} obj\r\n * @return {string}\r\n */\r\nvar ObjectToUniqueKey = function (obj) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return util.stringify(obj);\r\n    }\r\n    var keys = [];\r\n    // eslint-disable-next-line guard-for-in\r\n    for (var k in obj) {\r\n        keys.push(k);\r\n    }\r\n    // Export as json, but with the keys sorted.\r\n    keys.sort();\r\n    var key = '{';\r\n    for (var i = 0; i < keys.length; i++) {\r\n        if (i !== 0) {\r\n            key += ',';\r\n        }\r\n        key += util.stringify(keys[i]);\r\n        key += ':';\r\n        key += ObjectToUniqueKey(obj[keys[i]]);\r\n    }\r\n    key += '}';\r\n    return key;\r\n};\r\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param {!string} str The string\r\n * @param {!number} segsize The maximum number of chars in the string.\r\n * @return {Array.<string>} The string, split into appropriately-sized chunks\r\n */\r\nvar splitStringBySize = function (str, segsize) {\r\n    var len = str.length;\r\n    if (len <= segsize) {\r\n        return [str];\r\n    }\r\n    var dataSegs = [];\r\n    for (var c = 0; c < len; c += segsize) {\r\n        if (c + segsize > len) {\r\n            dataSegs.push(str.substring(c, len));\r\n        }\r\n        else {\r\n            dataSegs.push(str.substring(c, c + segsize));\r\n        }\r\n    }\r\n    return dataSegs;\r\n};\r\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj The object or array to iterate over\r\n * @param fn The function to apply\r\n */\r\nfunction each(obj, fn) {\r\n    for (var key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n            fn(key, obj[key]);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param {!number} v A double\r\n * @return {string}\r\n */\r\nvar doubleToIEEE754String = function (v) {\r\n    util.assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\r\n    var ebits = 11, fbits = 52;\r\n    var bias = (1 << (ebits - 1)) - 1;\r\n    var s, e, f, ln, i;\r\n    // Compute sign, exponent, fraction\r\n    // Skip NaN / Infinity handling --MJL.\r\n    if (v === 0) {\r\n        e = 0;\r\n        f = 0;\r\n        s = 1 / v === -Infinity ? 1 : 0;\r\n    }\r\n    else {\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n        if (v >= Math.pow(2, 1 - bias)) {\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }\r\n        else {\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n    // Pack sign, exponent, fraction\r\n    var bits = [];\r\n    for (i = fbits; i; i -= 1) {\r\n        bits.push(f % 2 ? 1 : 0);\r\n        f = Math.floor(f / 2);\r\n    }\r\n    for (i = ebits; i; i -= 1) {\r\n        bits.push(e % 2 ? 1 : 0);\r\n        e = Math.floor(e / 2);\r\n    }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    var str = bits.join('');\r\n    // Return the data as a hex string. --MJL\r\n    var hexByteString = '';\r\n    for (i = 0; i < 64; i += 8) {\r\n        var hexByte = parseInt(str.substr(i, 8), 2).toString(16);\r\n        if (hexByte.length === 1) {\r\n            hexByte = '0' + hexByte;\r\n        }\r\n        hexByteString = hexByteString + hexByte;\r\n    }\r\n    return hexByteString.toLowerCase();\r\n};\r\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n * @return {boolean}\r\n */\r\nvar isChromeExtensionContentScript = function () {\r\n    return !!(typeof window === 'object' &&\r\n        window['chrome'] &&\r\n        window['chrome']['extension'] &&\r\n        !/^chrome/.test(window.location.href));\r\n};\r\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n * @return {boolean}\r\n */\r\nvar isWindowsStoreApp = function () {\r\n    // Check for the presence of a couple WinRT globals\r\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\r\n};\r\n/**\r\n * Converts a server error code to a Javascript Error\r\n * @param {!string} code\r\n * @param {!Query} query\r\n * @return {Error}\r\n */\r\nvar errorForServerCode = function (code, query) {\r\n    var reason = 'Unknown Error';\r\n    if (code === 'too_big') {\r\n        reason =\r\n            'The data requested exceeds the maximum size ' +\r\n                'that can be accessed with a single request.';\r\n    }\r\n    else if (code === 'permission_denied') {\r\n        reason = \"Client doesn't have permission to access the desired data.\";\r\n    }\r\n    else if (code === 'unavailable') {\r\n        reason = 'The service is unavailable';\r\n    }\r\n    var error = new Error(code + ' at ' + query.path.toString() + ': ' + reason);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    error.code = code.toUpperCase();\r\n    return error;\r\n};\r\n/**\r\n * Used to test for integer-looking strings\r\n * @type {RegExp}\r\n * @private\r\n */\r\nvar INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\r\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n * @param {!string} str\r\n * @return {?number}\r\n */\r\nvar tryParseInt = function (str) {\r\n    if (INTEGER_REGEXP_.test(str)) {\r\n        var intVal = Number(str);\r\n        if (intVal >= -2147483648 && intVal <= 2147483647) {\r\n            return intVal;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param {!function()} fn The code to guard.\r\n */\r\nvar exceptionGuard = function (fn) {\r\n    try {\r\n        fn();\r\n    }\r\n    catch (e) {\r\n        // Re-throw exception when it's safe.\r\n        setTimeout(function () {\r\n            // It used to be that \"throw e\" would result in a good console error with\r\n            // relevant context, but as of Chrome 39, you just get the firebase.js\r\n            // file/line number where we re-throw it, which is useless. So we log\r\n            // e.stack explicitly.\r\n            var stack = e.stack || '';\r\n            warn('Exception was thrown by user callback.', stack);\r\n            throw e;\r\n        }, Math.floor(0));\r\n    }\r\n};\r\n/**\r\n * @return {boolean} true if we think we're currently being crawled.\r\n */\r\nvar beingCrawled = function () {\r\n    var userAgent = (typeof window === 'object' &&\r\n        window['navigator'] &&\r\n        window['navigator']['userAgent']) ||\r\n        '';\r\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\r\n    // believe to support JavaScript/AJAX rendering.\r\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\r\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\r\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\r\n};\r\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param {Function} fn Function to run.\r\n * @param {number} time Milliseconds to wait before running.\r\n * @return {number|Object} The setTimeout() return value.\r\n */\r\nvar setTimeoutNonBlocking = function (fn, time) {\r\n    var timeout = setTimeout(fn, time);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if (typeof timeout === 'object' && timeout['unref']) {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        timeout['unref']();\r\n    }\r\n    return timeout;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\r\nvar Path = /** @class */ (function () {\r\n    /**\r\n     * @param {string|Array.<string>} pathOrString Path string to parse,\r\n     *      or another path, or the raw tokens array\r\n     * @param {number=} pieceNum\r\n     */\r\n    function Path(pathOrString, pieceNum) {\r\n        if (pieceNum === void 0) {\r\n            this.pieces_ = pathOrString.split('/');\r\n            // Remove empty pieces.\r\n            var copyTo = 0;\r\n            for (var i = 0; i < this.pieces_.length; i++) {\r\n                if (this.pieces_[i].length > 0) {\r\n                    this.pieces_[copyTo] = this.pieces_[i];\r\n                    copyTo++;\r\n                }\r\n            }\r\n            this.pieces_.length = copyTo;\r\n            this.pieceNum_ = 0;\r\n        }\r\n        else {\r\n            this.pieces_ = pathOrString;\r\n            this.pieceNum_ = pieceNum;\r\n        }\r\n    }\r\n    Object.defineProperty(Path, \"Empty\", {\r\n        /**\r\n         * Singleton to represent an empty path\r\n         *\r\n         * @const\r\n         */\r\n        get: function () {\r\n            return new Path('');\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Path.prototype.getFront = function () {\r\n        if (this.pieceNum_ >= this.pieces_.length) {\r\n            return null;\r\n        }\r\n        return this.pieces_[this.pieceNum_];\r\n    };\r\n    /**\r\n     * @return {number} The number of segments in this path\r\n     */\r\n    Path.prototype.getLength = function () {\r\n        return this.pieces_.length - this.pieceNum_;\r\n    };\r\n    /**\r\n     * @return {!Path}\r\n     */\r\n    Path.prototype.popFront = function () {\r\n        var pieceNum = this.pieceNum_;\r\n        if (pieceNum < this.pieces_.length) {\r\n            pieceNum++;\r\n        }\r\n        return new Path(this.pieces_, pieceNum);\r\n    };\r\n    /**\r\n     * @return {?string}\r\n     */\r\n    Path.prototype.getBack = function () {\r\n        if (this.pieceNum_ < this.pieces_.length) {\r\n            return this.pieces_[this.pieces_.length - 1];\r\n        }\r\n        return null;\r\n    };\r\n    Path.prototype.toString = function () {\r\n        var pathString = '';\r\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '') {\r\n                pathString += '/' + this.pieces_[i];\r\n            }\r\n        }\r\n        return pathString || '/';\r\n    };\r\n    Path.prototype.toUrlEncodedString = function () {\r\n        var pathString = '';\r\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '') {\r\n                pathString += '/' + encodeURIComponent(String(this.pieces_[i]));\r\n            }\r\n        }\r\n        return pathString || '/';\r\n    };\r\n    /**\r\n     * Shallow copy of the parts of the path.\r\n     *\r\n     * @param {number=} begin\r\n     * @return {!Array<string>}\r\n     */\r\n    Path.prototype.slice = function (begin) {\r\n        if (begin === void 0) { begin = 0; }\r\n        return this.pieces_.slice(this.pieceNum_ + begin);\r\n    };\r\n    /**\r\n     * @return {?Path}\r\n     */\r\n    Path.prototype.parent = function () {\r\n        if (this.pieceNum_ >= this.pieces_.length) {\r\n            return null;\r\n        }\r\n        var pieces = [];\r\n        for (var i = this.pieceNum_; i < this.pieces_.length - 1; i++) {\r\n            pieces.push(this.pieces_[i]);\r\n        }\r\n        return new Path(pieces, 0);\r\n    };\r\n    /**\r\n     * @param {string|!Path} childPathObj\r\n     * @return {!Path}\r\n     */\r\n    Path.prototype.child = function (childPathObj) {\r\n        var pieces = [];\r\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            pieces.push(this.pieces_[i]);\r\n        }\r\n        if (childPathObj instanceof Path) {\r\n            for (var i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\r\n                pieces.push(childPathObj.pieces_[i]);\r\n            }\r\n        }\r\n        else {\r\n            var childPieces = childPathObj.split('/');\r\n            for (var i = 0; i < childPieces.length; i++) {\r\n                if (childPieces[i].length > 0) {\r\n                    pieces.push(childPieces[i]);\r\n                }\r\n            }\r\n        }\r\n        return new Path(pieces, 0);\r\n    };\r\n    /**\r\n     * @return {boolean} True if there are no segments in this path\r\n     */\r\n    Path.prototype.isEmpty = function () {\r\n        return this.pieceNum_ >= this.pieces_.length;\r\n    };\r\n    /**\r\n     * @param {!Path} outerPath\r\n     * @param {!Path} innerPath\r\n     * @return {!Path} The path from outerPath to innerPath\r\n     */\r\n    Path.relativePath = function (outerPath, innerPath) {\r\n        var outer = outerPath.getFront(), inner = innerPath.getFront();\r\n        if (outer === null) {\r\n            return innerPath;\r\n        }\r\n        else if (outer === inner) {\r\n            return Path.relativePath(outerPath.popFront(), innerPath.popFront());\r\n        }\r\n        else {\r\n            throw new Error('INTERNAL ERROR: innerPath (' +\r\n                innerPath +\r\n                ') is not within ' +\r\n                'outerPath (' +\r\n                outerPath +\r\n                ')');\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Path} left\r\n     * @param {!Path} right\r\n     * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.\r\n     */\r\n    Path.comparePaths = function (left, right) {\r\n        var leftKeys = left.slice();\r\n        var rightKeys = right.slice();\r\n        for (var i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\r\n            var cmp = nameCompare(leftKeys[i], rightKeys[i]);\r\n            if (cmp !== 0) {\r\n                return cmp;\r\n            }\r\n        }\r\n        if (leftKeys.length === rightKeys.length) {\r\n            return 0;\r\n        }\r\n        return leftKeys.length < rightKeys.length ? -1 : 1;\r\n    };\r\n    /**\r\n     *\r\n     * @param {Path} other\r\n     * @return {boolean} true if paths are the same.\r\n     */\r\n    Path.prototype.equals = function (other) {\r\n        if (this.getLength() !== other.getLength()) {\r\n            return false;\r\n        }\r\n        for (var i = this.pieceNum_, j = other.pieceNum_; i <= this.pieces_.length; i++, j++) {\r\n            if (this.pieces_[i] !== other.pieces_[j]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Path} other\r\n     * @return {boolean} True if this path is a parent (or the same as) other\r\n     */\r\n    Path.prototype.contains = function (other) {\r\n        var i = this.pieceNum_;\r\n        var j = other.pieceNum_;\r\n        if (this.getLength() > other.getLength()) {\r\n            return false;\r\n        }\r\n        while (i < this.pieces_.length) {\r\n            if (this.pieces_[i] !== other.pieces_[j]) {\r\n                return false;\r\n            }\r\n            ++i;\r\n            ++j;\r\n        }\r\n        return true;\r\n    };\r\n    return Path;\r\n}()); // end Path\r\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\r\nvar ValidationPath = /** @class */ (function () {\r\n    /**\r\n     * @param {!Path} path Initial Path.\r\n     * @param {string} errorPrefix_ Prefix for any error messages.\r\n     */\r\n    function ValidationPath(path, errorPrefix_) {\r\n        this.errorPrefix_ = errorPrefix_;\r\n        /** @type {!Array<string>} */\r\n        this.parts_ = path.slice();\r\n        /** @type {number} Initialize to number of '/' chars needed in path. */\r\n        this.byteLength_ = Math.max(1, this.parts_.length);\r\n        for (var i = 0; i < this.parts_.length; i++) {\r\n            this.byteLength_ += util.stringLength(this.parts_[i]);\r\n        }\r\n        this.checkValid_();\r\n    }\r\n    Object.defineProperty(ValidationPath, \"MAX_PATH_DEPTH\", {\r\n        /** @const {number} Maximum key depth. */\r\n        get: function () {\r\n            return 32;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValidationPath, \"MAX_PATH_LENGTH_BYTES\", {\r\n        /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */\r\n        get: function () {\r\n            return 768;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /** @param {string} child */\r\n    ValidationPath.prototype.push = function (child) {\r\n        // Count the needed '/'\r\n        if (this.parts_.length > 0) {\r\n            this.byteLength_ += 1;\r\n        }\r\n        this.parts_.push(child);\r\n        this.byteLength_ += util.stringLength(child);\r\n        this.checkValid_();\r\n    };\r\n    ValidationPath.prototype.pop = function () {\r\n        var last = this.parts_.pop();\r\n        this.byteLength_ -= util.stringLength(last);\r\n        // Un-count the previous '/'\r\n        if (this.parts_.length > 0) {\r\n            this.byteLength_ -= 1;\r\n        }\r\n    };\r\n    ValidationPath.prototype.checkValid_ = function () {\r\n        if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {\r\n            throw new Error(this.errorPrefix_ +\r\n                'has a key path longer than ' +\r\n                ValidationPath.MAX_PATH_LENGTH_BYTES +\r\n                ' bytes (' +\r\n                this.byteLength_ +\r\n                ').');\r\n        }\r\n        if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {\r\n            throw new Error(this.errorPrefix_ +\r\n                'path specified exceeds the maximum depth that can be written (' +\r\n                ValidationPath.MAX_PATH_DEPTH +\r\n                ') or object contains a cycle ' +\r\n                this.toErrorString());\r\n        }\r\n    };\r\n    /**\r\n     * String for use in error messages - uses '.' notation for path.\r\n     *\r\n     * @return {string}\r\n     */\r\n    ValidationPath.prototype.toErrorString = function () {\r\n        if (this.parts_.length === 0) {\r\n            return '';\r\n        }\r\n        return \"in property '\" + this.parts_.join('.') + \"'\";\r\n    };\r\n    return ValidationPath;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar PROTOCOL_VERSION = '5';\r\nvar VERSION_PARAM = 'v';\r\nvar TRANSPORT_SESSION_PARAM = 's';\r\nvar REFERER_PARAM = 'r';\r\nvar FORGE_REF = 'f';\r\nvar FORGE_DOMAIN = 'firebaseio.com';\r\nvar LAST_SESSION_PARAM = 'ls';\r\nvar APPLICATION_ID_PARAM = 'p';\r\nvar WEBSOCKET = 'websocket';\r\nvar LONG_POLLING = 'long_polling';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A class that holds metadata about a Repo object\r\n *\r\n * @constructor\r\n */\r\nvar RepoInfo = /** @class */ (function () {\r\n    /**\r\n     * @param host Hostname portion of the url for the repo\r\n     * @param secure Whether or not this repo is accessed over ssl\r\n     * @param namespace The namespace represented by the repo\r\n     * @param webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param nodeAdmin Whether this instance uses Admin SDK credentials\r\n     * @param persistenceKey Override the default session persistence storage key\r\n     */\r\n    function RepoInfo(host, secure, namespace, webSocketOnly, nodeAdmin, persistenceKey, includeNamespaceInQueryParams) {\r\n        if (nodeAdmin === void 0) { nodeAdmin = false; }\r\n        if (persistenceKey === void 0) { persistenceKey = ''; }\r\n        if (includeNamespaceInQueryParams === void 0) { includeNamespaceInQueryParams = false; }\r\n        this.secure = secure;\r\n        this.namespace = namespace;\r\n        this.webSocketOnly = webSocketOnly;\r\n        this.nodeAdmin = nodeAdmin;\r\n        this.persistenceKey = persistenceKey;\r\n        this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\r\n        this.host = host.toLowerCase();\r\n        this.domain = this.host.substr(this.host.indexOf('.') + 1);\r\n        this.internalHost =\r\n            PersistentStorage.get('host:' + host) || this.host;\r\n    }\r\n    RepoInfo.prototype.needsQueryParam = function () {\r\n        return (this.host !== this.internalHost ||\r\n            this.isCustomHost() ||\r\n            this.includeNamespaceInQueryParams);\r\n    };\r\n    RepoInfo.prototype.isCacheableHost = function () {\r\n        return this.internalHost.substr(0, 2) === 's-';\r\n    };\r\n    RepoInfo.prototype.isDemoHost = function () {\r\n        return this.domain === 'firebaseio-demo.com';\r\n    };\r\n    RepoInfo.prototype.isCustomHost = function () {\r\n        return (this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com');\r\n    };\r\n    RepoInfo.prototype.updateHost = function (newHost) {\r\n        if (newHost !== this.internalHost) {\r\n            this.internalHost = newHost;\r\n            if (this.isCacheableHost()) {\r\n                PersistentStorage.set('host:' + this.host, this.internalHost);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns the websocket URL for this repo\r\n     * @param {string} type of connection\r\n     * @param {Object} params list\r\n     * @return {string} The URL for this repo\r\n     */\r\n    RepoInfo.prototype.connectionURL = function (type, params) {\r\n        util.assert(typeof type === 'string', 'typeof type must == string');\r\n        util.assert(typeof params === 'object', 'typeof params must == object');\r\n        var connURL;\r\n        if (type === WEBSOCKET) {\r\n            connURL =\r\n                (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';\r\n        }\r\n        else if (type === LONG_POLLING) {\r\n            connURL =\r\n                (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';\r\n        }\r\n        else {\r\n            throw new Error('Unknown connection type: ' + type);\r\n        }\r\n        if (this.needsQueryParam()) {\r\n            params['ns'] = this.namespace;\r\n        }\r\n        var pairs = [];\r\n        each(params, function (key, value) {\r\n            pairs.push(key + '=' + value);\r\n        });\r\n        return connURL + pairs.join('&');\r\n    };\r\n    /** @return {string} */\r\n    RepoInfo.prototype.toString = function () {\r\n        var str = this.toURLString();\r\n        if (this.persistenceKey) {\r\n            str += '<' + this.persistenceKey + '>';\r\n        }\r\n        return str;\r\n    };\r\n    /** @return {string} */\r\n    RepoInfo.prototype.toURLString = function () {\r\n        return (this.secure ? 'https://' : 'http://') + this.host;\r\n    };\r\n    return RepoInfo;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!string} pathString\r\n * @return {string}\r\n */\r\nfunction decodePath(pathString) {\r\n    var pathStringDecoded = '';\r\n    var pieces = pathString.split('/');\r\n    for (var i = 0; i < pieces.length; i++) {\r\n        if (pieces[i].length > 0) {\r\n            var piece = pieces[i];\r\n            try {\r\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\r\n            }\r\n            catch (e) { }\r\n            pathStringDecoded += '/' + piece;\r\n        }\r\n    }\r\n    return pathStringDecoded;\r\n}\r\n/**\r\n * @param {!string} queryString\r\n * @return {!{[key:string]:string}} key value hash\r\n */\r\nfunction decodeQuery(queryString) {\r\n    var e_1, _a;\r\n    var results = {};\r\n    if (queryString.charAt(0) === '?') {\r\n        queryString = queryString.substring(1);\r\n    }\r\n    try {\r\n        for (var _b = tslib.__values(queryString.split('&')), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n            var segment = _c.value;\r\n            if (segment.length === 0) {\r\n                continue;\r\n            }\r\n            var kv = segment.split('=');\r\n            if (kv.length === 2) {\r\n                results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\r\n            }\r\n            else {\r\n                warn(\"Invalid query segment '\" + segment + \"' in query '\" + queryString + \"'\");\r\n            }\r\n        }\r\n    }\r\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n    finally {\r\n        try {\r\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n        }\r\n        finally { if (e_1) throw e_1.error; }\r\n    }\r\n    return results;\r\n}\r\nvar parseRepoInfo = function (dataURL, nodeAdmin) {\r\n    var parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;\r\n    if (parsedUrl.domain === 'firebase.com') {\r\n        fatal(parsedUrl.host +\r\n            ' is no longer supported. ' +\r\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\r\n    }\r\n    // Catch common error of uninitialized namespace value.\r\n    if ((!namespace || namespace === 'undefined') &&\r\n        parsedUrl.domain !== 'localhost') {\r\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\r\n    }\r\n    if (!parsedUrl.secure) {\r\n        warnIfPageIsSecure();\r\n    }\r\n    var webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\r\n    return {\r\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, nodeAdmin, webSocketOnly, \r\n        /*persistenceKey=*/ '', \r\n        /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),\r\n        path: new Path(parsedUrl.pathString)\r\n    };\r\n};\r\n/**\r\n *\r\n * @param {!string} dataURL\r\n * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string, namespace: string}}\r\n */\r\nvar parseDatabaseURL = function (dataURL) {\r\n    // Default to empty strings in the event of a malformed string.\r\n    var host = '', domain = '', subdomain = '', pathString = '', namespace = '';\r\n    // Always default to SSL, unless otherwise specified.\r\n    var secure = true, scheme = 'https', port = 443;\r\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\r\n    if (typeof dataURL === 'string') {\r\n        // Parse scheme.\r\n        var colonInd = dataURL.indexOf('//');\r\n        if (colonInd >= 0) {\r\n            scheme = dataURL.substring(0, colonInd - 1);\r\n            dataURL = dataURL.substring(colonInd + 2);\r\n        }\r\n        // Parse host, path, and query string.\r\n        var slashInd = dataURL.indexOf('/');\r\n        if (slashInd === -1) {\r\n            slashInd = dataURL.length;\r\n        }\r\n        var questionMarkInd = dataURL.indexOf('?');\r\n        if (questionMarkInd === -1) {\r\n            questionMarkInd = dataURL.length;\r\n        }\r\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\r\n        if (slashInd < questionMarkInd) {\r\n            // For pathString, questionMarkInd will always come after slashInd\r\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\r\n        }\r\n        var queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\r\n        // If we have a port, use scheme for determining if it's secure.\r\n        colonInd = host.indexOf(':');\r\n        if (colonInd >= 0) {\r\n            secure = scheme === 'https' || scheme === 'wss';\r\n            port = parseInt(host.substring(colonInd + 1), 10);\r\n        }\r\n        else {\r\n            colonInd = host.length;\r\n        }\r\n        var hostWithoutPort = host.slice(0, colonInd);\r\n        if (hostWithoutPort.toLowerCase() === 'localhost') {\r\n            domain = 'localhost';\r\n        }\r\n        else if (hostWithoutPort.split('.').length <= 2) {\r\n            domain = hostWithoutPort;\r\n        }\r\n        else {\r\n            // Interpret the subdomain of a 3 or more component URL as the namespace name.\r\n            var dotInd = host.indexOf('.');\r\n            subdomain = host.substring(0, dotInd).toLowerCase();\r\n            domain = host.substring(dotInd + 1);\r\n            // Normalize namespaces to lowercase to share storage / connection.\r\n            namespace = subdomain;\r\n        }\r\n        // Always treat the value of the `ns` as the namespace name if it is present.\r\n        if ('ns' in queryParams) {\r\n            namespace = queryParams['ns'];\r\n        }\r\n    }\r\n    return {\r\n        host: host,\r\n        port: port,\r\n        domain: domain,\r\n        subdomain: subdomain,\r\n        secure: secure,\r\n        scheme: scheme,\r\n        pathString: pathString,\r\n        namespace: namespace\r\n    };\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * True for invalid Firebase keys\r\n * @type {RegExp}\r\n * @private\r\n */\r\nvar INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n * @type {RegExp}\r\n * @private\r\n */\r\nvar INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * Maximum number of characters to allow in leaf value\r\n * @type {number}\r\n * @private\r\n */\r\nvar MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\r\n/**\r\n * @param {*} key\r\n * @return {boolean}\r\n */\r\nvar isValidKey = function (key) {\r\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\r\n};\r\n/**\r\n * @param {string} pathString\r\n * @return {boolean}\r\n */\r\nvar isValidPathString = function (pathString) {\r\n    return (typeof pathString === 'string' &&\r\n        pathString.length !== 0 &&\r\n        !INVALID_PATH_REGEX_.test(pathString));\r\n};\r\n/**\r\n * @param {string} pathString\r\n * @return {boolean}\r\n */\r\nvar isValidRootPathString = function (pathString) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    return isValidPathString(pathString);\r\n};\r\n/**\r\n * @param {*} priority\r\n * @return {boolean}\r\n */\r\nvar isValidPriority = function (priority) {\r\n    return (priority === null ||\r\n        typeof priority === 'string' ||\r\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\r\n        (priority &&\r\n            typeof priority === 'object' &&\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            util.contains(priority, '.sv')));\r\n};\r\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n *\r\n * @param {string} fnName\r\n * @param {number} argumentNumber\r\n * @param {*} data\r\n * @param {!Path} path\r\n * @param {boolean} optional\r\n */\r\nvar validateFirebaseDataArg = function (fnName, argumentNumber, data, path, optional) {\r\n    if (optional && data === undefined) {\r\n        return;\r\n    }\r\n    validateFirebaseData(util.errorPrefix(fnName, argumentNumber, optional), data, path);\r\n};\r\n/**\r\n * Validate a data object client-side before sending to server.\r\n *\r\n * @param {string} errorPrefix\r\n * @param {*} data\r\n * @param {!Path|!ValidationPath} path_\r\n */\r\nvar validateFirebaseData = function (errorPrefix, data, path_) {\r\n    var path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\r\n    if (data === undefined) {\r\n        throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());\r\n    }\r\n    if (typeof data === 'function') {\r\n        throw new Error(errorPrefix +\r\n            'contains a function ' +\r\n            path.toErrorString() +\r\n            ' with contents = ' +\r\n            data.toString());\r\n    }\r\n    if (isInvalidJSONNumber(data)) {\r\n        throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString());\r\n    }\r\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\r\n    if (typeof data === 'string' &&\r\n        data.length > MAX_LEAF_SIZE_ / 3 &&\r\n        util.stringLength(data) > MAX_LEAF_SIZE_) {\r\n        throw new Error(errorPrefix +\r\n            'contains a string greater than ' +\r\n            MAX_LEAF_SIZE_ +\r\n            ' utf8 bytes ' +\r\n            path.toErrorString() +\r\n            \" ('\" +\r\n            data.substring(0, 50) +\r\n            \"...')\");\r\n    }\r\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\r\n    // to save extra walking of large objects.\r\n    if (data && typeof data === 'object') {\r\n        var hasDotValue_1 = false;\r\n        var hasActualChild_1 = false;\r\n        each(data, function (key, value) {\r\n            if (key === '.value') {\r\n                hasDotValue_1 = true;\r\n            }\r\n            else if (key !== '.priority' && key !== '.sv') {\r\n                hasActualChild_1 = true;\r\n                if (!isValidKey(key)) {\r\n                    throw new Error(errorPrefix +\r\n                        ' contains an invalid key (' +\r\n                        key +\r\n                        ') ' +\r\n                        path.toErrorString() +\r\n                        '.  Keys must be non-empty strings ' +\r\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n                }\r\n            }\r\n            path.push(key);\r\n            validateFirebaseData(errorPrefix, value, path);\r\n            path.pop();\r\n        });\r\n        if (hasDotValue_1 && hasActualChild_1) {\r\n            throw new Error(errorPrefix +\r\n                ' contains \".value\" child ' +\r\n                path.toErrorString() +\r\n                ' in addition to actual children.');\r\n        }\r\n    }\r\n};\r\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n *\r\n * @param {string} errorPrefix\r\n * @param {Array<!Path>} mergePaths\r\n */\r\nvar validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\r\n    var i, curPath;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        var keys = curPath.slice();\r\n        for (var j = 0; j < keys.length; j++) {\r\n            if (keys[j] === '.priority' && j === keys.length - 1) ;\r\n            else if (!isValidKey(keys[j])) {\r\n                throw new Error(errorPrefix +\r\n                    'contains an invalid key (' +\r\n                    keys[j] +\r\n                    ') in path ' +\r\n                    curPath.toString() +\r\n                    '. Keys must be non-empty strings ' +\r\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n            }\r\n        }\r\n    }\r\n    // Check that update keys are not descendants of each other.\r\n    // We rely on the property that sorting guarantees that ancestors come\r\n    // right before descendants.\r\n    mergePaths.sort(Path.comparePaths);\r\n    var prevPath = null;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        if (prevPath !== null && prevPath.contains(curPath)) {\r\n            throw new Error(errorPrefix +\r\n                'contains a path ' +\r\n                prevPath.toString() +\r\n                ' that is ancestor of another path ' +\r\n                curPath.toString());\r\n        }\r\n        prevPath = curPath;\r\n    }\r\n};\r\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n *\r\n * @param {string} fnName\r\n * @param {number} argumentNumber\r\n * @param {*} data\r\n * @param {!Path} path\r\n * @param {boolean} optional\r\n */\r\nvar validateFirebaseMergeDataArg = function (fnName, argumentNumber, data, path, optional) {\r\n    if (optional && data === undefined) {\r\n        return;\r\n    }\r\n    var errorPrefix = util.errorPrefix(fnName, argumentNumber, optional);\r\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\r\n        throw new Error(errorPrefix + ' must be an object containing the children to replace.');\r\n    }\r\n    var mergePaths = [];\r\n    each(data, function (key, value) {\r\n        var curPath = new Path(key);\r\n        validateFirebaseData(errorPrefix, value, path.child(curPath));\r\n        if (curPath.getBack() === '.priority') {\r\n            if (!isValidPriority(value)) {\r\n                throw new Error(errorPrefix +\r\n                    \"contains an invalid value for '\" +\r\n                    curPath.toString() +\r\n                    \"', which must be a valid \" +\r\n                    'Firebase priority (a string, finite number, server value, or null).');\r\n            }\r\n        }\r\n        mergePaths.push(curPath);\r\n    });\r\n    validateFirebaseMergePaths(errorPrefix, mergePaths);\r\n};\r\nvar validatePriority = function (fnName, argumentNumber, priority, optional) {\r\n    if (optional && priority === undefined) {\r\n        return;\r\n    }\r\n    if (isInvalidJSONNumber(priority)) {\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'is ' +\r\n            priority.toString() +\r\n            ', but must be a valid Firebase priority (a string, finite number, ' +\r\n            'server value, or null).');\r\n    }\r\n    // Special case to allow importing data with a .sv.\r\n    if (!isValidPriority(priority)) {\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'must be a valid Firebase priority ' +\r\n            '(a string, finite number, server value, or null).');\r\n    }\r\n};\r\nvar validateEventType = function (fnName, argumentNumber, eventType, optional) {\r\n    if (optional && eventType === undefined) {\r\n        return;\r\n    }\r\n    switch (eventType) {\r\n        case 'value':\r\n        case 'child_added':\r\n        case 'child_removed':\r\n        case 'child_changed':\r\n        case 'child_moved':\r\n            break;\r\n        default:\r\n            throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n                'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\r\n                '\"child_changed\", or \"child_moved\".');\r\n    }\r\n};\r\nvar validateKey = function (fnName, argumentNumber, key, optional) {\r\n    if (optional && key === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidKey(key)) {\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'was an invalid key = \"' +\r\n            key +\r\n            '\".  Firebase keys must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\r\n    }\r\n};\r\nvar validatePathString = function (fnName, argumentNumber, pathString, optional) {\r\n    if (optional && pathString === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidPathString(pathString)) {\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'was an invalid path = \"' +\r\n            pathString +\r\n            '\". Paths must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\r\n    }\r\n};\r\nvar validateRootPathString = function (fnName, argumentNumber, pathString, optional) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    validatePathString(fnName, argumentNumber, pathString, optional);\r\n};\r\nvar validateWritablePath = function (fnName, path) {\r\n    if (path.getFront() === '.info') {\r\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\r\n    }\r\n};\r\nvar validateUrl = function (fnName, argumentNumber, parsedUrl) {\r\n    // TODO = Validate server better.\r\n    var pathString = parsedUrl.path.toString();\r\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\r\n        parsedUrl.repoInfo.host.length === 0 ||\r\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\r\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\r\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, false) +\r\n            'must be a valid firebase URL and ' +\r\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\r\n    }\r\n};\r\nvar validateBoolean = function (fnName, argumentNumber, bool, optional) {\r\n    if (optional && bool === undefined) {\r\n        return;\r\n    }\r\n    if (typeof bool !== 'boolean') {\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'must be a boolean.');\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n */\r\nvar OnDisconnect = /** @class */ (function () {\r\n    /**\r\n     * @param {!Repo} repo_\r\n     * @param {!Path} path_\r\n     */\r\n    function OnDisconnect(repo_, path_) {\r\n        this.repo_ = repo_;\r\n        this.path_ = path_;\r\n    }\r\n    /**\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.cancel = function (onComplete) {\r\n        util.validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\r\n        util.validateCallback('OnDisconnect.cancel', 1, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectCancel(this.path_, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.remove = function (onComplete) {\r\n        util.validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\r\n        validateWritablePath('OnDisconnect.remove', this.path_);\r\n        util.validateCallback('OnDisconnect.remove', 1, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectSet(this.path_, null, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*} value\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.set = function (value, onComplete) {\r\n        util.validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\r\n        validateWritablePath('OnDisconnect.set', this.path_);\r\n        validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\r\n        util.validateCallback('OnDisconnect.set', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectSet(this.path_, value, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*} value\r\n     * @param {number|string|null} priority\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.setWithPriority = function (value, priority, onComplete) {\r\n        util.validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\r\n        validateWritablePath('OnDisconnect.setWithPriority', this.path_);\r\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', 1, value, this.path_, false);\r\n        validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\r\n        util.validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectSetWithPriority(this.path_, value, priority, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {!Object} objectToMerge\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.update = function (objectToMerge, onComplete) {\r\n        util.validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\r\n        validateWritablePath('OnDisconnect.update', this.path_);\r\n        if (Array.isArray(objectToMerge)) {\r\n            var newObjectToMerge = {};\r\n            for (var i = 0; i < objectToMerge.length; ++i) {\r\n                newObjectToMerge['' + i] = objectToMerge[i];\r\n            }\r\n            objectToMerge = newObjectToMerge;\r\n            warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\r\n                'existing data, or an Object with integer keys if you really do want to only update some of the children.');\r\n        }\r\n        validateFirebaseMergeDataArg('OnDisconnect.update', 1, objectToMerge, this.path_, false);\r\n        util.validateCallback('OnDisconnect.update', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectUpdate(this.path_, objectToMerge, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    return OnDisconnect;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar TransactionResult = /** @class */ (function () {\r\n    /**\r\n     * A type for the resolve value of Firebase.transaction.\r\n     * @constructor\r\n     * @dict\r\n     * @param {boolean} committed\r\n     * @param {DataSnapshot} snapshot\r\n     */\r\n    function TransactionResult(committed, snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users\r\n    TransactionResult.prototype.toJSON = function () {\r\n        util.validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    };\r\n    return TransactionResult;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\r\nvar nextPushId = (function () {\r\n    // Modeled after base64 web-safe chars, but ordered by ASCII.\r\n    var PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\n    // Timestamp of last push, used to prevent local collisions if you push twice\r\n    // in one ms.\r\n    var lastPushTime = 0;\r\n    // We generate 72-bits of randomness which get turned into 12 characters and\r\n    // appended to the timestamp to prevent collisions with other clients. We\r\n    // store the last characters we generated because in the event of a collision,\r\n    // we'll use those same characters except \"incremented\" by one.\r\n    var lastRandChars = [];\r\n    return function (now) {\r\n        var duplicateTime = now === lastPushTime;\r\n        lastPushTime = now;\r\n        var i;\r\n        var timeStampChars = new Array(8);\r\n        for (i = 7; i >= 0; i--) {\r\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n            // NOTE: Can't use << here because javascript will convert to int and lose\r\n            // the upper bits.\r\n            now = Math.floor(now / 64);\r\n        }\r\n        util.assert(now === 0, 'Cannot push at time == 0');\r\n        var id = timeStampChars.join('');\r\n        if (!duplicateTime) {\r\n            for (i = 0; i < 12; i++) {\r\n                lastRandChars[i] = Math.floor(Math.random() * 64);\r\n            }\r\n        }\r\n        else {\r\n            // If the timestamp hasn't changed since last push, use the same random\r\n            // number, except incremented by 1.\r\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\r\n                lastRandChars[i] = 0;\r\n            }\r\n            lastRandChars[i]++;\r\n        }\r\n        for (i = 0; i < 12; i++) {\r\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n        }\r\n        util.assert(id.length === 20, 'nextPushId: Length should be 20.');\r\n        return id;\r\n    };\r\n})();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @param {!string} name\r\n * @param {!Node} node\r\n * @constructor\r\n * @struct\r\n */\r\nvar NamedNode = /** @class */ (function () {\r\n    function NamedNode(name, node) {\r\n        this.name = name;\r\n        this.node = node;\r\n    }\r\n    /**\r\n     *\r\n     * @param {!string} name\r\n     * @param {!Node} node\r\n     * @return {NamedNode}\r\n     */\r\n    NamedNode.Wrap = function (name, node) {\r\n        return new NamedNode(name, node);\r\n    };\r\n    return NamedNode;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @constructor\r\n */\r\nvar Index = /** @class */ (function () {\r\n    function Index() {\r\n    }\r\n    /**\r\n     * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for\r\n     * this index\r\n     */\r\n    Index.prototype.getCompare = function () {\r\n        return this.compare.bind(this);\r\n    };\r\n    /**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     * @param {!Node} oldNode\r\n     * @param {!Node} newNode\r\n     * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */\r\n    Index.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        var oldWrapped = new NamedNode(MIN_NAME, oldNode);\r\n        var newWrapped = new NamedNode(MIN_NAME, newNode);\r\n        return this.compare(oldWrapped, newWrapped) !== 0;\r\n    };\r\n    /**\r\n     * @return {!NamedNode} a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */\r\n    Index.prototype.minPost = function () {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    };\r\n    return Index;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __EMPTY_NODE;\r\nvar KeyIndex = /** @class */ (function (_super) {\r\n    tslib.__extends(KeyIndex, _super);\r\n    function KeyIndex() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Object.defineProperty(KeyIndex, \"__EMPTY_NODE\", {\r\n        get: function () {\r\n            return __EMPTY_NODE;\r\n        },\r\n        set: function (val) {\r\n            __EMPTY_NODE = val;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.compare = function (a, b) {\r\n        return nameCompare(a.name, b.name);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.isDefinedOn = function (node) {\r\n        // We could probably return true here (since every node has a key), but it's never called\r\n        // so just leaving unimplemented for now.\r\n        throw util.assertionError('KeyIndex.isDefinedOn not expected to be called.');\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        return false; // The key for a node never changes.\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.minPost = function () {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.maxPost = function () {\r\n        // TODO: This should really be created once and cached in a static property, but\r\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\r\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {string} name\r\n     * @return {!NamedNode}\r\n     */\r\n    KeyIndex.prototype.makePost = function (indexValue, name) {\r\n        util.assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\r\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\r\n        return new NamedNode(indexValue, __EMPTY_NODE);\r\n    };\r\n    /**\r\n     * @return {!string} String representation for inclusion in a query spec\r\n     */\r\n    KeyIndex.prototype.toString = function () {\r\n        return '.key';\r\n    };\r\n    return KeyIndex;\r\n}(Index));\r\nvar KEY_INDEX = new KeyIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar MAX_NODE;\r\nfunction setMaxNode(val) {\r\n    MAX_NODE = val;\r\n}\r\n/**\r\n * @param {(!string|!number)} priority\r\n * @return {!string}\r\n */\r\nvar priorityHashText = function (priority) {\r\n    if (typeof priority === 'number') {\r\n        return 'number:' + doubleToIEEE754String(priority);\r\n    }\r\n    else {\r\n        return 'string:' + priority;\r\n    }\r\n};\r\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n *\r\n * @param {!Node} priorityNode\r\n */\r\nvar validatePriorityNode = function (priorityNode) {\r\n    if (priorityNode.isLeafNode()) {\r\n        var val = priorityNode.val();\r\n        util.assert(typeof val === 'string' ||\r\n            typeof val === 'number' ||\r\n            (typeof val === 'object' && util.contains(val, '.sv')), 'Priority must be a string or number.');\r\n    }\r\n    else {\r\n        util.assert(priorityNode === MAX_NODE || priorityNode.isEmpty(), 'priority of unexpected type.');\r\n    }\r\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\r\n    util.assert(priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __childrenNodeConstructor;\r\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\r\nvar LeafNode = /** @class */ (function () {\r\n    /**\r\n     * @implements {Node}\r\n     * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.\r\n     *                                         The object type is possible in the event of a deferred value\r\n     * @param {!Node=} priorityNode_ The priority of this node.\r\n     */\r\n    function LeafNode(value_, priorityNode_) {\r\n        if (priorityNode_ === void 0) { priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE; }\r\n        this.value_ = value_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.lazyHash_ = null;\r\n        util.assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\r\n        validatePriorityNode(this.priorityNode_);\r\n    }\r\n    Object.defineProperty(LeafNode, \"__childrenNodeConstructor\", {\r\n        get: function () {\r\n            return __childrenNodeConstructor;\r\n        },\r\n        set: function (val) {\r\n            __childrenNodeConstructor = val;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.isLeafNode = function () {\r\n        return true;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getPriority = function () {\r\n        return this.priorityNode_;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.updatePriority = function (newPriorityNode) {\r\n        return new LeafNode(this.value_, newPriorityNode);\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getImmediateChild = function (childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getChild = function (path) {\r\n        if (path.isEmpty()) {\r\n            return this;\r\n        }\r\n        else if (path.getFront() === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.hasChild = function () {\r\n        return false;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getPredecessorChildName = function (childName, childNode) {\r\n        return null;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.updateImmediateChild = function (childName, newChildNode) {\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.updateChild = function (path, newChildNode) {\r\n        var front = path.getFront();\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else if (newChildNode.isEmpty() && front !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            util.assert(front !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\r\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(path.popFront(), newChildNode));\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.isEmpty = function () {\r\n        return false;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.numChildren = function () {\r\n        return 0;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.forEachChild = function (index, action) {\r\n        return false;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.val = function (exportFormat) {\r\n        if (exportFormat && !this.getPriority().isEmpty()) {\r\n            return {\r\n                '.value': this.getValue(),\r\n                '.priority': this.getPriority().val()\r\n            };\r\n        }\r\n        else {\r\n            return this.getValue();\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.hash = function () {\r\n        if (this.lazyHash_ === null) {\r\n            var toHash = '';\r\n            if (!this.priorityNode_.isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.priorityNode_.val()) +\r\n                        ':';\r\n            }\r\n            var type = typeof this.value_;\r\n            toHash += type + ':';\r\n            if (type === 'number') {\r\n                toHash += doubleToIEEE754String(this.value_);\r\n            }\r\n            else {\r\n                toHash += this.value_;\r\n            }\r\n            this.lazyHash_ = sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    };\r\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @return {Object|string|number|boolean} The value of the node.\r\n     */\r\n    LeafNode.prototype.getValue = function () {\r\n        return this.value_;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.compareTo = function (other) {\r\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n            return 1;\r\n        }\r\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\r\n            return -1;\r\n        }\r\n        else {\r\n            util.assert(other.isLeafNode(), 'Unknown node type');\r\n            return this.compareToLeafNode_(other);\r\n        }\r\n    };\r\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     * @param {!LeafNode} otherLeaf\r\n     * @return {!number}\r\n     * @private\r\n     */\r\n    LeafNode.prototype.compareToLeafNode_ = function (otherLeaf) {\r\n        var otherLeafType = typeof otherLeaf.value_;\r\n        var thisLeafType = typeof this.value_;\r\n        var otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\r\n        var thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\r\n        util.assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\r\n        util.assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\r\n        if (otherIndex === thisIndex) {\r\n            // Same type, compare values\r\n            if (thisLeafType === 'object') {\r\n                // Deferred value nodes are all equal, but we should also never get to this point...\r\n                return 0;\r\n            }\r\n            else {\r\n                // Note that this works because true > false, all others are number or string comparisons\r\n                if (this.value_ < otherLeaf.value_) {\r\n                    return -1;\r\n                }\r\n                else if (this.value_ === otherLeaf.value_) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return thisIndex - otherIndex;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.withIndex = function () {\r\n        return this;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.isIndexed = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.equals = function (other) {\r\n        /**\r\n         * @inheritDoc\r\n         */\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            var otherLeaf = other;\r\n            return (this.value_ === otherLeaf.value_ &&\r\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n     * the same type, the comparison falls back to their value\r\n     * @type {Array.<!string>}\r\n     * @const\r\n     */\r\n    LeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\r\n    return LeafNode;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar nodeFromJSON;\r\nvar MAX_NODE$1;\r\nfunction setNodeFromJSON(val) {\r\n    nodeFromJSON = val;\r\n}\r\nfunction setMaxNode$1(val) {\r\n    MAX_NODE$1 = val;\r\n}\r\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\r\nvar PriorityIndex = /** @class */ (function (_super) {\r\n    tslib.__extends(PriorityIndex, _super);\r\n    function PriorityIndex() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.compare = function (a, b) {\r\n        var aPriority = a.node.getPriority();\r\n        var bPriority = b.node.getPriority();\r\n        var indexCmp = aPriority.compareTo(bPriority);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.isDefinedOn = function (node) {\r\n        return !node.getPriority().isEmpty();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        return !oldNode.getPriority().equals(newNode.getPriority());\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.minPost = function () {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.maxPost = function () {\r\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {string} name\r\n     * @return {!NamedNode}\r\n     */\r\n    PriorityIndex.prototype.makePost = function (indexValue, name) {\r\n        var priorityNode = nodeFromJSON(indexValue);\r\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\r\n    };\r\n    /**\r\n     * @return {!string} String representation for inclusion in a query spec\r\n     */\r\n    PriorityIndex.prototype.toString = function () {\r\n        return '.priority';\r\n    };\r\n    return PriorityIndex;\r\n}(Index));\r\nvar PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An iterator over an LLRBNode.\r\n */\r\nvar SortedMapIterator = /** @class */ (function () {\r\n    /**\r\n     * @template K, V, T\r\n     * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.\r\n     * @param {?K} startKey\r\n     * @param {function(K, K): number} comparator\r\n     * @param {boolean} isReverse_ Whether or not to iterate in reverse\r\n     * @param {(function(K, V):T)=} resultGenerator_\r\n     */\r\n    function SortedMapIterator(node, startKey, comparator, isReverse_, resultGenerator_) {\r\n        if (resultGenerator_ === void 0) { resultGenerator_ = null; }\r\n        this.isReverse_ = isReverse_;\r\n        this.resultGenerator_ = resultGenerator_;\r\n        /** @private\r\n         * @type {Array.<!LLRBNode>}\r\n         */\r\n        this.nodeStack_ = [];\r\n        var cmp = 1;\r\n        while (!node.isEmpty()) {\r\n            node = node;\r\n            cmp = startKey ? comparator(node.key, startKey) : 1;\r\n            // flip the comparison if we're going in reverse\r\n            if (isReverse_) {\r\n                cmp *= -1;\r\n            }\r\n            if (cmp < 0) {\r\n                // This node is less than our start key. ignore it\r\n                if (this.isReverse_) {\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = node.right;\r\n                }\r\n            }\r\n            else if (cmp === 0) {\r\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\r\n                this.nodeStack_.push(node);\r\n                break;\r\n            }\r\n            else {\r\n                // This node is greater than our start key, add it to the stack and move to the next one\r\n                this.nodeStack_.push(node);\r\n                if (this.isReverse_) {\r\n                    node = node.right;\r\n                }\r\n                else {\r\n                    node = node.left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    SortedMapIterator.prototype.getNext = function () {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        var node = this.nodeStack_.pop();\r\n        var result;\r\n        if (this.resultGenerator_) {\r\n            result = this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            result = { key: node.key, value: node.value };\r\n        }\r\n        if (this.isReverse_) {\r\n            node = node.left;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.right;\r\n            }\r\n        }\r\n        else {\r\n            node = node.right;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.left;\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    SortedMapIterator.prototype.hasNext = function () {\r\n        return this.nodeStack_.length > 0;\r\n    };\r\n    SortedMapIterator.prototype.peek = function () {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        var node = this.nodeStack_[this.nodeStack_.length - 1];\r\n        if (this.resultGenerator_) {\r\n            return this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            return { key: node.key, value: node.value };\r\n        }\r\n    };\r\n    return SortedMapIterator;\r\n}());\r\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\r\nvar LLRBNode = /** @class */ (function () {\r\n    /**\r\n     * @template K, V\r\n     * @param {!K} key Key associated with this node.\r\n     * @param {!V} value Value associated with this node.\r\n     * @param {?boolean} color Whether this node is red.\r\n     * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.\r\n     * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.\r\n     */\r\n    function LLRBNode(key, value, color, left, right) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.color = color != null ? color : LLRBNode.RED;\r\n        this.left =\r\n            left != null ? left : SortedMap.EMPTY_NODE;\r\n        this.right =\r\n            right != null ? right : SortedMap.EMPTY_NODE;\r\n    }\r\n    /**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param {?K} key New key for the node, or null.\r\n     * @param {?V} value New value for the node, or null.\r\n     * @param {?boolean} color New color for the node, or null.\r\n     * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.\r\n     * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.\r\n     * @return {!LLRBNode} The node copy.\r\n     */\r\n    LLRBNode.prototype.copy = function (key, value, color, left, right) {\r\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\r\n    };\r\n    /**\r\n     * @return {number} The total number of nodes in the tree.\r\n     */\r\n    LLRBNode.prototype.count = function () {\r\n        return this.left.count() + 1 + this.right.count();\r\n    };\r\n    /**\r\n     * @return {boolean} True if the tree is empty.\r\n     */\r\n    LLRBNode.prototype.isEmpty = function () {\r\n        return false;\r\n    };\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!K, !V):*} action Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @return {*} The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    LLRBNode.prototype.inorderTraversal = function (action) {\r\n        return (this.left.inorderTraversal(action) ||\r\n            !!action(this.key, this.value) ||\r\n            this.right.inorderTraversal(action));\r\n    };\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!Object, !Object)} action Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @return {*} True if traversal was aborted.\r\n     */\r\n    LLRBNode.prototype.reverseTraversal = function (action) {\r\n        return (this.right.reverseTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.left.reverseTraversal(action));\r\n    };\r\n    /**\r\n     * @return {!Object} The minimum node in the tree.\r\n     * @private\r\n     */\r\n    LLRBNode.prototype.min_ = function () {\r\n        if (this.left.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.left.min_();\r\n        }\r\n    };\r\n    /**\r\n     * @return {!K} The maximum key in the tree.\r\n     */\r\n    LLRBNode.prototype.minKey = function () {\r\n        return this.min_().key;\r\n    };\r\n    /**\r\n     * @return {!K} The maximum key in the tree.\r\n     */\r\n    LLRBNode.prototype.maxKey = function () {\r\n        if (this.right.isEmpty()) {\r\n            return this.key;\r\n        }\r\n        else {\r\n            return this.right.maxKey();\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Object} key Key to insert.\r\n     * @param {!Object} value Value to insert.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBNode} New tree, with the key/value added.\r\n     */\r\n    LLRBNode.prototype.insert = function (key, value, comparator) {\r\n        var n = this;\r\n        var cmp = comparator(key, n.key);\r\n        if (cmp < 0) {\r\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\r\n        }\r\n        else if (cmp === 0) {\r\n            n = n.copy(null, value, null, null, null);\r\n        }\r\n        else {\r\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.\r\n     */\r\n    LLRBNode.prototype.removeMin_ = function () {\r\n        if (this.left.isEmpty()) {\r\n            return SortedMap.EMPTY_NODE;\r\n        }\r\n        var n = this;\r\n        if (!n.left.isRed_() && !n.left.left.isRed_()) {\r\n            n = n.moveRedLeft_();\r\n        }\r\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\r\n        return n.fixUp_();\r\n    };\r\n    /**\r\n     * @param {!Object} key The key of the item to remove.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.\r\n     */\r\n    LLRBNode.prototype.remove = function (key, comparator) {\r\n        var n, smallest;\r\n        n = this;\r\n        if (comparator(key, n.key) < 0) {\r\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\r\n                n = n.moveRedLeft_();\r\n            }\r\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\r\n        }\r\n        else {\r\n            if (n.left.isRed_()) {\r\n                n = n.rotateRight_();\r\n            }\r\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\r\n                n = n.moveRedRight_();\r\n            }\r\n            if (comparator(key, n.key) === 0) {\r\n                if (n.right.isEmpty()) {\r\n                    return SortedMap.EMPTY_NODE;\r\n                }\r\n                else {\r\n                    smallest = n.right.min_();\r\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\r\n                }\r\n            }\r\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {boolean} Whether this is a RED node.\r\n     */\r\n    LLRBNode.prototype.isRed_ = function () {\r\n        return this.color;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree after performing any needed rotations.\r\n     */\r\n    LLRBNode.prototype.fixUp_ = function () {\r\n        var n = this;\r\n        if (n.right.isRed_() && !n.left.isRed_()) {\r\n            n = n.rotateLeft_();\r\n        }\r\n        if (n.left.isRed_() && n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n        }\r\n        if (n.left.isRed_() && n.right.isRed_()) {\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after moveRedLeft.\r\n     */\r\n    LLRBNode.prototype.moveRedLeft_ = function () {\r\n        var n = this.colorFlip_();\r\n        if (n.right.left.isRed_()) {\r\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\r\n            n = n.rotateLeft_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after moveRedRight.\r\n     */\r\n    LLRBNode.prototype.moveRedRight_ = function () {\r\n        var n = this.colorFlip_();\r\n        if (n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after rotateLeft.\r\n     */\r\n    LLRBNode.prototype.rotateLeft_ = function () {\r\n        var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\r\n        return this.right.copy(null, null, this.color, nl, null);\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after rotateRight.\r\n     */\r\n    LLRBNode.prototype.rotateRight_ = function () {\r\n        var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\r\n        return this.left.copy(null, null, this.color, null, nr);\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after colorFlip.\r\n     */\r\n    LLRBNode.prototype.colorFlip_ = function () {\r\n        var left = this.left.copy(null, null, !this.left.color, null, null);\r\n        var right = this.right.copy(null, null, !this.right.color, null, null);\r\n        return this.copy(null, null, !this.color, left, right);\r\n    };\r\n    /**\r\n     * For testing.\r\n     *\r\n     * @private\r\n     * @return {boolean} True if all is well.\r\n     */\r\n    LLRBNode.prototype.checkMaxDepth_ = function () {\r\n        var blackDepth = this.check_();\r\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {number} Not sure what this returns exactly. :-).\r\n     */\r\n    LLRBNode.prototype.check_ = function () {\r\n        if (this.isRed_() && this.left.isRed_()) {\r\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\r\n        }\r\n        if (this.right.isRed_()) {\r\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\r\n        }\r\n        var blackDepth = this.left.check_();\r\n        if (blackDepth !== this.right.check_()) {\r\n            throw new Error('Black depths differ');\r\n        }\r\n        else {\r\n            return blackDepth + (this.isRed_() ? 0 : 1);\r\n        }\r\n    };\r\n    LLRBNode.RED = true;\r\n    LLRBNode.BLACK = false;\r\n    return LLRBNode;\r\n}());\r\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\r\nvar LLRBEmptyNode = /** @class */ (function () {\r\n    function LLRBEmptyNode() {\r\n    }\r\n    /**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @return {!LLRBEmptyNode} The node copy.\r\n     */\r\n    LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {\r\n        return this;\r\n    };\r\n    /**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param {!K} key Key to be added.\r\n     * @param {!V} value Value to be added.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBNode} New tree, with item added.\r\n     */\r\n    LLRBEmptyNode.prototype.insert = function (key, value, comparator) {\r\n        return new LLRBNode(key, value, null);\r\n    };\r\n    /**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param {!K} key The key to remove.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBEmptyNode} New tree, with item removed.\r\n     */\r\n    LLRBEmptyNode.prototype.remove = function (key, comparator) {\r\n        return this;\r\n    };\r\n    /**\r\n     * @return {number} The total number of nodes in the tree.\r\n     */\r\n    LLRBEmptyNode.prototype.count = function () {\r\n        return 0;\r\n    };\r\n    /**\r\n     * @return {boolean} True if the tree is empty.\r\n     */\r\n    LLRBEmptyNode.prototype.isEmpty = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!K, !V):*} action Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @return {boolean} True if traversal was aborted.\r\n     */\r\n    LLRBEmptyNode.prototype.inorderTraversal = function (action) {\r\n        return false;\r\n    };\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!K, !V)} action Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @return {boolean} True if traversal was aborted.\r\n     */\r\n    LLRBEmptyNode.prototype.reverseTraversal = function (action) {\r\n        return false;\r\n    };\r\n    /**\r\n     * @return {null}\r\n     */\r\n    LLRBEmptyNode.prototype.minKey = function () {\r\n        return null;\r\n    };\r\n    /**\r\n     * @return {null}\r\n     */\r\n    LLRBEmptyNode.prototype.maxKey = function () {\r\n        return null;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {number} Not sure what this returns exactly. :-).\r\n     */\r\n    LLRBEmptyNode.prototype.check_ = function () {\r\n        return 0;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {boolean} Whether this node is red.\r\n     */\r\n    LLRBEmptyNode.prototype.isRed_ = function () {\r\n        return false;\r\n    };\r\n    return LLRBEmptyNode;\r\n}());\r\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\r\nvar SortedMap = /** @class */ (function () {\r\n    /**\r\n     * @template K, V\r\n     * @param {function(K, K):number} comparator_ Key comparator.\r\n     * @param {LLRBNode=} root_ (Optional) Root node for the map.\r\n     */\r\n    function SortedMap(comparator_, root_) {\r\n        if (root_ === void 0) { root_ = SortedMap.EMPTY_NODE; }\r\n        this.comparator_ = comparator_;\r\n        this.root_ = root_;\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param {!K} key Key to be added.\r\n     * @param {!V} value Value to be added.\r\n     * @return {!SortedMap.<K, V>} New map, with item added.\r\n     */\r\n    SortedMap.prototype.insert = function (key, value) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .insert(key, value, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    };\r\n    /**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param {!K} key The key to remove.\r\n     * @return {!SortedMap.<K, V>} New map, with item removed.\r\n     */\r\n    SortedMap.prototype.remove = function (key) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .remove(key, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    };\r\n    /**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param {!K} key The key to look up.\r\n     * @return {?V} The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */\r\n    SortedMap.prototype.get = function (key) {\r\n        var cmp;\r\n        var node = this.root_;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                return node.value;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                node = node.right;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param {K} key The key to find the predecessor of\r\n     * @return {?K} The predecessor key.\r\n     */\r\n    SortedMap.prototype.getPredecessorKey = function (key) {\r\n        var cmp, node = this.root_, rightParent = null;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                if (!node.left.isEmpty()) {\r\n                    node = node.left;\r\n                    while (!node.right.isEmpty()) {\r\n                        node = node.right;\r\n                    }\r\n                    return node.key;\r\n                }\r\n                else if (rightParent) {\r\n                    return rightParent.key;\r\n                }\r\n                else {\r\n                    return null; // first item.\r\n                }\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                rightParent = node;\r\n                node = node.right;\r\n            }\r\n        }\r\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\r\n    };\r\n    /**\r\n     * @return {boolean} True if the map is empty.\r\n     */\r\n    SortedMap.prototype.isEmpty = function () {\r\n        return this.root_.isEmpty();\r\n    };\r\n    /**\r\n     * @return {number} The total number of nodes in the map.\r\n     */\r\n    SortedMap.prototype.count = function () {\r\n        return this.root_.count();\r\n    };\r\n    /**\r\n     * @return {?K} The minimum key in the map.\r\n     */\r\n    SortedMap.prototype.minKey = function () {\r\n        return this.root_.minKey();\r\n    };\r\n    /**\r\n     * @return {?K} The maximum key in the map.\r\n     */\r\n    SortedMap.prototype.maxKey = function () {\r\n        return this.root_.maxKey();\r\n    };\r\n    /**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param {function(!K, !V):*} action Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @return {*} The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    SortedMap.prototype.inorderTraversal = function (action) {\r\n        return this.root_.inorderTraversal(action);\r\n    };\r\n    /**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param {function(!Object, !Object)} action Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @return {*} True if the traversal was aborted.\r\n     */\r\n    SortedMap.prototype.reverseTraversal = function (action) {\r\n        return this.root_.reverseTraversal(action);\r\n    };\r\n    /**\r\n     * Returns an iterator over the SortedMap.\r\n     * @template T\r\n     * @param {(function(K, V):T)=} resultGenerator\r\n     * @return {SortedMapIterator.<K, V, T>} The iterator.\r\n     */\r\n    SortedMap.prototype.getIterator = function (resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\r\n    };\r\n    SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\r\n    };\r\n    SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\r\n    };\r\n    SortedMap.prototype.getReverseIterator = function (resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\r\n    };\r\n    /**\r\n     * Always use the same empty node, to reduce memory.\r\n     * @const\r\n     */\r\n    SortedMap.EMPTY_NODE = new LLRBEmptyNode();\r\n    return SortedMap;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar LOG_2 = Math.log(2);\r\n/**\r\n * @constructor\r\n */\r\nvar Base12Num = /** @class */ (function () {\r\n    /**\r\n     * @param {number} length\r\n     */\r\n    function Base12Num(length) {\r\n        var logBase2 = function (num) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            return parseInt((Math.log(num) / LOG_2), 10);\r\n        };\r\n        var bitMask = function (bits) { return parseInt(Array(bits + 1).join('1'), 2); };\r\n        this.count = logBase2(length + 1);\r\n        this.current_ = this.count - 1;\r\n        var mask = bitMask(this.count);\r\n        this.bits_ = (length + 1) & mask;\r\n    }\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    Base12Num.prototype.nextBitIsOne = function () {\r\n        //noinspection JSBitwiseOperatorUsage\r\n        var result = !(this.bits_ & (0x1 << this.current_));\r\n        this.current_--;\r\n        return result;\r\n    };\r\n    return Base12Num;\r\n}());\r\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @template K, V\r\n * @param {Array.<!NamedNode>} childList Unsorted list of children\r\n * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used\r\n * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's\r\n *                                                        type is not NamedNode\r\n * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map\r\n * @return {SortedMap.<K, V>}\r\n */\r\nvar buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\r\n    childList.sort(cmp);\r\n    var buildBalancedTree = function (low, high) {\r\n        var length = high - low;\r\n        var namedNode;\r\n        var key;\r\n        if (length === 0) {\r\n            return null;\r\n        }\r\n        else if (length === 1) {\r\n            namedNode = childList[low];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\r\n        }\r\n        else {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            var middle = parseInt((length / 2), 10) + low;\r\n            var left = buildBalancedTree(low, middle);\r\n            var right = buildBalancedTree(middle + 1, high);\r\n            namedNode = childList[middle];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\r\n        }\r\n    };\r\n    var buildFrom12Array = function (base12) {\r\n        var node = null;\r\n        var root = null;\r\n        var index = childList.length;\r\n        var buildPennant = function (chunkSize, color) {\r\n            var low = index - chunkSize;\r\n            var high = index;\r\n            index -= chunkSize;\r\n            var childTree = buildBalancedTree(low + 1, high);\r\n            var namedNode = childList[low];\r\n            var key = keyFn ? keyFn(namedNode) : namedNode;\r\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\r\n        };\r\n        var attachPennant = function (pennant) {\r\n            if (node) {\r\n                node.left = pennant;\r\n                node = pennant;\r\n            }\r\n            else {\r\n                root = pennant;\r\n                node = pennant;\r\n            }\r\n        };\r\n        for (var i = 0; i < base12.count; ++i) {\r\n            var isOne = base12.nextBitIsOne();\r\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\r\n            var chunkSize = Math.pow(2, base12.count - (i + 1));\r\n            if (isOne) {\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n            }\r\n            else {\r\n                // current == 2\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n                buildPennant(chunkSize, LLRBNode.RED);\r\n            }\r\n        }\r\n        return root;\r\n    };\r\n    var base12 = new Base12Num(childList.length);\r\n    var root = buildFrom12Array(base12);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    return new SortedMap(mapSortFn || cmp, root);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar _defaultIndexMap;\r\nvar fallbackObject = {};\r\nvar IndexMap = /** @class */ (function () {\r\n    function IndexMap(indexes_, indexSet_) {\r\n        this.indexes_ = indexes_;\r\n        this.indexSet_ = indexSet_;\r\n    }\r\n    Object.defineProperty(IndexMap, \"Default\", {\r\n        /**\r\n         * The default IndexMap for nodes without a priority\r\n         */\r\n        get: function () {\r\n            util.assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\r\n            _defaultIndexMap =\r\n                _defaultIndexMap ||\r\n                    new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\r\n            return _defaultIndexMap;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    IndexMap.prototype.get = function (indexKey) {\r\n        var sortedMap = util.safeGet(this.indexes_, indexKey);\r\n        if (!sortedMap) {\r\n            throw new Error('No index defined for ' + indexKey);\r\n        }\r\n        if (sortedMap instanceof SortedMap) {\r\n            return sortedMap;\r\n        }\r\n        else {\r\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\r\n            // regular child map\r\n            return null;\r\n        }\r\n    };\r\n    IndexMap.prototype.hasIndex = function (indexDefinition) {\r\n        return util.contains(this.indexSet_, indexDefinition.toString());\r\n    };\r\n    IndexMap.prototype.addIndex = function (indexDefinition, existingChildren) {\r\n        util.assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\r\n        var childList = [];\r\n        var sawIndexedValue = false;\r\n        var iter = existingChildren.getIterator(NamedNode.Wrap);\r\n        var next = iter.getNext();\r\n        while (next) {\r\n            sawIndexedValue =\r\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\r\n            childList.push(next);\r\n            next = iter.getNext();\r\n        }\r\n        var newIndex;\r\n        if (sawIndexedValue) {\r\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\r\n        }\r\n        else {\r\n            newIndex = fallbackObject;\r\n        }\r\n        var indexName = indexDefinition.toString();\r\n        var newIndexSet = tslib.__assign({}, this.indexSet_);\r\n        newIndexSet[indexName] = indexDefinition;\r\n        var newIndexes = tslib.__assign({}, this.indexes_);\r\n        newIndexes[indexName] = newIndex;\r\n        return new IndexMap(newIndexes, newIndexSet);\r\n    };\r\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     */\r\n    IndexMap.prototype.addToIndexes = function (namedNode, existingChildren) {\r\n        var _this = this;\r\n        var newIndexes = util.map(this.indexes_, function (indexedChildren, indexName) {\r\n            var index = util.safeGet(_this.indexSet_, indexName);\r\n            util.assert(index, 'Missing index implementation for ' + indexName);\r\n            if (indexedChildren === fallbackObject) {\r\n                // Check to see if we need to index everything\r\n                if (index.isDefinedOn(namedNode.node)) {\r\n                    // We need to build this index\r\n                    var childList = [];\r\n                    var iter = existingChildren.getIterator(NamedNode.Wrap);\r\n                    var next = iter.getNext();\r\n                    while (next) {\r\n                        if (next.name !== namedNode.name) {\r\n                            childList.push(next);\r\n                        }\r\n                        next = iter.getNext();\r\n                    }\r\n                    childList.push(namedNode);\r\n                    return buildChildSet(childList, index.getCompare());\r\n                }\r\n                else {\r\n                    // No change, this remains a fallback\r\n                    return fallbackObject;\r\n                }\r\n            }\r\n            else {\r\n                var existingSnap = existingChildren.get(namedNode.name);\r\n                var newChildren = indexedChildren;\r\n                if (existingSnap) {\r\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                return newChildren.insert(namedNode, namedNode.node);\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    };\r\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     */\r\n    IndexMap.prototype.removeFromIndexes = function (namedNode, existingChildren) {\r\n        var newIndexes = util.map(this.indexes_, function (indexedChildren) {\r\n            if (indexedChildren === fallbackObject) {\r\n                // This is the fallback. Just return it, nothing to do in this case\r\n                return indexedChildren;\r\n            }\r\n            else {\r\n                var existingSnap = existingChildren.get(namedNode.name);\r\n                if (existingSnap) {\r\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                else {\r\n                    // No record of this child\r\n                    return indexedChildren;\r\n                }\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    };\r\n    return IndexMap;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction NAME_ONLY_COMPARATOR(left, right) {\r\n    return nameCompare(left.name, right.name);\r\n}\r\nfunction NAME_COMPARATOR(left, right) {\r\n    return nameCompare(left, right);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\r\nvar EMPTY_NODE;\r\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n *\r\n * @constructor\r\n * @implements {Node}\r\n */\r\nvar ChildrenNode = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!SortedMap.<string, !Node>} children_ List of children\r\n     * of this node..\r\n     * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).\r\n     * @param {!IndexMap} indexMap_\r\n     */\r\n    function ChildrenNode(children_, priorityNode_, indexMap_) {\r\n        this.children_ = children_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.indexMap_ = indexMap_;\r\n        this.lazyHash_ = null;\r\n        /**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */\r\n        if (this.priorityNode_) {\r\n            validatePriorityNode(this.priorityNode_);\r\n        }\r\n        if (this.children_.isEmpty()) {\r\n            util.assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\r\n        }\r\n    }\r\n    Object.defineProperty(ChildrenNode, \"EMPTY_NODE\", {\r\n        get: function () {\r\n            return (EMPTY_NODE ||\r\n                (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.isLeafNode = function () {\r\n        return false;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getPriority = function () {\r\n        return this.priorityNode_ || EMPTY_NODE;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.updatePriority = function (newPriorityNode) {\r\n        if (this.children_.isEmpty()) {\r\n            // Don't allow priorities on empty nodes\r\n            return this;\r\n        }\r\n        else {\r\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getImmediateChild = function (childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.getPriority();\r\n        }\r\n        else {\r\n            var child = this.children_.get(childName);\r\n            return child === null ? EMPTY_NODE : child;\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getChild = function (path) {\r\n        var front = path.getFront();\r\n        if (front === null) {\r\n            return this;\r\n        }\r\n        return this.getImmediateChild(front).getChild(path.popFront());\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.hasChild = function (childName) {\r\n        return this.children_.get(childName) !== null;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.updateImmediateChild = function (childName, newChildNode) {\r\n        util.assert(newChildNode, 'We should always be passing snapshot nodes');\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else {\r\n            var namedNode = new NamedNode(childName, newChildNode);\r\n            var newChildren = void 0, newIndexMap = void 0;\r\n            if (newChildNode.isEmpty()) {\r\n                newChildren = this.children_.remove(childName);\r\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\r\n            }\r\n            else {\r\n                newChildren = this.children_.insert(childName, newChildNode);\r\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\r\n            }\r\n            var newPriority = newChildren.isEmpty()\r\n                ? EMPTY_NODE\r\n                : this.priorityNode_;\r\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.updateChild = function (path, newChildNode) {\r\n        var front = path.getFront();\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else {\r\n            util.assert(path.getFront() !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\r\n            var newImmediateChild = this.getImmediateChild(front).updateChild(path.popFront(), newChildNode);\r\n            return this.updateImmediateChild(front, newImmediateChild);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.isEmpty = function () {\r\n        return this.children_.isEmpty();\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.numChildren = function () {\r\n        return this.children_.count();\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.val = function (exportFormat) {\r\n        if (this.isEmpty()) {\r\n            return null;\r\n        }\r\n        var obj = {};\r\n        var numKeys = 0, maxKey = 0, allIntegerKeys = true;\r\n        this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n            obj[key] = childNode.val(exportFormat);\r\n            numKeys++;\r\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\r\n                maxKey = Math.max(maxKey, Number(key));\r\n            }\r\n            else {\r\n                allIntegerKeys = false;\r\n            }\r\n        });\r\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\r\n            // convert to array.\r\n            var array = [];\r\n            // eslint-disable-next-line guard-for-in\r\n            for (var key in obj) {\r\n                array[key] = obj[key];\r\n            }\r\n            return array;\r\n        }\r\n        else {\r\n            if (exportFormat && !this.getPriority().isEmpty()) {\r\n                obj['.priority'] = this.getPriority().val();\r\n            }\r\n            return obj;\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.hash = function () {\r\n        if (this.lazyHash_ === null) {\r\n            var toHash_1 = '';\r\n            if (!this.getPriority().isEmpty()) {\r\n                toHash_1 +=\r\n                    'priority:' +\r\n                        priorityHashText(this.getPriority().val()) +\r\n                        ':';\r\n            }\r\n            this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                var childHash = childNode.hash();\r\n                if (childHash !== '') {\r\n                    toHash_1 += ':' + key + ':' + childHash;\r\n                }\r\n            });\r\n            this.lazyHash_ = toHash_1 === '' ? '' : sha1(toHash_1);\r\n        }\r\n        return this.lazyHash_;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getPredecessorChildName = function (childName, childNode, index) {\r\n        var idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            var predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\r\n            return predecessor ? predecessor.name : null;\r\n        }\r\n        else {\r\n            return this.children_.getPredecessorKey(childName);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {?string}\r\n     */\r\n    ChildrenNode.prototype.getFirstChildName = function (indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            var minKey = idx.minKey();\r\n            return minKey && minKey.name;\r\n        }\r\n        else {\r\n            return this.children_.minKey();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {?NamedNode}\r\n     */\r\n    ChildrenNode.prototype.getFirstChild = function (indexDefinition) {\r\n        var minKey = this.getFirstChildName(indexDefinition);\r\n        if (minKey) {\r\n            return new NamedNode(minKey, this.children_.get(minKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     * @param {!Index} indexDefinition\r\n     * @return {?string}\r\n     */\r\n    ChildrenNode.prototype.getLastChildName = function (indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            var maxKey = idx.maxKey();\r\n            return maxKey && maxKey.name;\r\n        }\r\n        else {\r\n            return this.children_.maxKey();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {?NamedNode}\r\n     */\r\n    ChildrenNode.prototype.getLastChild = function (indexDefinition) {\r\n        var maxKey = this.getLastChildName(indexDefinition);\r\n        if (maxKey) {\r\n            return new NamedNode(maxKey, this.children_.get(maxKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.forEachChild = function (index, action) {\r\n        var idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            return idx.inorderTraversal(function (wrappedNode) {\r\n                return action(wrappedNode.name, wrappedNode.node);\r\n            });\r\n        }\r\n        else {\r\n            return this.children_.inorderTraversal(action);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getIterator = function (indexDefinition) {\r\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\r\n    };\r\n    /**\r\n     *\r\n     * @param {!NamedNode} startPost\r\n     * @param {!Index} indexDefinition\r\n     * @return {!SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getIteratorFrom = function (startPost, indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getIteratorFrom(startPost, function (key) { return key; });\r\n        }\r\n        else {\r\n            var iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\r\n            var next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {!SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getReverseIterator = function (indexDefinition) {\r\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\r\n    };\r\n    /**\r\n     * @param {!NamedNode} endPost\r\n     * @param {!Index} indexDefinition\r\n     * @return {!SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getReverseIteratorFrom = function (endPost, indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getReverseIteratorFrom(endPost, function (key) {\r\n                return key;\r\n            });\r\n        }\r\n        else {\r\n            var iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\r\n            var next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.compareTo = function (other) {\r\n        if (this.isEmpty()) {\r\n            if (other.isEmpty()) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (other.isLeafNode() || other.isEmpty()) {\r\n            return 1;\r\n        }\r\n        else if (other === MAX_NODE$2) {\r\n            return -1;\r\n        }\r\n        else {\r\n            // Must be another node with children.\r\n            return 0;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.withIndex = function (indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX ||\r\n            this.indexMap_.hasIndex(indexDefinition)) {\r\n            return this;\r\n        }\r\n        else {\r\n            var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\r\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.isIndexed = function (index) {\r\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.equals = function (other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            var otherChildrenNode = other;\r\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\r\n                return false;\r\n            }\r\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\r\n                var thisIter = this.getIterator(PRIORITY_INDEX);\r\n                var otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\r\n                var thisCurrent = thisIter.getNext();\r\n                var otherCurrent = otherIter.getNext();\r\n                while (thisCurrent && otherCurrent) {\r\n                    if (thisCurrent.name !== otherCurrent.name ||\r\n                        !thisCurrent.node.equals(otherCurrent.node)) {\r\n                        return false;\r\n                    }\r\n                    thisCurrent = thisIter.getNext();\r\n                    otherCurrent = otherIter.getNext();\r\n                }\r\n                return thisCurrent === null && otherCurrent === null;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     * @private\r\n     * @param {!Index} indexDefinition\r\n     * @return {?SortedMap.<NamedNode, Node>}\r\n     */\r\n    ChildrenNode.prototype.resolveIndex_ = function (indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this.indexMap_.get(indexDefinition.toString());\r\n        }\r\n    };\r\n    /**\r\n     * @private\r\n     * @type {RegExp}\r\n     */\r\n    ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\r\n    return ChildrenNode;\r\n}());\r\n/**\r\n * @constructor\r\n * @extends {ChildrenNode}\r\n * @private\r\n */\r\nvar MaxNode = /** @class */ (function (_super) {\r\n    tslib.__extends(MaxNode, _super);\r\n    function MaxNode() {\r\n        return _super.call(this, new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default) || this;\r\n    }\r\n    MaxNode.prototype.compareTo = function (other) {\r\n        if (other === this) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    };\r\n    MaxNode.prototype.equals = function (other) {\r\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\r\n        return other === this;\r\n    };\r\n    MaxNode.prototype.getPriority = function () {\r\n        return this;\r\n    };\r\n    MaxNode.prototype.getImmediateChild = function (childName) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    };\r\n    MaxNode.prototype.isEmpty = function () {\r\n        return false;\r\n    };\r\n    return MaxNode;\r\n}(ChildrenNode));\r\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n * @type {!MAX_NODE}\r\n * @const\r\n */\r\nvar MAX_NODE$2 = new MaxNode();\r\nObject.defineProperties(NamedNode, {\r\n    MIN: {\r\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\r\n    },\r\n    MAX: {\r\n        value: new NamedNode(MAX_NAME, MAX_NODE$2)\r\n    }\r\n});\r\n/**\r\n * Reference Extensions\r\n */\r\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\r\nLeafNode.__childrenNodeConstructor = ChildrenNode;\r\nsetMaxNode(MAX_NODE$2);\r\nsetMaxNode$1(MAX_NODE$2);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar USE_HINZE = true;\r\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param {*} json JSON to create a node for.\r\n * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n * @return {!Node}\r\n */\r\nfunction nodeFromJSON$1(json, priority) {\r\n    if (priority === void 0) { priority = null; }\r\n    if (json === null) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    if (typeof json === 'object' && '.priority' in json) {\r\n        priority = json['.priority'];\r\n    }\r\n    util.assert(priority === null ||\r\n        typeof priority === 'string' ||\r\n        typeof priority === 'number' ||\r\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\r\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\r\n        json = json['.value'];\r\n    }\r\n    // Valid leaf nodes include non-objects or server-value wrapper objects\r\n    if (typeof json !== 'object' || '.sv' in json) {\r\n        var jsonLeaf = json;\r\n        return new LeafNode(jsonLeaf, nodeFromJSON$1(priority));\r\n    }\r\n    if (!(json instanceof Array) && USE_HINZE) {\r\n        var children_1 = [];\r\n        var childrenHavePriority_1 = false;\r\n        var hinzeJsonObj = json;\r\n        each(hinzeJsonObj, function (key, child) {\r\n            if (key.substring(0, 1) !== '.') {\r\n                // Ignore metadata nodes\r\n                var childNode = nodeFromJSON$1(child);\r\n                if (!childNode.isEmpty()) {\r\n                    childrenHavePriority_1 =\r\n                        childrenHavePriority_1 || !childNode.getPriority().isEmpty();\r\n                    children_1.push(new NamedNode(key, childNode));\r\n                }\r\n            }\r\n        });\r\n        if (children_1.length === 0) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        var childSet = buildChildSet(children_1, NAME_ONLY_COMPARATOR, function (namedNode) { return namedNode.name; }, NAME_COMPARATOR);\r\n        if (childrenHavePriority_1) {\r\n            var sortedChildSet = buildChildSet(children_1, PRIORITY_INDEX.getCompare());\r\n            return new ChildrenNode(childSet, nodeFromJSON$1(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\r\n        }\r\n        else {\r\n            return new ChildrenNode(childSet, nodeFromJSON$1(priority), IndexMap.Default);\r\n        }\r\n    }\r\n    else {\r\n        var node_1 = ChildrenNode.EMPTY_NODE;\r\n        each(json, function (key, childData) {\r\n            if (util.contains(json, key)) {\r\n                if (key.substring(0, 1) !== '.') {\r\n                    // ignore metadata nodes.\r\n                    var childNode = nodeFromJSON$1(childData);\r\n                    if (childNode.isLeafNode() || !childNode.isEmpty()) {\r\n                        node_1 = node_1.updateImmediateChild(key, childNode);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return node_1.updatePriority(nodeFromJSON$1(priority));\r\n    }\r\n}\r\nsetNodeFromJSON(nodeFromJSON$1);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\r\nvar ValueIndex = /** @class */ (function (_super) {\r\n    tslib.__extends(ValueIndex, _super);\r\n    function ValueIndex() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.compare = function (a, b) {\r\n        var indexCmp = a.node.compareTo(b.node);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.isDefinedOn = function (node) {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        return !oldNode.equals(newNode);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.minPost = function () {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.maxPost = function () {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MAX;\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {string} name\r\n     * @return {!NamedNode}\r\n     */\r\n    ValueIndex.prototype.makePost = function (indexValue, name) {\r\n        var valueNode = nodeFromJSON$1(indexValue);\r\n        return new NamedNode(name, valueNode);\r\n    };\r\n    /**\r\n     * @return {!string} String representation for inclusion in a query spec\r\n     */\r\n    ValueIndex.prototype.toString = function () {\r\n        return '.value';\r\n    };\r\n    return ValueIndex;\r\n}(Index));\r\nvar VALUE_INDEX = new ValueIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!Path} indexPath\r\n * @constructor\r\n * @extends {Index}\r\n */\r\nvar PathIndex = /** @class */ (function (_super) {\r\n    tslib.__extends(PathIndex, _super);\r\n    function PathIndex(indexPath_) {\r\n        var _this = _super.call(this) || this;\r\n        _this.indexPath_ = indexPath_;\r\n        util.assert(!indexPath_.isEmpty() && indexPath_.getFront() !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\r\n        return _this;\r\n    }\r\n    /**\r\n     * @param {!Node} snap\r\n     * @return {!Node}\r\n     * @protected\r\n     */\r\n    PathIndex.prototype.extractChild = function (snap) {\r\n        return snap.getChild(this.indexPath_);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.isDefinedOn = function (node) {\r\n        return !node.getChild(this.indexPath_).isEmpty();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.compare = function (a, b) {\r\n        var aChild = this.extractChild(a.node);\r\n        var bChild = this.extractChild(b.node);\r\n        var indexCmp = aChild.compareTo(bChild);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.makePost = function (indexValue, name) {\r\n        var valueNode = nodeFromJSON$1(indexValue);\r\n        var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\r\n        return new NamedNode(name, node);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.maxPost = function () {\r\n        var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE$2);\r\n        return new NamedNode(MAX_NAME, node);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.toString = function () {\r\n        return this.indexPath_.slice().join('/');\r\n    };\r\n    return PathIndex;\r\n}(Index));\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\r\n * surfaces the public methods (val, forEach, etc.) we want to expose.\r\n */\r\nvar DataSnapshot = /** @class */ (function () {\r\n    /**\r\n     * @param {!Node} node_ A SnapshotNode to wrap.\r\n     * @param {!Reference} ref_ The ref of the location this snapshot came from.\r\n     * @param {!Index} index_ The iteration order for this snapshot\r\n     */\r\n    function DataSnapshot(node_, ref_, index_) {\r\n        this.node_ = node_;\r\n        this.ref_ = ref_;\r\n        this.index_ = index_;\r\n    }\r\n    /**\r\n     * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\r\n     * empty.\r\n     *\r\n     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\r\n     */\r\n    DataSnapshot.prototype.val = function () {\r\n        util.validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\r\n        return this.node_.val();\r\n    };\r\n    /**\r\n     * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\r\n     * the entire node contents.\r\n     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\r\n     */\r\n    DataSnapshot.prototype.exportVal = function () {\r\n        util.validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\r\n        return this.node_.val(true);\r\n    };\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users\r\n    DataSnapshot.prototype.toJSON = function () {\r\n        // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\r\n        util.validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\r\n        return this.exportVal();\r\n    };\r\n    /**\r\n     * Returns whether the snapshot contains a non-null value.\r\n     *\r\n     * @return {boolean} Whether the snapshot contains a non-null value, or is empty.\r\n     */\r\n    DataSnapshot.prototype.exists = function () {\r\n        util.validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\r\n        return !this.node_.isEmpty();\r\n    };\r\n    /**\r\n     * Returns a DataSnapshot of the specified child node's contents.\r\n     *\r\n     * @param {!string} childPathString Path to a child.\r\n     * @return {!DataSnapshot} DataSnapshot for child node.\r\n     */\r\n    DataSnapshot.prototype.child = function (childPathString) {\r\n        util.validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\r\n        // Ensure the childPath is a string (can be a number)\r\n        childPathString = String(childPathString);\r\n        validatePathString('DataSnapshot.child', 1, childPathString, false);\r\n        var childPath = new Path(childPathString);\r\n        var childRef = this.ref_.child(childPath);\r\n        return new DataSnapshot(this.node_.getChild(childPath), childRef, PRIORITY_INDEX);\r\n    };\r\n    /**\r\n     * Returns whether the snapshot contains a child at the specified path.\r\n     *\r\n     * @param {!string} childPathString Path to a child.\r\n     * @return {boolean} Whether the child exists.\r\n     */\r\n    DataSnapshot.prototype.hasChild = function (childPathString) {\r\n        util.validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\r\n        validatePathString('DataSnapshot.hasChild', 1, childPathString, false);\r\n        var childPath = new Path(childPathString);\r\n        return !this.node_.getChild(childPath).isEmpty();\r\n    };\r\n    /**\r\n     * Returns the priority of the object, or null if no priority was set.\r\n     *\r\n     * @return {string|number|null} The priority.\r\n     */\r\n    DataSnapshot.prototype.getPriority = function () {\r\n        util.validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\r\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\r\n        return this.node_.getPriority().val();\r\n    };\r\n    /**\r\n     * Iterates through child nodes and calls the specified action for each one.\r\n     *\r\n     * @param {function(!DataSnapshot)} action Callback function to be called\r\n     * for each child.\r\n     * @return {boolean} True if forEach was canceled by action returning true for\r\n     * one of the child nodes.\r\n     */\r\n    DataSnapshot.prototype.forEach = function (action) {\r\n        var _this = this;\r\n        util.validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\r\n        util.validateCallback('DataSnapshot.forEach', 1, action, false);\r\n        if (this.node_.isLeafNode()) {\r\n            return false;\r\n        }\r\n        var childrenNode = this.node_;\r\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\r\n        return !!childrenNode.forEachChild(this.index_, function (key, node) {\r\n            return action(new DataSnapshot(node, _this.ref_.child(key), PRIORITY_INDEX));\r\n        });\r\n    };\r\n    /**\r\n     * Returns whether this DataSnapshot has children.\r\n     * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.\r\n     */\r\n    DataSnapshot.prototype.hasChildren = function () {\r\n        util.validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\r\n        if (this.node_.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return !this.node_.isEmpty();\r\n        }\r\n    };\r\n    Object.defineProperty(DataSnapshot.prototype, \"key\", {\r\n        get: function () {\r\n            return this.ref_.getKey();\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns the number of children for this DataSnapshot.\r\n     * @return {number} The number of children that this DataSnapshot contains.\r\n     */\r\n    DataSnapshot.prototype.numChildren = function () {\r\n        util.validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\r\n        return this.node_.numChildren();\r\n    };\r\n    /**\r\n     * @return {Reference} The Firebase reference for the location this snapshot's data came from.\r\n     */\r\n    DataSnapshot.prototype.getRef = function () {\r\n        util.validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\r\n        return this.ref_;\r\n    };\r\n    Object.defineProperty(DataSnapshot.prototype, \"ref\", {\r\n        get: function () {\r\n            return this.getRef();\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return DataSnapshot;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Encapsulates the data needed to raise an event\r\n * @implements {Event}\r\n */\r\nvar DataEvent = /** @class */ (function () {\r\n    /**\r\n     * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided\r\n     * @param {!DataSnapshot} snapshot The data backing the event\r\n     * @param {?string=} prevName Optional, the name of the previous child for child_* events.\r\n     */\r\n    function DataEvent(eventType, eventRegistration, snapshot, prevName) {\r\n        this.eventType = eventType;\r\n        this.eventRegistration = eventRegistration;\r\n        this.snapshot = snapshot;\r\n        this.prevName = prevName;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.getPath = function () {\r\n        var ref = this.snapshot.getRef();\r\n        if (this.eventType === 'value') {\r\n            return ref.path;\r\n        }\r\n        else {\r\n            return ref.getParent().path;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.getEventType = function () {\r\n        return this.eventType;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.getEventRunner = function () {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.toString = function () {\r\n        return (this.getPath().toString() +\r\n            ':' +\r\n            this.eventType +\r\n            ':' +\r\n            util.stringify(this.snapshot.exportVal()));\r\n    };\r\n    return DataEvent;\r\n}());\r\nvar CancelEvent = /** @class */ (function () {\r\n    /**\r\n     * @param {EventRegistration} eventRegistration\r\n     * @param {Error} error\r\n     * @param {!Path} path\r\n     */\r\n    function CancelEvent(eventRegistration, error, path) {\r\n        this.eventRegistration = eventRegistration;\r\n        this.error = error;\r\n        this.path = path;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.getPath = function () {\r\n        return this.path;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.getEventType = function () {\r\n        return 'cancel';\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.getEventRunner = function () {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.toString = function () {\r\n        return this.path.toString() + ':cancel';\r\n    };\r\n    return CancelEvent;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents registration for 'value' events.\r\n */\r\nvar ValueEventRegistration = /** @class */ (function () {\r\n    /**\r\n     * @param {?function(!DataSnapshot)} callback_\r\n     * @param {?function(Error)} cancelCallback_\r\n     * @param {?Object} context_\r\n     */\r\n    function ValueEventRegistration(callback_, cancelCallback_, context_) {\r\n        this.callback_ = callback_;\r\n        this.cancelCallback_ = cancelCallback_;\r\n        this.context_ = context_;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.respondsTo = function (eventType) {\r\n        return eventType === 'value';\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.createEvent = function (change, query) {\r\n        var index = query.getQueryParams().getIndex();\r\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, query.getRef(), index));\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.getEventRunner = function (eventData) {\r\n        var ctx = this.context_;\r\n        if (eventData.getEventType() === 'cancel') {\r\n            util.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\r\n            var cancelCB_1 = this.cancelCallback_;\r\n            return function () {\r\n                // We know that error exists, we checked above that this is a cancel event\r\n                cancelCB_1.call(ctx, eventData.error);\r\n            };\r\n        }\r\n        else {\r\n            var cb_1 = this.callback_;\r\n            return function () {\r\n                cb_1.call(ctx, eventData.snapshot);\r\n            };\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.createCancelEvent = function (error, path) {\r\n        if (this.cancelCallback_) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.matches = function (other) {\r\n        if (!(other instanceof ValueEventRegistration)) {\r\n            return false;\r\n        }\r\n        else if (!other.callback_ || !this.callback_) {\r\n            // If no callback specified, we consider it to match any callback.\r\n            return true;\r\n        }\r\n        else {\r\n            return (other.callback_ === this.callback_ && other.context_ === this.context_);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.hasAnyCallback = function () {\r\n        return this.callback_ !== null;\r\n    };\r\n    return ValueEventRegistration;\r\n}());\r\n/**\r\n * Represents the registration of 1 or more child_xxx events.\r\n *\r\n * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you\r\n * register a group of callbacks together in the future.\r\n *\r\n * @constructor\r\n * @implements {EventRegistration}\r\n */\r\nvar ChildEventRegistration = /** @class */ (function () {\r\n    /**\r\n     * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_\r\n     * @param {?function(Error)} cancelCallback_\r\n     * @param {Object=} context_\r\n     */\r\n    function ChildEventRegistration(callbacks_, cancelCallback_, context_) {\r\n        this.callbacks_ = callbacks_;\r\n        this.cancelCallback_ = cancelCallback_;\r\n        this.context_ = context_;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.respondsTo = function (eventType) {\r\n        var eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\r\n        eventToCheck =\r\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\r\n        return util.contains(this.callbacks_, eventToCheck);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.createCancelEvent = function (error, path) {\r\n        if (this.cancelCallback_) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.createEvent = function (change, query) {\r\n        util.assert(change.childName != null, 'Child events should have a childName.');\r\n        var ref = query.getRef().child(/** @type {!string} */ change.childName);\r\n        var index = query.getQueryParams().getIndex();\r\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, ref, index), change.prevName);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.getEventRunner = function (eventData) {\r\n        var ctx = this.context_;\r\n        if (eventData.getEventType() === 'cancel') {\r\n            util.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\r\n            var cancelCB_2 = this.cancelCallback_;\r\n            return function () {\r\n                // We know that error exists, we checked above that this is a cancel event\r\n                cancelCB_2.call(ctx, eventData.error);\r\n            };\r\n        }\r\n        else {\r\n            var cb_2 = this.callbacks_[eventData.eventType];\r\n            return function () {\r\n                cb_2.call(ctx, eventData.snapshot, eventData.prevName);\r\n            };\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.matches = function (other) {\r\n        var _this = this;\r\n        if (other instanceof ChildEventRegistration) {\r\n            if (!this.callbacks_ || !other.callbacks_) {\r\n                return true;\r\n            }\r\n            else if (this.context_ === other.context_) {\r\n                var otherKeys = Object.keys(other.callbacks_);\r\n                var thisKeys = Object.keys(this.callbacks_);\r\n                var otherCount = otherKeys.length;\r\n                var thisCount = thisKeys.length;\r\n                if (otherCount === thisCount) {\r\n                    // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.\r\n                    // If event types don't match, not a match\r\n                    // If count is not 1, exact match across all\r\n                    if (otherCount === 1) {\r\n                        var otherKey = otherKeys[0];\r\n                        var thisKey = thisKeys[0];\r\n                        return (thisKey === otherKey &&\r\n                            (!other.callbacks_[otherKey] ||\r\n                                !this.callbacks_[thisKey] ||\r\n                                other.callbacks_[otherKey] === this.callbacks_[thisKey]));\r\n                    }\r\n                    else {\r\n                        // Exact match on each key.\r\n                        return thisKeys.every(function (eventType) {\r\n                            return other.callbacks_[eventType] === _this.callbacks_[eventType];\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.hasAnyCallback = function () {\r\n        return this.callbacks_ !== null;\r\n    };\r\n    return ChildEventRegistration;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __referenceConstructor;\r\n/**\r\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\r\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\r\n *\r\n * Since every Firebase reference is a query, Firebase inherits from this object.\r\n */\r\nvar Query = /** @class */ (function () {\r\n    function Query(repo, path, queryParams_, orderByCalled_) {\r\n        this.repo = repo;\r\n        this.path = path;\r\n        this.queryParams_ = queryParams_;\r\n        this.orderByCalled_ = orderByCalled_;\r\n    }\r\n    Object.defineProperty(Query, \"__referenceConstructor\", {\r\n        get: function () {\r\n            util.assert(__referenceConstructor, 'Reference.ts has not been loaded');\r\n            return __referenceConstructor;\r\n        },\r\n        set: function (val) {\r\n            __referenceConstructor = val;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Validates start/end values for queries.\r\n     * @param {!QueryParams} params\r\n     * @private\r\n     */\r\n    Query.validateQueryEndpoints_ = function (params) {\r\n        var startNode = null;\r\n        var endNode = null;\r\n        if (params.hasStart()) {\r\n            startNode = params.getIndexStartValue();\r\n        }\r\n        if (params.hasEnd()) {\r\n            endNode = params.getIndexEndValue();\r\n        }\r\n        if (params.getIndex() === KEY_INDEX) {\r\n            var tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\r\n                'startAt(), endAt(), or equalTo().';\r\n            var wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), endAt(),' +\r\n                'or equalTo() must be a string.';\r\n            if (params.hasStart()) {\r\n                var startName = params.getIndexStartName();\r\n                if (startName !== MIN_NAME) {\r\n                    throw new Error(tooManyArgsError);\r\n                }\r\n                else if (typeof startNode !== 'string') {\r\n                    throw new Error(wrongArgTypeError);\r\n                }\r\n            }\r\n            if (params.hasEnd()) {\r\n                var endName = params.getIndexEndName();\r\n                if (endName !== MAX_NAME) {\r\n                    throw new Error(tooManyArgsError);\r\n                }\r\n                else if (typeof endNode !== 'string') {\r\n                    throw new Error(wrongArgTypeError);\r\n                }\r\n            }\r\n        }\r\n        else if (params.getIndex() === PRIORITY_INDEX) {\r\n            if ((startNode != null && !isValidPriority(startNode)) ||\r\n                (endNode != null && !isValidPriority(endNode))) {\r\n                throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\r\n                    'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).');\r\n            }\r\n        }\r\n        else {\r\n            util.assert(params.getIndex() instanceof PathIndex ||\r\n                params.getIndex() === VALUE_INDEX, 'unknown index type.');\r\n            if ((startNode != null && typeof startNode === 'object') ||\r\n                (endNode != null && typeof endNode === 'object')) {\r\n                throw new Error('Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' +\r\n                    'an object.');\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Validates that limit* has been called with the correct combination of parameters\r\n     * @param {!QueryParams} params\r\n     * @private\r\n     */\r\n    Query.validateLimit_ = function (params) {\r\n        if (params.hasStart() &&\r\n            params.hasEnd() &&\r\n            params.hasLimit() &&\r\n            !params.hasAnchoredLimit()) {\r\n            throw new Error(\"Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.\");\r\n        }\r\n    };\r\n    /**\r\n     * Validates that no other order by call has been made\r\n     * @param {!string} fnName\r\n     * @private\r\n     */\r\n    Query.prototype.validateNoPreviousOrderByCall_ = function (fnName) {\r\n        if (this.orderByCalled_ === true) {\r\n            throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\r\n        }\r\n    };\r\n    /**\r\n     * @return {!QueryParams}\r\n     */\r\n    Query.prototype.getQueryParams = function () {\r\n        return this.queryParams_;\r\n    };\r\n    /**\r\n     * @return {!Reference}\r\n     */\r\n    Query.prototype.getRef = function () {\r\n        util.validateArgCount('Query.ref', 0, 0, arguments.length);\r\n        // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.\r\n        // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this\r\n        // method gets called.\r\n        return new Query.__referenceConstructor(this.repo, this.path);\r\n    };\r\n    /**\r\n     * @param {!string} eventType\r\n     * @param {!function(DataSnapshot, string=)} callback\r\n     * @param {(function(Error)|Object)=} cancelCallbackOrContext\r\n     * @param {Object=} context\r\n     * @return {!function(DataSnapshot, string=)}\r\n     */\r\n    Query.prototype.on = function (eventType, callback, cancelCallbackOrContext, context) {\r\n        util.validateArgCount('Query.on', 2, 4, arguments.length);\r\n        validateEventType('Query.on', 1, eventType, false);\r\n        util.validateCallback('Query.on', 2, callback, false);\r\n        var ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);\r\n        if (eventType === 'value') {\r\n            this.onValueEvent(callback, ret.cancel, ret.context);\r\n        }\r\n        else {\r\n            var callbacks = {};\r\n            callbacks[eventType] = callback;\r\n            this.onChildEvent(callbacks, ret.cancel, ret.context);\r\n        }\r\n        return callback;\r\n    };\r\n    /**\r\n     * @param {!function(!DataSnapshot)} callback\r\n     * @param {?function(Error)} cancelCallback\r\n     * @param {?Object} context\r\n     * @protected\r\n     */\r\n    Query.prototype.onValueEvent = function (callback, cancelCallback, context) {\r\n        var container = new ValueEventRegistration(callback, cancelCallback || null, context || null);\r\n        this.repo.addEventCallbackForQuery(this, container);\r\n    };\r\n    /**\r\n     * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks\r\n     * @param {?function(Error)} cancelCallback\r\n     * @param {?Object} context\r\n     * @protected\r\n     */\r\n    Query.prototype.onChildEvent = function (callbacks, cancelCallback, context) {\r\n        var container = new ChildEventRegistration(callbacks, cancelCallback, context);\r\n        this.repo.addEventCallbackForQuery(this, container);\r\n    };\r\n    /**\r\n     * @param {string=} eventType\r\n     * @param {(function(!DataSnapshot, ?string=))=} callback\r\n     * @param {Object=} context\r\n     */\r\n    Query.prototype.off = function (eventType, callback, context) {\r\n        util.validateArgCount('Query.off', 0, 3, arguments.length);\r\n        validateEventType('Query.off', 1, eventType, true);\r\n        util.validateCallback('Query.off', 2, callback, true);\r\n        util.validateContextObject('Query.off', 3, context, true);\r\n        var container = null;\r\n        var callbacks = null;\r\n        if (eventType === 'value') {\r\n            var valueCallback = callback || null;\r\n            container = new ValueEventRegistration(valueCallback, null, context || null);\r\n        }\r\n        else if (eventType) {\r\n            if (callback) {\r\n                callbacks = {};\r\n                callbacks[eventType] = callback;\r\n            }\r\n            container = new ChildEventRegistration(callbacks, null, context || null);\r\n        }\r\n        this.repo.removeEventCallbackForQuery(this, container);\r\n    };\r\n    /**\r\n     * Attaches a listener, waits for the first event, and then removes the listener\r\n     * @param {!string} eventType\r\n     * @param {!function(!DataSnapshot, string=)} userCallback\r\n     * @param failureCallbackOrContext\r\n     * @param context\r\n     * @return {!firebase.Promise}\r\n     */\r\n    Query.prototype.once = function (eventType, userCallback, failureCallbackOrContext, context) {\r\n        var _this = this;\r\n        util.validateArgCount('Query.once', 1, 4, arguments.length);\r\n        validateEventType('Query.once', 1, eventType, false);\r\n        util.validateCallback('Query.once', 2, userCallback, true);\r\n        var ret = Query.getCancelAndContextArgs_('Query.once', failureCallbackOrContext, context);\r\n        // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)\r\n        // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change\r\n        // because the API currently expects callbacks will be called synchronously if the data is cached, but this is\r\n        // against the Promise specification.\r\n        var firstCall = true;\r\n        var deferred = new util.Deferred();\r\n        // A dummy error handler in case a user wasn't expecting promises\r\n        deferred.promise.catch(function () { });\r\n        var onceCallback = function (snapshot) {\r\n            // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)\r\n            // triggers multiple events (e.g. child_added or child_changed).\r\n            if (firstCall) {\r\n                firstCall = false;\r\n                _this.off(eventType, onceCallback);\r\n                if (userCallback) {\r\n                    userCallback.bind(ret.context)(snapshot);\r\n                }\r\n                deferred.resolve(snapshot);\r\n            }\r\n        };\r\n        this.on(eventType, onceCallback, \r\n        /*cancel=*/ function (err) {\r\n            _this.off(eventType, onceCallback);\r\n            if (ret.cancel) {\r\n                ret.cancel.bind(ret.context)(err);\r\n            }\r\n            deferred.reject(err);\r\n        });\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * Set a limit and anchor it to the start of the window.\r\n     * @param {!number} limit\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.limitToFirst = function (limit) {\r\n        util.validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\r\n        if (typeof limit !== 'number' ||\r\n            Math.floor(limit) !== limit ||\r\n            limit <= 0) {\r\n            throw new Error('Query.limitToFirst: First argument must be a positive integer.');\r\n        }\r\n        if (this.queryParams_.hasLimit()) {\r\n            throw new Error('Query.limitToFirst: Limit was already set (by another call to limit, ' +\r\n                'limitToFirst, or limitToLast).');\r\n        }\r\n        return new Query(this.repo, this.path, this.queryParams_.limitToFirst(limit), this.orderByCalled_);\r\n    };\r\n    /**\r\n     * Set a limit and anchor it to the end of the window.\r\n     * @param {!number} limit\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.limitToLast = function (limit) {\r\n        util.validateArgCount('Query.limitToLast', 1, 1, arguments.length);\r\n        if (typeof limit !== 'number' ||\r\n            Math.floor(limit) !== limit ||\r\n            limit <= 0) {\r\n            throw new Error('Query.limitToLast: First argument must be a positive integer.');\r\n        }\r\n        if (this.queryParams_.hasLimit()) {\r\n            throw new Error('Query.limitToLast: Limit was already set (by another call to limit, ' +\r\n                'limitToFirst, or limitToLast).');\r\n        }\r\n        return new Query(this.repo, this.path, this.queryParams_.limitToLast(limit), this.orderByCalled_);\r\n    };\r\n    /**\r\n     * Given a child path, return a new query ordered by the specified grandchild path.\r\n     * @param {!string} path\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByChild = function (path) {\r\n        util.validateArgCount('Query.orderByChild', 1, 1, arguments.length);\r\n        if (path === '$key') {\r\n            throw new Error('Query.orderByChild: \"$key\" is invalid.  Use Query.orderByKey() instead.');\r\n        }\r\n        else if (path === '$priority') {\r\n            throw new Error('Query.orderByChild: \"$priority\" is invalid.  Use Query.orderByPriority() instead.');\r\n        }\r\n        else if (path === '$value') {\r\n            throw new Error('Query.orderByChild: \"$value\" is invalid.  Use Query.orderByValue() instead.');\r\n        }\r\n        validatePathString('Query.orderByChild', 1, path, false);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByChild');\r\n        var parsedPath = new Path(path);\r\n        if (parsedPath.isEmpty()) {\r\n            throw new Error('Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.');\r\n        }\r\n        var index = new PathIndex(parsedPath);\r\n        var newParams = this.queryParams_.orderBy(index);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * Return a new query ordered by the KeyIndex\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByKey = function () {\r\n        util.validateArgCount('Query.orderByKey', 0, 0, arguments.length);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByKey');\r\n        var newParams = this.queryParams_.orderBy(KEY_INDEX);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * Return a new query ordered by the PriorityIndex\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByPriority = function () {\r\n        util.validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByPriority');\r\n        var newParams = this.queryParams_.orderBy(PRIORITY_INDEX);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * Return a new query ordered by the ValueIndex\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByValue = function () {\r\n        util.validateArgCount('Query.orderByValue', 0, 0, arguments.length);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByValue');\r\n        var newParams = this.queryParams_.orderBy(VALUE_INDEX);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * @param {number|string|boolean|null} value\r\n     * @param {?string=} name\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.startAt = function (value, name) {\r\n        if (value === void 0) { value = null; }\r\n        util.validateArgCount('Query.startAt', 0, 2, arguments.length);\r\n        validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);\r\n        validateKey('Query.startAt', 2, name, true);\r\n        var newParams = this.queryParams_.startAt(value, name);\r\n        Query.validateLimit_(newParams);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        if (this.queryParams_.hasStart()) {\r\n            throw new Error('Query.startAt: Starting point was already set (by another call to startAt ' +\r\n                'or equalTo).');\r\n        }\r\n        // Calling with no params tells us to start at the beginning.\r\n        if (value === undefined) {\r\n            value = null;\r\n            name = null;\r\n        }\r\n        return new Query(this.repo, this.path, newParams, this.orderByCalled_);\r\n    };\r\n    /**\r\n     * @param {number|string|boolean|null} value\r\n     * @param {?string=} name\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.endAt = function (value, name) {\r\n        if (value === void 0) { value = null; }\r\n        util.validateArgCount('Query.endAt', 0, 2, arguments.length);\r\n        validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);\r\n        validateKey('Query.endAt', 2, name, true);\r\n        var newParams = this.queryParams_.endAt(value, name);\r\n        Query.validateLimit_(newParams);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        if (this.queryParams_.hasEnd()) {\r\n            throw new Error('Query.endAt: Ending point was already set (by another call to endAt or ' +\r\n                'equalTo).');\r\n        }\r\n        return new Query(this.repo, this.path, newParams, this.orderByCalled_);\r\n    };\r\n    /**\r\n     * Load the selection of children with exactly the specified value, and, optionally,\r\n     * the specified name.\r\n     * @param {number|string|boolean|null} value\r\n     * @param {string=} name\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.equalTo = function (value, name) {\r\n        util.validateArgCount('Query.equalTo', 1, 2, arguments.length);\r\n        validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);\r\n        validateKey('Query.equalTo', 2, name, true);\r\n        if (this.queryParams_.hasStart()) {\r\n            throw new Error('Query.equalTo: Starting point was already set (by another call to startAt or ' +\r\n                'equalTo).');\r\n        }\r\n        if (this.queryParams_.hasEnd()) {\r\n            throw new Error('Query.equalTo: Ending point was already set (by another call to endAt or ' +\r\n                'equalTo).');\r\n        }\r\n        return this.startAt(value, name).endAt(value, name);\r\n    };\r\n    /**\r\n     * @return {!string} URL for this location.\r\n     */\r\n    Query.prototype.toString = function () {\r\n        util.validateArgCount('Query.toString', 0, 0, arguments.length);\r\n        return this.repo.toString() + this.path.toUrlEncodedString();\r\n    };\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users.\r\n    Query.prototype.toJSON = function () {\r\n        // An optional spacer argument is unnecessary for a string.\r\n        util.validateArgCount('Query.toJSON', 0, 1, arguments.length);\r\n        return this.toString();\r\n    };\r\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     * @return {!Object}\r\n     */\r\n    Query.prototype.queryObject = function () {\r\n        return this.queryParams_.getQueryObject();\r\n    };\r\n    /**\r\n     * @return {!string}\r\n     */\r\n    Query.prototype.queryIdentifier = function () {\r\n        var obj = this.queryObject();\r\n        var id = ObjectToUniqueKey(obj);\r\n        return id === '{}' ? 'default' : id;\r\n    };\r\n    /**\r\n     * Return true if this query and the provided query are equivalent; otherwise, return false.\r\n     * @param {Query} other\r\n     * @return {boolean}\r\n     */\r\n    Query.prototype.isEqual = function (other) {\r\n        util.validateArgCount('Query.isEqual', 1, 1, arguments.length);\r\n        if (!(other instanceof Query)) {\r\n            var error = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\r\n            throw new Error(error);\r\n        }\r\n        var sameRepo = this.repo === other.repo;\r\n        var samePath = this.path.equals(other.path);\r\n        var sameQueryIdentifier = this.queryIdentifier() === other.queryIdentifier();\r\n        return sameRepo && samePath && sameQueryIdentifier;\r\n    };\r\n    /**\r\n     * Helper used by .on and .once to extract the context and or cancel arguments.\r\n     * @param {!string} fnName The function name (on or once)\r\n     * @param {(function(Error)|Object)=} cancelOrContext\r\n     * @param {Object=} context\r\n     * @return {{cancel: ?function(Error), context: ?Object}}\r\n     * @private\r\n     */\r\n    Query.getCancelAndContextArgs_ = function (fnName, cancelOrContext, context) {\r\n        var ret = { cancel: null, context: null };\r\n        if (cancelOrContext && context) {\r\n            ret.cancel = cancelOrContext;\r\n            util.validateCallback(fnName, 3, ret.cancel, true);\r\n            ret.context = context;\r\n            util.validateContextObject(fnName, 4, ret.context, true);\r\n        }\r\n        else if (cancelOrContext) {\r\n            // we have either a cancel callback or a context.\r\n            if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\r\n                // it's a context!\r\n                ret.context = cancelOrContext;\r\n            }\r\n            else if (typeof cancelOrContext === 'function') {\r\n                ret.cancel = cancelOrContext;\r\n            }\r\n            else {\r\n                throw new Error(util.errorPrefix(fnName, 3, true) +\r\n                    ' must either be a cancel callback or a context object.');\r\n            }\r\n        }\r\n        return ret;\r\n    };\r\n    Object.defineProperty(Query.prototype, \"ref\", {\r\n        get: function () {\r\n            return this.getRef();\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return Query;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar ExistingValueProvider = /** @class */ (function () {\r\n    function ExistingValueProvider(node_) {\r\n        this.node_ = node_;\r\n    }\r\n    ExistingValueProvider.prototype.getImmediateChild = function (childName) {\r\n        var child = this.node_.getImmediateChild(childName);\r\n        return new ExistingValueProvider(child);\r\n    };\r\n    ExistingValueProvider.prototype.node = function () {\r\n        return this.node_;\r\n    };\r\n    return ExistingValueProvider;\r\n}());\r\nvar DeferredValueProvider = /** @class */ (function () {\r\n    function DeferredValueProvider(syncTree, path) {\r\n        this.syncTree_ = syncTree;\r\n        this.path_ = path;\r\n    }\r\n    DeferredValueProvider.prototype.getImmediateChild = function (childName) {\r\n        var childPath = this.path_.child(childName);\r\n        return new DeferredValueProvider(this.syncTree_, childPath);\r\n    };\r\n    DeferredValueProvider.prototype.node = function () {\r\n        return this.syncTree_.calcCompleteEventCache(this.path_);\r\n    };\r\n    return DeferredValueProvider;\r\n}());\r\n/**\r\n * Generate placeholders for deferred values.\r\n * @param {?Object} values\r\n * @return {!Object}\r\n */\r\nvar generateWithValues = function (values) {\r\n    values = values || {};\r\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\r\n    return values;\r\n};\r\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n * @param {(Object|string|number|boolean)} value\r\n * @param {!Object} serverValues\r\n * @return {!(string|number|boolean)}\r\n */\r\nvar resolveDeferredLeafValue = function (value, existingVal, serverValues) {\r\n    if (!value || typeof value !== 'object') {\r\n        return value;\r\n    }\r\n    util.assert('.sv' in value, 'Unexpected leaf node or priority contents');\r\n    if (typeof value['.sv'] === 'string') {\r\n        return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\r\n    }\r\n    else if (typeof value['.sv'] === 'object') {\r\n        return resolveComplexDeferredValue(value['.sv'], existingVal);\r\n    }\r\n    else {\r\n        util.assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\r\n    }\r\n};\r\nvar resolveScalarDeferredValue = function (op, existing, serverValues) {\r\n    switch (op) {\r\n        case 'timestamp':\r\n            return serverValues['timestamp'];\r\n        default:\r\n            util.assert(false, 'Unexpected server value: ' + op);\r\n    }\r\n};\r\nvar resolveComplexDeferredValue = function (op, existing, unused) {\r\n    if (!op.hasOwnProperty('increment')) {\r\n        util.assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\r\n    }\r\n    var delta = op['increment'];\r\n    if (typeof delta !== 'number') {\r\n        util.assert(false, 'Unexpected increment value: ' + delta);\r\n    }\r\n    var existingNode = existing.node();\r\n    util.assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\r\n    // Incrementing a non-number sets the value to the incremented amount\r\n    if (!existingNode.isLeafNode()) {\r\n        return delta;\r\n    }\r\n    var leaf = existingNode;\r\n    var existingVal = leaf.getValue();\r\n    if (typeof existingVal !== 'number') {\r\n        return delta;\r\n    }\r\n    // No need to do over/underflow arithmetic here because JS only handles floats under the covers\r\n    return existingVal + delta;\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param {!Path} path path to which write is relative\r\n * @param {!Node} node new data written at path\r\n * @param {!SyncTree} syncTree current data\r\n * @param {!Object} serverValues\r\n * @return {!SparseSnapshotTree}\r\n */\r\nvar resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\r\n    return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n * @param {!Node} node\r\n * @param {!Object} serverValues\r\n * @return {!Node}\r\n */\r\nvar resolveDeferredValueSnapshot = function (node, existing, serverValues) {\r\n    return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\r\n};\r\nfunction resolveDeferredValue(node, existingVal, serverValues) {\r\n    var rawPri = node.getPriority().val();\r\n    var priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\r\n    var newNode;\r\n    if (node.isLeafNode()) {\r\n        var leafNode = node;\r\n        var value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\r\n        if (value !== leafNode.getValue() ||\r\n            priority !== leafNode.getPriority().val()) {\r\n            return new LeafNode(value, nodeFromJSON$1(priority));\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n    else {\r\n        var childrenNode = node;\r\n        newNode = childrenNode;\r\n        if (priority !== childrenNode.getPriority().val()) {\r\n            newNode = newNode.updatePriority(new LeafNode(priority));\r\n        }\r\n        childrenNode.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\r\n            var newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\r\n            if (newChildNode !== childNode) {\r\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\r\n            }\r\n        });\r\n        return newNode;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper class to store a sparse set of snapshots.\r\n */\r\nvar SparseSnapshotTree = /** @class */ (function () {\r\n    function SparseSnapshotTree() {\r\n        this.value = null;\r\n        this.children = new Map();\r\n    }\r\n    /**\r\n     * Gets the node stored at the given path if one exists.\r\n     *\r\n     * @param path Path to look up snapshot for.\r\n     * @return The retrieved node, or null.\r\n     */\r\n    SparseSnapshotTree.prototype.find = function (path) {\r\n        if (this.value != null) {\r\n            return this.value.getChild(path);\r\n        }\r\n        else if (!path.isEmpty() && this.children.size > 0) {\r\n            var childKey = path.getFront();\r\n            path = path.popFront();\r\n            if (this.children.has(childKey)) {\r\n                var childTree = this.children.get(childKey);\r\n                return childTree.find(path);\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Stores the given node at the specified path. If there is already a node\r\n     * at a shallower path, it merges the new data into that snapshot node.\r\n     *\r\n     * @param path Path to look up snapshot for.\r\n     * @param data The new data, or null.\r\n     */\r\n    SparseSnapshotTree.prototype.remember = function (path, data) {\r\n        if (path.isEmpty()) {\r\n            this.value = data;\r\n            this.children.clear();\r\n        }\r\n        else if (this.value !== null) {\r\n            this.value = this.value.updateChild(path, data);\r\n        }\r\n        else {\r\n            var childKey = path.getFront();\r\n            if (!this.children.has(childKey)) {\r\n                this.children.set(childKey, new SparseSnapshotTree());\r\n            }\r\n            var child = this.children.get(childKey);\r\n            path = path.popFront();\r\n            child.remember(path, data);\r\n        }\r\n    };\r\n    /**\r\n     * Purge the data at path from the cache.\r\n     *\r\n     * @param path Path to look up snapshot for.\r\n     * @return True if this node should now be removed.\r\n     */\r\n    SparseSnapshotTree.prototype.forget = function (path) {\r\n        if (path.isEmpty()) {\r\n            this.value = null;\r\n            this.children.clear();\r\n            return true;\r\n        }\r\n        else {\r\n            if (this.value !== null) {\r\n                if (this.value.isLeafNode()) {\r\n                    // We're trying to forget a node that doesn't exist\r\n                    return false;\r\n                }\r\n                else {\r\n                    var value = this.value;\r\n                    this.value = null;\r\n                    var self_1 = this;\r\n                    value.forEachChild(PRIORITY_INDEX, function (key, tree) {\r\n                        self_1.remember(new Path(key), tree);\r\n                    });\r\n                    return this.forget(path);\r\n                }\r\n            }\r\n            else if (this.children.size > 0) {\r\n                var childKey = path.getFront();\r\n                path = path.popFront();\r\n                if (this.children.has(childKey)) {\r\n                    var safeToRemove = this.children.get(childKey).forget(path);\r\n                    if (safeToRemove) {\r\n                        this.children.delete(childKey);\r\n                    }\r\n                }\r\n                return this.children.size === 0;\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Recursively iterates through all of the stored tree and calls the\r\n     * callback on each one.\r\n     *\r\n     * @param prefixPath Path to look up node for.\r\n     * @param func The function to invoke for each tree.\r\n     */\r\n    SparseSnapshotTree.prototype.forEachTree = function (prefixPath, func) {\r\n        if (this.value !== null) {\r\n            func(prefixPath, this.value);\r\n        }\r\n        else {\r\n            this.forEachChild(function (key, tree) {\r\n                var path = new Path(prefixPath.toString() + '/' + key);\r\n                tree.forEachTree(path, func);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Iterates through each immediate child and triggers the callback.\r\n     *\r\n     * @param func The function to invoke for each child.\r\n     */\r\n    SparseSnapshotTree.prototype.forEachChild = function (func) {\r\n        this.children.forEach(function (tree, key) {\r\n            func(key, tree);\r\n        });\r\n    };\r\n    return SparseSnapshotTree;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @enum\r\n */\r\nvar OperationType;\r\n(function (OperationType) {\r\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\r\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\r\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\r\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\r\n})(OperationType || (OperationType = {}));\r\n/**\r\n * @param {boolean} fromUser\r\n * @param {boolean} fromServer\r\n * @param {?string} queryId\r\n * @param {boolean} tagged\r\n * @constructor\r\n */\r\nvar OperationSource = /** @class */ (function () {\r\n    function OperationSource(fromUser, fromServer, queryId, tagged) {\r\n        this.fromUser = fromUser;\r\n        this.fromServer = fromServer;\r\n        this.queryId = queryId;\r\n        this.tagged = tagged;\r\n        util.assert(!tagged || fromServer, 'Tagged queries must be from server.');\r\n    }\r\n    /**\r\n     * @const\r\n     * @type {!OperationSource}\r\n     */\r\n    OperationSource.User = new OperationSource(\r\n    /*fromUser=*/ true, false, null, \r\n    /*tagged=*/ false);\r\n    /**\r\n     * @const\r\n     * @type {!OperationSource}\r\n     */\r\n    OperationSource.Server = new OperationSource(false, \r\n    /*fromServer=*/ true, null, \r\n    /*tagged=*/ false);\r\n    /**\r\n     * @param {string} queryId\r\n     * @return {!OperationSource}\r\n     */\r\n    OperationSource.forServerTaggedQuery = function (queryId) {\r\n        return new OperationSource(false, \r\n        /*fromServer=*/ true, queryId, \r\n        /*tagged=*/ true);\r\n    };\r\n    return OperationSource;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar AckUserWrite = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.\r\n     * @param {!boolean} revert\r\n     */\r\n    function AckUserWrite(\r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ affectedTree, \r\n    /** @inheritDoc */ revert) {\r\n        this.path = path;\r\n        this.affectedTree = affectedTree;\r\n        this.revert = revert;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.ACK_USER_WRITE;\r\n        /** @inheritDoc */\r\n        this.source = OperationSource.User;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    AckUserWrite.prototype.operationForChild = function (childName) {\r\n        if (!this.path.isEmpty()) {\r\n            util.assert(this.path.getFront() === childName, 'operationForChild called for unrelated child.');\r\n            return new AckUserWrite(this.path.popFront(), this.affectedTree, this.revert);\r\n        }\r\n        else if (this.affectedTree.value != null) {\r\n            util.assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\r\n            // All child locations are affected as well; just return same operation.\r\n            return this;\r\n        }\r\n        else {\r\n            var childTree = this.affectedTree.subtree(new Path(childName));\r\n            return new AckUserWrite(Path.Empty, childTree, this.revert);\r\n        }\r\n    };\r\n    return AckUserWrite;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar emptyChildrenSingleton;\r\n/**\r\n * Singleton empty children collection.\r\n *\r\n * @const\r\n * @type {!SortedMap.<string, !ImmutableTree.<?>>}\r\n */\r\nvar EmptyChildren = function () {\r\n    if (!emptyChildrenSingleton) {\r\n        emptyChildrenSingleton = new SortedMap(stringCompare);\r\n    }\r\n    return emptyChildrenSingleton;\r\n};\r\n/**\r\n * A tree with immutable elements.\r\n */\r\nvar ImmutableTree = /** @class */ (function () {\r\n    /**\r\n     * @template T\r\n     * @param {?T} value\r\n     * @param {SortedMap.<string, !ImmutableTree.<T>>=} children\r\n     */\r\n    function ImmutableTree(value, children) {\r\n        if (children === void 0) { children = EmptyChildren(); }\r\n        this.value = value;\r\n        this.children = children;\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {!Object.<string, !T>} obj\r\n     * @return {!ImmutableTree.<!T>}\r\n     */\r\n    ImmutableTree.fromObject = function (obj) {\r\n        var tree = ImmutableTree.Empty;\r\n        each(obj, function (childPath, childSnap) {\r\n            tree = tree.set(new Path(childPath), childSnap);\r\n        });\r\n        return tree;\r\n    };\r\n    /**\r\n     * True if the value is empty and there are no children\r\n     * @return {boolean}\r\n     */\r\n    ImmutableTree.prototype.isEmpty = function () {\r\n        return this.value === null && this.children.isEmpty();\r\n    };\r\n    /**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects\r\n     * on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param {!Path} relativePath The remainder of the path\r\n     * @param {function(T):boolean} predicate The predicate to satisfy to return a\r\n     *   node\r\n     * @return {?{path:!Path, value:!T}}\r\n     */\r\n    ImmutableTree.prototype.findRootMostMatchingPathAndValue = function (relativePath, predicate) {\r\n        if (this.value != null && predicate(this.value)) {\r\n            return { path: Path.Empty, value: this.value };\r\n        }\r\n        else {\r\n            if (relativePath.isEmpty()) {\r\n                return null;\r\n            }\r\n            else {\r\n                var front = relativePath.getFront();\r\n                var child = this.children.get(front);\r\n                if (child !== null) {\r\n                    var childExistingPathAndValue = child.findRootMostMatchingPathAndValue(relativePath.popFront(), predicate);\r\n                    if (childExistingPathAndValue != null) {\r\n                        var fullPath = new Path(front).child(childExistingPathAndValue.path);\r\n                        return { path: fullPath, value: childExistingPathAndValue.value };\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     * @param {!Path} relativePath\r\n     * @return {?{path: !Path, value: !T}}\r\n     */\r\n    ImmutableTree.prototype.findRootMostValueAndPath = function (relativePath) {\r\n        return this.findRootMostMatchingPathAndValue(relativePath, function () { return true; });\r\n    };\r\n    /**\r\n     * @param {!Path} relativePath\r\n     * @return {!ImmutableTree.<T>} The subtree at the given path\r\n     */\r\n    ImmutableTree.prototype.subtree = function (relativePath) {\r\n        if (relativePath.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var childTree = this.children.get(front);\r\n            if (childTree !== null) {\r\n                return childTree.subtree(relativePath.popFront());\r\n            }\r\n            else {\r\n                return ImmutableTree.Empty;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param {!Path} relativePath Path to set value at.\r\n     * @param {?T} toSet Value to set.\r\n     * @return {!ImmutableTree.<T>} Resulting tree.\r\n     */\r\n    ImmutableTree.prototype.set = function (relativePath, toSet) {\r\n        if (relativePath.isEmpty()) {\r\n            return new ImmutableTree(toSet, this.children);\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front) || ImmutableTree.Empty;\r\n            var newChild = child.set(relativePath.popFront(), toSet);\r\n            var newChildren = this.children.insert(front, newChild);\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    };\r\n    /**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param {!Path} relativePath Path to value to remove.\r\n     * @return {!ImmutableTree.<T>} Resulting tree.\r\n     */\r\n    ImmutableTree.prototype.remove = function (relativePath) {\r\n        if (relativePath.isEmpty()) {\r\n            if (this.children.isEmpty()) {\r\n                return ImmutableTree.Empty;\r\n            }\r\n            else {\r\n                return new ImmutableTree(null, this.children);\r\n            }\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front);\r\n            if (child) {\r\n                var newChild = child.remove(relativePath.popFront());\r\n                var newChildren = void 0;\r\n                if (newChild.isEmpty()) {\r\n                    newChildren = this.children.remove(front);\r\n                }\r\n                else {\r\n                    newChildren = this.children.insert(front, newChild);\r\n                }\r\n                if (this.value === null && newChildren.isEmpty()) {\r\n                    return ImmutableTree.Empty;\r\n                }\r\n                else {\r\n                    return new ImmutableTree(this.value, newChildren);\r\n                }\r\n            }\r\n            else {\r\n                return this;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param {!Path} relativePath Path to get value for.\r\n     * @return {?T} Value at path, or null.\r\n     */\r\n    ImmutableTree.prototype.get = function (relativePath) {\r\n        if (relativePath.isEmpty()) {\r\n            return this.value;\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front);\r\n            if (child) {\r\n                return child.get(relativePath.popFront());\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param {!Path} relativePath Path to replace subtree for.\r\n     * @param {!ImmutableTree} newTree New tree.\r\n     * @return {!ImmutableTree} Resulting tree.\r\n     */\r\n    ImmutableTree.prototype.setTree = function (relativePath, newTree) {\r\n        if (relativePath.isEmpty()) {\r\n            return newTree;\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front) || ImmutableTree.Empty;\r\n            var newChild = child.setTree(relativePath.popFront(), newTree);\r\n            var newChildren = void 0;\r\n            if (newChild.isEmpty()) {\r\n                newChildren = this.children.remove(front);\r\n            }\r\n            else {\r\n                newChildren = this.children.insert(front, newChild);\r\n            }\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    };\r\n    /**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     * @template V\r\n     * @param {function(Path, ?T, Object.<string, V>):V} fn\r\n     * @return {V}\r\n     */\r\n    ImmutableTree.prototype.fold = function (fn) {\r\n        return this.fold_(Path.Empty, fn);\r\n    };\r\n    /**\r\n     * Recursive helper for public-facing fold() method\r\n     * @template V\r\n     * @param {!Path} pathSoFar\r\n     * @param {function(Path, ?T, Object.<string, V>):V} fn\r\n     * @return {V}\r\n     * @private\r\n     */\r\n    ImmutableTree.prototype.fold_ = function (pathSoFar, fn) {\r\n        var accum = {};\r\n        this.children.inorderTraversal(function (childKey, childTree) {\r\n            accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);\r\n        });\r\n        return fn(pathSoFar, this.value, accum);\r\n    };\r\n    /**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     * @template V\r\n     * @param {!Path} path\r\n     * @param {!function(!Path, !T):?V} f\r\n     * @return {?V}\r\n     */\r\n    ImmutableTree.prototype.findOnPath = function (path, f) {\r\n        return this.findOnPath_(path, Path.Empty, f);\r\n    };\r\n    ImmutableTree.prototype.findOnPath_ = function (pathToFollow, pathSoFar, f) {\r\n        var result = this.value ? f(pathSoFar, this.value) : false;\r\n        if (result) {\r\n            return result;\r\n        }\r\n        else {\r\n            if (pathToFollow.isEmpty()) {\r\n                return null;\r\n            }\r\n            else {\r\n                var front = pathToFollow.getFront();\r\n                var nextChild = this.children.get(front);\r\n                if (nextChild) {\r\n                    return nextChild.findOnPath_(pathToFollow.popFront(), pathSoFar.child(front), f);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!function(!Path, !T)} f\r\n     * @returns {!ImmutableTree.<T>}\r\n     */\r\n    ImmutableTree.prototype.foreachOnPath = function (path, f) {\r\n        return this.foreachOnPath_(path, Path.Empty, f);\r\n    };\r\n    ImmutableTree.prototype.foreachOnPath_ = function (pathToFollow, currentRelativePath, f) {\r\n        if (pathToFollow.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            if (this.value) {\r\n                f(currentRelativePath, this.value);\r\n            }\r\n            var front = pathToFollow.getFront();\r\n            var nextChild = this.children.get(front);\r\n            if (nextChild) {\r\n                return nextChild.foreachOnPath_(pathToFollow.popFront(), currentRelativePath.child(front), f);\r\n            }\r\n            else {\r\n                return ImmutableTree.Empty;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param {function(!Path, !T)} f A function to be called with\r\n     *   the path from the root of the tree to a node, and the value at that node.\r\n     *   Called in depth-first order.\r\n     */\r\n    ImmutableTree.prototype.foreach = function (f) {\r\n        this.foreach_(Path.Empty, f);\r\n    };\r\n    ImmutableTree.prototype.foreach_ = function (currentRelativePath, f) {\r\n        this.children.inorderTraversal(function (childName, childTree) {\r\n            childTree.foreach_(currentRelativePath.child(childName), f);\r\n        });\r\n        if (this.value) {\r\n            f(currentRelativePath, this.value);\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {function(string, !T)} f\r\n     */\r\n    ImmutableTree.prototype.foreachChild = function (f) {\r\n        this.children.inorderTraversal(function (childName, childTree) {\r\n            if (childTree.value) {\r\n                f(childName, childTree.value);\r\n            }\r\n        });\r\n    };\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    ImmutableTree.Empty = new ImmutableTree(null);\r\n    return ImmutableTree;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @constructor\r\n * @implements {Operation}\r\n */\r\nvar ListenComplete = /** @class */ (function () {\r\n    function ListenComplete(source, path) {\r\n        this.source = source;\r\n        this.path = path;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.LISTEN_COMPLETE;\r\n    }\r\n    ListenComplete.prototype.operationForChild = function (childName) {\r\n        if (this.path.isEmpty()) {\r\n            return new ListenComplete(this.source, Path.Empty);\r\n        }\r\n        else {\r\n            return new ListenComplete(this.source, this.path.popFront());\r\n        }\r\n    };\r\n    return ListenComplete;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @param {!Node} snap\r\n * @constructor\r\n * @implements {Operation}\r\n */\r\nvar Overwrite = /** @class */ (function () {\r\n    function Overwrite(source, path, snap) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.snap = snap;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.OVERWRITE;\r\n    }\r\n    Overwrite.prototype.operationForChild = function (childName) {\r\n        if (this.path.isEmpty()) {\r\n            return new Overwrite(this.source, Path.Empty, this.snap.getImmediateChild(childName));\r\n        }\r\n        else {\r\n            return new Overwrite(this.source, this.path.popFront(), this.snap);\r\n        }\r\n    };\r\n    return Overwrite;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @param {!ImmutableTree.<!Node>} children\r\n * @constructor\r\n * @implements {Operation}\r\n */\r\nvar Merge = /** @class */ (function () {\r\n    function Merge(\r\n    /** @inheritDoc */ source, \r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ children) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.children = children;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.MERGE;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    Merge.prototype.operationForChild = function (childName) {\r\n        if (this.path.isEmpty()) {\r\n            var childTree = this.children.subtree(new Path(childName));\r\n            if (childTree.isEmpty()) {\r\n                // This child is unaffected\r\n                return null;\r\n            }\r\n            else if (childTree.value) {\r\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\r\n                return new Overwrite(this.source, Path.Empty, childTree.value);\r\n            }\r\n            else {\r\n                // This is a merge at a deeper level\r\n                return new Merge(this.source, Path.Empty, childTree);\r\n            }\r\n        }\r\n        else {\r\n            util.assert(this.path.getFront() === childName, \"Can't get a merge for a child not on the path of the operation\");\r\n            return new Merge(this.source, this.path.popFront(), this.children);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    Merge.prototype.toString = function () {\r\n        return ('Operation(' +\r\n            this.path +\r\n            ': ' +\r\n            this.source.toString() +\r\n            ' merge: ' +\r\n            this.children.toString() +\r\n            ')');\r\n    };\r\n    return Merge;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\r\nvar CacheNode = /** @class */ (function () {\r\n    /**\r\n     * @param {!Node} node_\r\n     * @param {boolean} fullyInitialized_\r\n     * @param {boolean} filtered_\r\n     */\r\n    function CacheNode(node_, fullyInitialized_, filtered_) {\r\n        this.node_ = node_;\r\n        this.fullyInitialized_ = fullyInitialized_;\r\n        this.filtered_ = filtered_;\r\n    }\r\n    /**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isFullyInitialized = function () {\r\n        return this.fullyInitialized_;\r\n    };\r\n    /**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isFiltered = function () {\r\n        return this.filtered_;\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isCompleteForPath = function (path) {\r\n        if (path.isEmpty()) {\r\n            return this.isFullyInitialized() && !this.filtered_;\r\n        }\r\n        var childKey = path.getFront();\r\n        return this.isCompleteForChild(childKey);\r\n    };\r\n    /**\r\n     * @param {!string} key\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isCompleteForChild = function (key) {\r\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\r\n    };\r\n    /**\r\n     * @return {!Node}\r\n     */\r\n    CacheNode.prototype.getNode = function () {\r\n        return this.node_;\r\n    };\r\n    return CacheNode;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Stores the data we have cached for a view.\r\n *\r\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\r\n *\r\n * @constructor\r\n */\r\nvar ViewCache = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!CacheNode} eventCache_\r\n     * @param {!CacheNode} serverCache_\r\n     */\r\n    function ViewCache(eventCache_, serverCache_) {\r\n        this.eventCache_ = eventCache_;\r\n        this.serverCache_ = serverCache_;\r\n    }\r\n    /**\r\n     * @param {!Node} eventSnap\r\n     * @param {boolean} complete\r\n     * @param {boolean} filtered\r\n     * @return {!ViewCache}\r\n     */\r\n    ViewCache.prototype.updateEventSnap = function (eventSnap, complete, filtered) {\r\n        return new ViewCache(new CacheNode(eventSnap, complete, filtered), this.serverCache_);\r\n    };\r\n    /**\r\n     * @param {!Node} serverSnap\r\n     * @param {boolean} complete\r\n     * @param {boolean} filtered\r\n     * @return {!ViewCache}\r\n     */\r\n    ViewCache.prototype.updateServerSnap = function (serverSnap, complete, filtered) {\r\n        return new ViewCache(this.eventCache_, new CacheNode(serverSnap, complete, filtered));\r\n    };\r\n    /**\r\n     * @return {!CacheNode}\r\n     */\r\n    ViewCache.prototype.getEventCache = function () {\r\n        return this.eventCache_;\r\n    };\r\n    /**\r\n     * @return {?Node}\r\n     */\r\n    ViewCache.prototype.getCompleteEventSnap = function () {\r\n        return this.eventCache_.isFullyInitialized()\r\n            ? this.eventCache_.getNode()\r\n            : null;\r\n    };\r\n    /**\r\n     * @return {!CacheNode}\r\n     */\r\n    ViewCache.prototype.getServerCache = function () {\r\n        return this.serverCache_;\r\n    };\r\n    /**\r\n     * @return {?Node}\r\n     */\r\n    ViewCache.prototype.getCompleteServerSnap = function () {\r\n        return this.serverCache_.isFullyInitialized()\r\n            ? this.serverCache_.getNode()\r\n            : null;\r\n    };\r\n    /**\r\n     * @const\r\n     * @type {ViewCache}\r\n     */\r\n    ViewCache.Empty = new ViewCache(new CacheNode(ChildrenNode.EMPTY_NODE, \r\n    /*fullyInitialized=*/ false, \r\n    /*filtered=*/ false), new CacheNode(ChildrenNode.EMPTY_NODE, \r\n    /*fullyInitialized=*/ false, \r\n    /*filtered=*/ false));\r\n    return ViewCache;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n * @struct\r\n * @param {!string} type The event type\r\n * @param {!Node} snapshotNode The data\r\n * @param {string=} childName The name for this child, if it's a child event\r\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\r\n * @param {string=} prevName The name for the previous child, if applicable\r\n */\r\nvar Change = /** @class */ (function () {\r\n    function Change(type, snapshotNode, childName, oldSnap, prevName) {\r\n        this.type = type;\r\n        this.snapshotNode = snapshotNode;\r\n        this.childName = childName;\r\n        this.oldSnap = oldSnap;\r\n        this.prevName = prevName;\r\n    }\r\n    /**\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.valueChange = function (snapshot) {\r\n        return new Change(Change.VALUE, snapshot);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childAddedChange = function (childKey, snapshot) {\r\n        return new Change(Change.CHILD_ADDED, snapshot, childKey);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childRemovedChange = function (childKey, snapshot) {\r\n        return new Change(Change.CHILD_REMOVED, snapshot, childKey);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} newSnapshot\r\n     * @param {!Node} oldSnapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childChangedChange = function (childKey, newSnapshot, oldSnapshot) {\r\n        return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childMovedChange = function (childKey, snapshot) {\r\n        return new Change(Change.CHILD_MOVED, snapshot, childKey);\r\n    };\r\n    //event types\r\n    /** Event type for a child added */\r\n    Change.CHILD_ADDED = 'child_added';\r\n    /** Event type for a child removed */\r\n    Change.CHILD_REMOVED = 'child_removed';\r\n    /** Event type for a child changed */\r\n    Change.CHILD_CHANGED = 'child_changed';\r\n    /** Event type for a child moved */\r\n    Change.CHILD_MOVED = 'child_moved';\r\n    /** Event type for a value change */\r\n    Change.VALUE = 'value';\r\n    return Change;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n * @param {!Index} index\r\n */\r\nvar IndexedFilter = /** @class */ (function () {\r\n    function IndexedFilter(index_) {\r\n        this.index_ = index_;\r\n    }\r\n    IndexedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        util.assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\r\n        var oldChild = snap.getImmediateChild(key);\r\n        // Check if anything actually changed.\r\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\r\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\r\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\r\n            // to avoid treating these cases as \"nothing changed.\"\r\n            if (oldChild.isEmpty() === newChild.isEmpty()) {\r\n                // Nothing changed.\r\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\r\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\r\n                return snap;\r\n            }\r\n        }\r\n        if (optChangeAccumulator != null) {\r\n            if (newChild.isEmpty()) {\r\n                if (snap.hasChild(key)) {\r\n                    optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, oldChild));\r\n                }\r\n                else {\r\n                    util.assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\r\n                }\r\n            }\r\n            else if (oldChild.isEmpty()) {\r\n                optChangeAccumulator.trackChildChange(Change.childAddedChange(key, newChild));\r\n            }\r\n            else {\r\n                optChangeAccumulator.trackChildChange(Change.childChangedChange(key, newChild, oldChild));\r\n            }\r\n        }\r\n        if (snap.isLeafNode() && newChild.isEmpty()) {\r\n            return snap;\r\n        }\r\n        else {\r\n            // Make sure the node is indexed\r\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\r\n        if (optChangeAccumulator != null) {\r\n            if (!oldSnap.isLeafNode()) {\r\n                oldSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                    if (!newSnap.hasChild(key)) {\r\n                        optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n            if (!newSnap.isLeafNode()) {\r\n                newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                    if (oldSnap.hasChild(key)) {\r\n                        var oldChild = oldSnap.getImmediateChild(key);\r\n                        if (!oldChild.equals(childNode)) {\r\n                            optChangeAccumulator.trackChildChange(Change.childChangedChange(key, childNode, oldChild));\r\n                        }\r\n                    }\r\n                    else {\r\n                        optChangeAccumulator.trackChildChange(Change.childAddedChange(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return newSnap.withIndex(this.index_);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\r\n        if (oldSnap.isEmpty()) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        else {\r\n            return oldSnap.updatePriority(newPriority);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.filtersNodes = function () {\r\n        return false;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.getIndexedFilter = function () {\r\n        return this;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    return IndexedFilter;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar ChildChangeAccumulator = /** @class */ (function () {\r\n    function ChildChangeAccumulator() {\r\n        this.changeMap = new Map();\r\n    }\r\n    ChildChangeAccumulator.prototype.trackChildChange = function (change) {\r\n        var type = change.type;\r\n        var childKey = change.childName;\r\n        util.assert(type === Change.CHILD_ADDED ||\r\n            type === Change.CHILD_CHANGED ||\r\n            type === Change.CHILD_REMOVED, 'Only child changes supported for tracking');\r\n        util.assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\r\n        var oldChange = this.changeMap.get(childKey);\r\n        if (oldChange) {\r\n            var oldType = oldChange.type;\r\n            if (type === Change.CHILD_ADDED && oldType === Change.CHILD_REMOVED) {\r\n                this.changeMap.set(childKey, Change.childChangedChange(childKey, change.snapshotNode, oldChange.snapshotNode));\r\n            }\r\n            else if (type === Change.CHILD_REMOVED &&\r\n                oldType === Change.CHILD_ADDED) {\r\n                this.changeMap.delete(childKey);\r\n            }\r\n            else if (type === Change.CHILD_REMOVED &&\r\n                oldType === Change.CHILD_CHANGED) {\r\n                this.changeMap.set(childKey, Change.childRemovedChange(childKey, oldChange.oldSnap));\r\n            }\r\n            else if (type === Change.CHILD_CHANGED &&\r\n                oldType === Change.CHILD_ADDED) {\r\n                this.changeMap.set(childKey, Change.childAddedChange(childKey, change.snapshotNode));\r\n            }\r\n            else if (type === Change.CHILD_CHANGED &&\r\n                oldType === Change.CHILD_CHANGED) {\r\n                this.changeMap.set(childKey, Change.childChangedChange(childKey, change.snapshotNode, oldChange.oldSnap));\r\n            }\r\n            else {\r\n                throw util.assertionError('Illegal combination of changes: ' +\r\n                    change +\r\n                    ' occurred after ' +\r\n                    oldChange);\r\n            }\r\n        }\r\n        else {\r\n            this.changeMap.set(childKey, change);\r\n        }\r\n    };\r\n    ChildChangeAccumulator.prototype.getChanges = function () {\r\n        return Array.from(this.changeMap.values());\r\n    };\r\n    return ChildChangeAccumulator;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n *\r\n * @private\r\n * @constructor\r\n * @implements CompleteChildSource\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nvar NoCompleteChildSource_ = /** @class */ (function () {\r\n    function NoCompleteChildSource_() {\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    NoCompleteChildSource_.prototype.getCompleteChild = function (childKey) {\r\n        return null;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    NoCompleteChildSource_.prototype.getChildAfterChild = function (index, child, reverse) {\r\n        return null;\r\n    };\r\n    return NoCompleteChildSource_;\r\n}());\r\n/**\r\n * Singleton instance.\r\n * @const\r\n * @type {!CompleteChildSource}\r\n */\r\nvar NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\r\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n *\r\n *\r\n * @implements CompleteChildSource\r\n */\r\nvar WriteTreeCompleteChildSource = /** @class */ (function () {\r\n    /**\r\n     * @param {!WriteTreeRef} writes_\r\n     * @param {!ViewCache} viewCache_\r\n     * @param {?Node} optCompleteServerCache_\r\n     */\r\n    function WriteTreeCompleteChildSource(writes_, viewCache_, optCompleteServerCache_) {\r\n        if (optCompleteServerCache_ === void 0) { optCompleteServerCache_ = null; }\r\n        this.writes_ = writes_;\r\n        this.viewCache_ = viewCache_;\r\n        this.optCompleteServerCache_ = optCompleteServerCache_;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    WriteTreeCompleteChildSource.prototype.getCompleteChild = function (childKey) {\r\n        var node = this.viewCache_.getEventCache();\r\n        if (node.isCompleteForChild(childKey)) {\r\n            return node.getNode().getImmediateChild(childKey);\r\n        }\r\n        else {\r\n            var serverNode = this.optCompleteServerCache_ != null\r\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\r\n                : this.viewCache_.getServerCache();\r\n            return this.writes_.calcCompleteChild(childKey, serverNode);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    WriteTreeCompleteChildSource.prototype.getChildAfterChild = function (index, child, reverse) {\r\n        var completeServerData = this.optCompleteServerCache_ != null\r\n            ? this.optCompleteServerCache_\r\n            : this.viewCache_.getCompleteServerSnap();\r\n        var nodes = this.writes_.calcIndexedSlice(completeServerData, child, 1, reverse, index);\r\n        if (nodes.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return nodes[0];\r\n        }\r\n    };\r\n    return WriteTreeCompleteChildSource;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n * @struct\r\n */\r\nvar ProcessorResult = /** @class */ (function () {\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Array.<!Change>} changes\r\n     */\r\n    function ProcessorResult(viewCache, changes) {\r\n        this.viewCache = viewCache;\r\n        this.changes = changes;\r\n    }\r\n    return ProcessorResult;\r\n}());\r\n/**\r\n * @constructor\r\n */\r\nvar ViewProcessor = /** @class */ (function () {\r\n    /**\r\n     * @param {!NodeFilter} filter_\r\n     */\r\n    function ViewProcessor(filter_) {\r\n        this.filter_ = filter_;\r\n    }\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     */\r\n    ViewProcessor.prototype.assertIndexed = function (viewCache) {\r\n        util.assert(viewCache.getEventCache().getNode().isIndexed(this.filter_.getIndex()), 'Event snap not indexed');\r\n        util.assert(viewCache.getServerCache().getNode().isIndexed(this.filter_.getIndex()), 'Server snap not indexed');\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!Operation} operation\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @return {!ProcessorResult}\r\n     */\r\n    ViewProcessor.prototype.applyOperation = function (oldViewCache, operation, writesCache, completeCache) {\r\n        var accumulator = new ChildChangeAccumulator();\r\n        var newViewCache, filterServerNode;\r\n        if (operation.type === OperationType.OVERWRITE) {\r\n            var overwrite = operation;\r\n            if (overwrite.source.fromUser) {\r\n                newViewCache = this.applyUserOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\r\n            }\r\n            else {\r\n                util.assert(overwrite.source.fromServer, 'Unknown source.');\r\n                // We filter the node if it's a tagged update or the node has been previously filtered  and the\r\n                // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\r\n                // again\r\n                filterServerNode =\r\n                    overwrite.source.tagged ||\r\n                        (oldViewCache.getServerCache().isFiltered() &&\r\n                            !overwrite.path.isEmpty());\r\n                newViewCache = this.applyServerOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n        }\r\n        else if (operation.type === OperationType.MERGE) {\r\n            var merge = operation;\r\n            if (merge.source.fromUser) {\r\n                newViewCache = this.applyUserMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\r\n            }\r\n            else {\r\n                util.assert(merge.source.fromServer, 'Unknown source.');\r\n                // We filter the node if it's a tagged update or the node has been previously filtered\r\n                filterServerNode =\r\n                    merge.source.tagged || oldViewCache.getServerCache().isFiltered();\r\n                newViewCache = this.applyServerMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n        }\r\n        else if (operation.type === OperationType.ACK_USER_WRITE) {\r\n            var ackUserWrite = operation;\r\n            if (!ackUserWrite.revert) {\r\n                newViewCache = this.ackUserWrite_(oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\r\n            }\r\n            else {\r\n                newViewCache = this.revertUserWrite_(oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\r\n            }\r\n        }\r\n        else if (operation.type === OperationType.LISTEN_COMPLETE) {\r\n            newViewCache = this.listenComplete_(oldViewCache, operation.path, writesCache, accumulator);\r\n        }\r\n        else {\r\n            throw util.assertionError('Unknown operation type: ' + operation.type);\r\n        }\r\n        var changes = accumulator.getChanges();\r\n        ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);\r\n        return new ProcessorResult(newViewCache, changes);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!ViewCache} newViewCache\r\n     * @param {!Array.<!Change>} accumulator\r\n     * @private\r\n     */\r\n    ViewProcessor.maybeAddValueEvent_ = function (oldViewCache, newViewCache, accumulator) {\r\n        var eventSnap = newViewCache.getEventCache();\r\n        if (eventSnap.isFullyInitialized()) {\r\n            var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\r\n            var oldCompleteSnap = oldViewCache.getCompleteEventSnap();\r\n            if (accumulator.length > 0 ||\r\n                !oldViewCache.getEventCache().isFullyInitialized() ||\r\n                (isLeafOrEmpty &&\r\n                    !eventSnap.getNode().equals(/** @type {!Node} */ oldCompleteSnap)) ||\r\n                !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\r\n                accumulator.push(Change.valueChange(\r\n                /** @type {!Node} */ newViewCache.getCompleteEventSnap()));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} changePath\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {!CompleteChildSource} source\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.generateEventCacheAfterServerEvent_ = function (viewCache, changePath, writesCache, source, accumulator) {\r\n        var oldEventSnap = viewCache.getEventCache();\r\n        if (writesCache.shadowingWrite(changePath) != null) {\r\n            // we have a shadowing write, ignore changes\r\n            return viewCache;\r\n        }\r\n        else {\r\n            var newEventCache = void 0, serverNode = void 0;\r\n            if (changePath.isEmpty()) {\r\n                // TODO: figure out how this plays with \"sliding ack windows\"\r\n                util.assert(viewCache.getServerCache().isFullyInitialized(), 'If change path is empty, we must have complete server data');\r\n                if (viewCache.getServerCache().isFiltered()) {\r\n                    // We need to special case this, because we need to only apply writes to complete children, or\r\n                    // we might end up raising events for incomplete children. If the server data is filtered deep\r\n                    // writes cannot be guaranteed to be complete\r\n                    var serverCache = viewCache.getCompleteServerSnap();\r\n                    var completeChildren = serverCache instanceof ChildrenNode\r\n                        ? serverCache\r\n                        : ChildrenNode.EMPTY_NODE;\r\n                    var completeEventChildren = writesCache.calcCompleteEventChildren(completeChildren);\r\n                    newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeEventChildren, accumulator);\r\n                }\r\n                else {\r\n                    var completeNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\r\n                    newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeNode, accumulator);\r\n                }\r\n            }\r\n            else {\r\n                var childKey = changePath.getFront();\r\n                if (childKey === '.priority') {\r\n                    util.assert(changePath.getLength() === 1, \"Can't have a priority with additional path components\");\r\n                    var oldEventNode = oldEventSnap.getNode();\r\n                    serverNode = viewCache.getServerCache().getNode();\r\n                    // we might have overwrites for this priority\r\n                    var updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventNode, serverNode);\r\n                    if (updatedPriority != null) {\r\n                        newEventCache = this.filter_.updatePriority(oldEventNode, updatedPriority);\r\n                    }\r\n                    else {\r\n                        // priority didn't change, keep old node\r\n                        newEventCache = oldEventSnap.getNode();\r\n                    }\r\n                }\r\n                else {\r\n                    var childChangePath = changePath.popFront();\r\n                    // update child\r\n                    var newEventChild = void 0;\r\n                    if (oldEventSnap.isCompleteForChild(childKey)) {\r\n                        serverNode = viewCache.getServerCache().getNode();\r\n                        var eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventSnap.getNode(), serverNode);\r\n                        if (eventChildUpdate != null) {\r\n                            newEventChild = oldEventSnap\r\n                                .getNode()\r\n                                .getImmediateChild(childKey)\r\n                                .updateChild(childChangePath, eventChildUpdate);\r\n                        }\r\n                        else {\r\n                            // Nothing changed, just keep the old child\r\n                            newEventChild = oldEventSnap\r\n                                .getNode()\r\n                                .getImmediateChild(childKey);\r\n                        }\r\n                    }\r\n                    else {\r\n                        newEventChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\r\n                    }\r\n                    if (newEventChild != null) {\r\n                        newEventCache = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\r\n                    }\r\n                    else {\r\n                        // no complete child available or no change\r\n                        newEventCache = oldEventSnap.getNode();\r\n                    }\r\n                }\r\n            }\r\n            return viewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized() || changePath.isEmpty(), this.filter_.filtersNodes());\r\n        }\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!Path} changePath\r\n     * @param {!Node} changedSnap\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @param {boolean} filterServerNode\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyServerOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\r\n        var oldServerSnap = oldViewCache.getServerCache();\r\n        var newServerCache;\r\n        var serverFilter = filterServerNode\r\n            ? this.filter_\r\n            : this.filter_.getIndexedFilter();\r\n        if (changePath.isEmpty()) {\r\n            newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\r\n        }\r\n        else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\r\n            // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\r\n            var newServerNode = oldServerSnap\r\n                .getNode()\r\n                .updateChild(changePath, changedSnap);\r\n            newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\r\n        }\r\n        else {\r\n            var childKey = changePath.getFront();\r\n            if (!oldServerSnap.isCompleteForPath(changePath) &&\r\n                changePath.getLength() > 1) {\r\n                // We don't update incomplete nodes with updates intended for other listeners\r\n                return oldViewCache;\r\n            }\r\n            var childChangePath = changePath.popFront();\r\n            var childNode = oldServerSnap.getNode().getImmediateChild(childKey);\r\n            var newChildNode = childNode.updateChild(childChangePath, changedSnap);\r\n            if (childKey === '.priority') {\r\n                newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\r\n            }\r\n            else {\r\n                newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\r\n            }\r\n        }\r\n        var newViewCache = oldViewCache.updateServerSnap(newServerCache, oldServerSnap.isFullyInitialized() || changePath.isEmpty(), serverFilter.filtersNodes());\r\n        var source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\r\n        return this.generateEventCacheAfterServerEvent_(newViewCache, changePath, writesCache, source, accumulator);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!Path} changePath\r\n     * @param {!Node} changedSnap\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyUserOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\r\n        var oldEventSnap = oldViewCache.getEventCache();\r\n        var newViewCache, newEventCache;\r\n        var source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\r\n        if (changePath.isEmpty()) {\r\n            newEventCache = this.filter_.updateFullNode(oldViewCache.getEventCache().getNode(), changedSnap, accumulator);\r\n            newViewCache = oldViewCache.updateEventSnap(newEventCache, true, this.filter_.filtersNodes());\r\n        }\r\n        else {\r\n            var childKey = changePath.getFront();\r\n            if (childKey === '.priority') {\r\n                newEventCache = this.filter_.updatePriority(oldViewCache.getEventCache().getNode(), changedSnap);\r\n                newViewCache = oldViewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\r\n            }\r\n            else {\r\n                var childChangePath = changePath.popFront();\r\n                var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n                var newChild = void 0;\r\n                if (childChangePath.isEmpty()) {\r\n                    // Child overwrite, we can replace the child\r\n                    newChild = changedSnap;\r\n                }\r\n                else {\r\n                    var childNode = source.getCompleteChild(childKey);\r\n                    if (childNode != null) {\r\n                        if (childChangePath.getBack() === '.priority' &&\r\n                            childNode.getChild(childChangePath.parent()).isEmpty()) {\r\n                            // This is a priority update on an empty node. If this node exists on the server, the\r\n                            // server will send down the priority in the update, so ignore for now\r\n                            newChild = childNode;\r\n                        }\r\n                        else {\r\n                            newChild = childNode.updateChild(childChangePath, changedSnap);\r\n                        }\r\n                    }\r\n                    else {\r\n                        // There is no complete child node available\r\n                        newChild = ChildrenNode.EMPTY_NODE;\r\n                    }\r\n                }\r\n                if (!oldChild.equals(newChild)) {\r\n                    var newEventSnap = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\r\n                    newViewCache = oldViewCache.updateEventSnap(newEventSnap, oldEventSnap.isFullyInitialized(), this.filter_.filtersNodes());\r\n                }\r\n                else {\r\n                    newViewCache = oldViewCache;\r\n                }\r\n            }\r\n        }\r\n        return newViewCache;\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {string} childKey\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    ViewProcessor.cacheHasChild_ = function (viewCache, childKey) {\r\n        return viewCache.getEventCache().isCompleteForChild(childKey);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {ImmutableTree.<!Node>} changedChildren\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} serverCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyUserMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\r\n        var _this = this;\r\n        // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n        // window leaving room for new items.  It's important we process these changes first, so we\r\n        // iterate the changes twice, first processing any that affect items currently in view.\r\n        // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n        // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n        // not the other.\r\n        var curViewCache = viewCache;\r\n        changedChildren.foreach(function (relativePath, childNode) {\r\n            var writePath = path.child(relativePath);\r\n            if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\r\n                curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n            }\r\n        });\r\n        changedChildren.foreach(function (relativePath, childNode) {\r\n            var writePath = path.child(relativePath);\r\n            if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\r\n                curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n            }\r\n        });\r\n        return curViewCache;\r\n    };\r\n    /**\r\n     * @param {!Node} node\r\n     * @param {ImmutableTree.<!Node>} merge\r\n     * @return {!Node}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyMerge_ = function (node, merge) {\r\n        merge.foreach(function (relativePath, childNode) {\r\n            node = node.updateChild(relativePath, childNode);\r\n        });\r\n        return node;\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {!ImmutableTree.<!Node>} changedChildren\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} serverCache\r\n     * @param {boolean} filterServerNode\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyServerMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\r\n        var _this = this;\r\n        // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\r\n        // wait for the complete data update coming soon.\r\n        if (viewCache.getServerCache().getNode().isEmpty() &&\r\n            !viewCache.getServerCache().isFullyInitialized()) {\r\n            return viewCache;\r\n        }\r\n        // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n        // window leaving room for new items.  It's important we process these changes first, so we\r\n        // iterate the changes twice, first processing any that affect items currently in view.\r\n        // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n        // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n        // not the other.\r\n        var curViewCache = viewCache;\r\n        var viewMergeTree;\r\n        if (path.isEmpty()) {\r\n            viewMergeTree = changedChildren;\r\n        }\r\n        else {\r\n            viewMergeTree = ImmutableTree.Empty.setTree(path, changedChildren);\r\n        }\r\n        var serverNode = viewCache.getServerCache().getNode();\r\n        viewMergeTree.children.inorderTraversal(function (childKey, childTree) {\r\n            if (serverNode.hasChild(childKey)) {\r\n                var serverChild = viewCache\r\n                    .getServerCache()\r\n                    .getNode()\r\n                    .getImmediateChild(childKey);\r\n                var newChild = _this.applyMerge_(serverChild, childTree);\r\n                curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n            }\r\n        });\r\n        viewMergeTree.children.inorderTraversal(function (childKey, childMergeTree) {\r\n            var isUnknownDeepMerge = !viewCache.getServerCache().isCompleteForChild(childKey) &&\r\n                childMergeTree.value == null;\r\n            if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\r\n                var serverChild = viewCache\r\n                    .getServerCache()\r\n                    .getNode()\r\n                    .getImmediateChild(childKey);\r\n                var newChild = _this.applyMerge_(serverChild, childMergeTree);\r\n                curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n            }\r\n        });\r\n        return curViewCache;\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} ackPath\r\n     * @param {!ImmutableTree<!boolean>} affectedTree\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.ackUserWrite_ = function (viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\r\n        if (writesCache.shadowingWrite(ackPath) != null) {\r\n            return viewCache;\r\n        }\r\n        // Only filter server node if it is currently filtered\r\n        var filterServerNode = viewCache.getServerCache().isFiltered();\r\n        // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\r\n        // now that it won't be shadowed.\r\n        var serverCache = viewCache.getServerCache();\r\n        if (affectedTree.value != null) {\r\n            // This is an overwrite.\r\n            if ((ackPath.isEmpty() && serverCache.isFullyInitialized()) ||\r\n                serverCache.isCompleteForPath(ackPath)) {\r\n                return this.applyServerOverwrite_(viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n            else if (ackPath.isEmpty()) {\r\n                // This is a goofy edge case where we are acking data at this location but don't have full data.  We\r\n                // should just re-apply whatever we have in our cache as a merge.\r\n                var changedChildren_1 = ImmutableTree.Empty;\r\n                serverCache.getNode().forEachChild(KEY_INDEX, function (name, node) {\r\n                    changedChildren_1 = changedChildren_1.set(new Path(name), node);\r\n                });\r\n                return this.applyServerMerge_(viewCache, ackPath, changedChildren_1, writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n            else {\r\n                return viewCache;\r\n            }\r\n        }\r\n        else {\r\n            // This is a merge.\r\n            var changedChildren_2 = ImmutableTree.Empty;\r\n            affectedTree.foreach(function (mergePath, value) {\r\n                var serverCachePath = ackPath.child(mergePath);\r\n                if (serverCache.isCompleteForPath(serverCachePath)) {\r\n                    changedChildren_2 = changedChildren_2.set(mergePath, serverCache.getNode().getChild(serverCachePath));\r\n                }\r\n            });\r\n            return this.applyServerMerge_(viewCache, ackPath, changedChildren_2, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.listenComplete_ = function (viewCache, path, writesCache, accumulator) {\r\n        var oldServerNode = viewCache.getServerCache();\r\n        var newViewCache = viewCache.updateServerSnap(oldServerNode.getNode(), oldServerNode.isFullyInitialized() || path.isEmpty(), oldServerNode.isFiltered());\r\n        return this.generateEventCacheAfterServerEvent_(newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeServerCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.revertUserWrite_ = function (viewCache, path, writesCache, completeServerCache, accumulator) {\r\n        var complete;\r\n        if (writesCache.shadowingWrite(path) != null) {\r\n            return viewCache;\r\n        }\r\n        else {\r\n            var source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\r\n            var oldEventCache = viewCache.getEventCache().getNode();\r\n            var newEventCache = void 0;\r\n            if (path.isEmpty() || path.getFront() === '.priority') {\r\n                var newNode = void 0;\r\n                if (viewCache.getServerCache().isFullyInitialized()) {\r\n                    newNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\r\n                }\r\n                else {\r\n                    var serverChildren = viewCache.getServerCache().getNode();\r\n                    util.assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\r\n                    newNode = writesCache.calcCompleteEventChildren(serverChildren);\r\n                }\r\n                newNode = newNode;\r\n                newEventCache = this.filter_.updateFullNode(oldEventCache, newNode, accumulator);\r\n            }\r\n            else {\r\n                var childKey = path.getFront();\r\n                var newChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\r\n                if (newChild == null &&\r\n                    viewCache.getServerCache().isCompleteForChild(childKey)) {\r\n                    newChild = oldEventCache.getImmediateChild(childKey);\r\n                }\r\n                if (newChild != null) {\r\n                    newEventCache = this.filter_.updateChild(oldEventCache, childKey, newChild, path.popFront(), source, accumulator);\r\n                }\r\n                else if (viewCache.getEventCache().getNode().hasChild(childKey)) {\r\n                    // No complete child available, delete the existing one, if any\r\n                    newEventCache = this.filter_.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, path.popFront(), source, accumulator);\r\n                }\r\n                else {\r\n                    newEventCache = oldEventCache;\r\n                }\r\n                if (newEventCache.isEmpty() &&\r\n                    viewCache.getServerCache().isFullyInitialized()) {\r\n                    // We might have reverted all child writes. Maybe the old event was a leaf node\r\n                    complete = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\r\n                    if (complete.isLeafNode()) {\r\n                        newEventCache = this.filter_.updateFullNode(newEventCache, complete, accumulator);\r\n                    }\r\n                }\r\n            }\r\n            complete =\r\n                viewCache.getServerCache().isFullyInitialized() ||\r\n                    writesCache.shadowingWrite(Path.Empty) != null;\r\n            return viewCache.updateEventSnap(newEventCache, complete, this.filter_.filtersNodes());\r\n        }\r\n    };\r\n    return ViewProcessor;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n * @constructor\r\n */\r\nvar EventGenerator = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!Query} query_\r\n     */\r\n    function EventGenerator(query_) {\r\n        this.query_ = query_;\r\n        /**\r\n         * @private\r\n         * @type {!Index}\r\n         */\r\n        this.index_ = this.query_.getQueryParams().getIndex();\r\n    }\r\n    /**\r\n     * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n     * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n     *\r\n     * Notes:\r\n     *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n     *    our index.\r\n     *  - prevName will be calculated based on the index ordering.\r\n     *\r\n     * @param {!Array.<!Change>} changes\r\n     * @param {!Node} eventCache\r\n     * @param {!Array.<!EventRegistration>} eventRegistrations\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    EventGenerator.prototype.generateEventsForChanges = function (changes, eventCache, eventRegistrations) {\r\n        var _this = this;\r\n        var events = [];\r\n        var moves = [];\r\n        changes.forEach(function (change) {\r\n            if (change.type === Change.CHILD_CHANGED &&\r\n                _this.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\r\n                moves.push(Change.childMovedChange(change.childName, change.snapshotNode));\r\n            }\r\n        });\r\n        this.generateEventsForType_(events, Change.CHILD_REMOVED, changes, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.CHILD_ADDED, changes, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.CHILD_MOVED, moves, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.CHILD_CHANGED, changes, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.VALUE, changes, eventRegistrations, eventCache);\r\n        return events;\r\n    };\r\n    /**\r\n     * Given changes of a single change type, generate the corresponding events.\r\n     *\r\n     * @param {!Array.<!Event>} events\r\n     * @param {!string} eventType\r\n     * @param {!Array.<!Change>} changes\r\n     * @param {!Array.<!EventRegistration>} registrations\r\n     * @param {!Node} eventCache\r\n     * @private\r\n     */\r\n    EventGenerator.prototype.generateEventsForType_ = function (events, eventType, changes, registrations, eventCache) {\r\n        var _this = this;\r\n        var filteredChanges = changes.filter(function (change) { return change.type === eventType; });\r\n        filteredChanges.sort(this.compareChanges_.bind(this));\r\n        filteredChanges.forEach(function (change) {\r\n            var materializedChange = _this.materializeSingleChange_(change, eventCache);\r\n            registrations.forEach(function (registration) {\r\n                if (registration.respondsTo(change.type)) {\r\n                    events.push(registration.createEvent(materializedChange, _this.query_));\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Change} change\r\n     * @param {!Node} eventCache\r\n     * @return {!Change}\r\n     * @private\r\n     */\r\n    EventGenerator.prototype.materializeSingleChange_ = function (change, eventCache) {\r\n        if (change.type === 'value' || change.type === 'child_removed') {\r\n            return change;\r\n        }\r\n        else {\r\n            change.prevName = eventCache.getPredecessorChildName(\r\n            /** @type {!string} */\r\n            change.childName, change.snapshotNode, this.index_);\r\n            return change;\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Change} a\r\n     * @param {!Change} b\r\n     * @return {number}\r\n     * @private\r\n     */\r\n    EventGenerator.prototype.compareChanges_ = function (a, b) {\r\n        if (a.childName == null || b.childName == null) {\r\n            throw util.assertionError('Should only compare child_ events.');\r\n        }\r\n        var aWrapped = new NamedNode(a.childName, a.snapshotNode);\r\n        var bWrapped = new NamedNode(b.childName, b.snapshotNode);\r\n        return this.index_.compare(aWrapped, bWrapped);\r\n    };\r\n    return EventGenerator;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n * @constructor\r\n */\r\nvar View = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!Query} query_\r\n     * @param {!ViewCache} initialViewCache\r\n     */\r\n    function View(query_, initialViewCache) {\r\n        this.query_ = query_;\r\n        this.eventRegistrations_ = [];\r\n        var params = this.query_.getQueryParams();\r\n        var indexFilter = new IndexedFilter(params.getIndex());\r\n        var filter = params.getNodeFilter();\r\n        /**\r\n         * @type {ViewProcessor}\r\n         * @private\r\n         */\r\n        this.processor_ = new ViewProcessor(filter);\r\n        var initialServerCache = initialViewCache.getServerCache();\r\n        var initialEventCache = initialViewCache.getEventCache();\r\n        // Don't filter server node with other filter than index, wait for tagged listen\r\n        var serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\r\n        var eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\r\n        var newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\r\n        var newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\r\n        /**\r\n         * @type {!ViewCache}\r\n         * @private\r\n         */\r\n        this.viewCache_ = new ViewCache(newEventCache, newServerCache);\r\n        /**\r\n         * @type {!EventGenerator}\r\n         * @private\r\n         */\r\n        this.eventGenerator_ = new EventGenerator(this.query_);\r\n    }\r\n    /**\r\n     * @return {!Query}\r\n     */\r\n    View.prototype.getQuery = function () {\r\n        return this.query_;\r\n    };\r\n    /**\r\n     * @return {?Node}\r\n     */\r\n    View.prototype.getServerCache = function () {\r\n        return this.viewCache_.getServerCache().getNode();\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    View.prototype.getCompleteServerCache = function (path) {\r\n        var cache = this.viewCache_.getCompleteServerSnap();\r\n        if (cache) {\r\n            // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\r\n            // we need to see if it contains the child we're interested in.\r\n            if (this.query_.getQueryParams().loadsAllData() ||\r\n                (!path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty())) {\r\n                return cache.getChild(path);\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    View.prototype.isEmpty = function () {\r\n        return this.eventRegistrations_.length === 0;\r\n    };\r\n    /**\r\n     * @param {!EventRegistration} eventRegistration\r\n     */\r\n    View.prototype.addEventRegistration = function (eventRegistration) {\r\n        this.eventRegistrations_.push(eventRegistration);\r\n    };\r\n    /**\r\n     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\r\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n     * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\r\n     */\r\n    View.prototype.removeEventRegistration = function (eventRegistration, cancelError) {\r\n        var cancelEvents = [];\r\n        if (cancelError) {\r\n            util.assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\r\n            var path_1 = this.query_.path;\r\n            this.eventRegistrations_.forEach(function (registration) {\r\n                cancelError /** @type {!Error} */ = cancelError;\r\n                var maybeEvent = registration.createCancelEvent(cancelError, path_1);\r\n                if (maybeEvent) {\r\n                    cancelEvents.push(maybeEvent);\r\n                }\r\n            });\r\n        }\r\n        if (eventRegistration) {\r\n            var remaining = [];\r\n            for (var i = 0; i < this.eventRegistrations_.length; ++i) {\r\n                var existing = this.eventRegistrations_[i];\r\n                if (!existing.matches(eventRegistration)) {\r\n                    remaining.push(existing);\r\n                }\r\n                else if (eventRegistration.hasAnyCallback()) {\r\n                    // We're removing just this one\r\n                    remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));\r\n                    break;\r\n                }\r\n            }\r\n            this.eventRegistrations_ = remaining;\r\n        }\r\n        else {\r\n            this.eventRegistrations_ = [];\r\n        }\r\n        return cancelEvents;\r\n    };\r\n    /**\r\n     * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n     *\r\n     * @param {!Operation} operation\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeServerCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    View.prototype.applyOperation = function (operation, writesCache, completeServerCache) {\r\n        if (operation.type === OperationType.MERGE &&\r\n            operation.source.queryId !== null) {\r\n            util.assert(this.viewCache_.getCompleteServerSnap(), 'We should always have a full cache before handling merges');\r\n            util.assert(this.viewCache_.getCompleteEventSnap(), 'Missing event cache, even though we have a server cache');\r\n        }\r\n        var oldViewCache = this.viewCache_;\r\n        var result = this.processor_.applyOperation(oldViewCache, operation, writesCache, completeServerCache);\r\n        this.processor_.assertIndexed(result.viewCache);\r\n        util.assert(result.viewCache.getServerCache().isFullyInitialized() ||\r\n            !oldViewCache.getServerCache().isFullyInitialized(), 'Once a server snap is complete, it should never go back');\r\n        this.viewCache_ = result.viewCache;\r\n        return this.generateEventsForChanges_(result.changes, result.viewCache.getEventCache().getNode(), null);\r\n    };\r\n    /**\r\n     * @param {!EventRegistration} registration\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    View.prototype.getInitialEvents = function (registration) {\r\n        var eventSnap = this.viewCache_.getEventCache();\r\n        var initialChanges = [];\r\n        if (!eventSnap.getNode().isLeafNode()) {\r\n            var eventNode = eventSnap.getNode();\r\n            eventNode.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                initialChanges.push(Change.childAddedChange(key, childNode));\r\n            });\r\n        }\r\n        if (eventSnap.isFullyInitialized()) {\r\n            initialChanges.push(Change.valueChange(eventSnap.getNode()));\r\n        }\r\n        return this.generateEventsForChanges_(initialChanges, eventSnap.getNode(), registration);\r\n    };\r\n    /**\r\n     * @private\r\n     * @param {!Array.<!Change>} changes\r\n     * @param {!Node} eventCache\r\n     * @param {EventRegistration=} eventRegistration\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    View.prototype.generateEventsForChanges_ = function (changes, eventCache, eventRegistration) {\r\n        var registrations = eventRegistration\r\n            ? [eventRegistration]\r\n            : this.eventRegistrations_;\r\n        return this.eventGenerator_.generateEventsForChanges(changes, eventCache, registrations);\r\n    };\r\n    return View;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __referenceConstructor$1;\r\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\r\nvar SyncPoint = /** @class */ (function () {\r\n    function SyncPoint() {\r\n        /**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         */\r\n        this.views = new Map();\r\n    }\r\n    Object.defineProperty(SyncPoint, \"__referenceConstructor\", {\r\n        get: function () {\r\n            util.assert(__referenceConstructor$1, 'Reference.ts has not been loaded');\r\n            return __referenceConstructor$1;\r\n        },\r\n        set: function (val) {\r\n            util.assert(!__referenceConstructor$1, '__referenceConstructor has already been defined');\r\n            __referenceConstructor$1 = val;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    SyncPoint.prototype.isEmpty = function () {\r\n        return this.views.size === 0;\r\n    };\r\n    SyncPoint.prototype.applyOperation = function (operation, writesCache, optCompleteServerCache) {\r\n        var e_1, _a;\r\n        var queryId = operation.source.queryId;\r\n        if (queryId !== null) {\r\n            var view = this.views.get(queryId);\r\n            util.assert(view != null, 'SyncTree gave us an op for an invalid query.');\r\n            return view.applyOperation(operation, writesCache, optCompleteServerCache);\r\n        }\r\n        else {\r\n            var events = [];\r\n            try {\r\n                for (var _b = tslib.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                    var view = _c.value;\r\n                    events = events.concat(view.applyOperation(operation, writesCache, optCompleteServerCache));\r\n                }\r\n            }\r\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n            finally {\r\n                try {\r\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n                }\r\n                finally { if (e_1) throw e_1.error; }\r\n            }\r\n            return events;\r\n        }\r\n    };\r\n    /**\r\n     * Add an event callback for the specified query.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {!EventRegistration} eventRegistration\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} serverCache Complete server cache, if we have it.\r\n     * @param {boolean} serverCacheComplete\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncPoint.prototype.addEventRegistration = function (query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\r\n        var queryId = query.queryIdentifier();\r\n        var view = this.views.get(queryId);\r\n        if (!view) {\r\n            // TODO: make writesCache take flag for complete server node\r\n            var eventCache = writesCache.calcCompleteEventCache(serverCacheComplete ? serverCache : null);\r\n            var eventCacheComplete = false;\r\n            if (eventCache) {\r\n                eventCacheComplete = true;\r\n            }\r\n            else if (serverCache instanceof ChildrenNode) {\r\n                eventCache = writesCache.calcCompleteEventChildren(serverCache);\r\n                eventCacheComplete = false;\r\n            }\r\n            else {\r\n                eventCache = ChildrenNode.EMPTY_NODE;\r\n                eventCacheComplete = false;\r\n            }\r\n            var viewCache = new ViewCache(new CacheNode(\r\n            /** @type {!Node} */ eventCache, eventCacheComplete, false), new CacheNode(\r\n            /** @type {!Node} */ serverCache, serverCacheComplete, false));\r\n            view = new View(query, viewCache);\r\n            this.views.set(queryId, view);\r\n        }\r\n        // This is guaranteed to exist now, we just created anything that was missing\r\n        view.addEventRegistration(eventRegistration);\r\n        return view.getInitialEvents(eventRegistration);\r\n    };\r\n    /**\r\n     * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n     *\r\n     * If query is the default query, we'll check all views for the specified eventRegistration.\r\n     * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n     *\r\n     * @param {!Query} query\r\n     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\r\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n     * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events\r\n     */\r\n    SyncPoint.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\r\n        var e_2, _a;\r\n        var queryId = query.queryIdentifier();\r\n        var removed = [];\r\n        var cancelEvents = [];\r\n        var hadCompleteView = this.hasCompleteView();\r\n        if (queryId === 'default') {\r\n            try {\r\n                // When you do ref.off(...), we search all views for the registration to remove.\r\n                for (var _b = tslib.__values(this.views.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                    var _d = tslib.__read(_c.value, 2), viewQueryId = _d[0], view = _d[1];\r\n                    cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\r\n                    if (view.isEmpty()) {\r\n                        this.views.delete(viewQueryId);\r\n                        // We'll deal with complete views later.\r\n                        if (!view.getQuery().getQueryParams().loadsAllData()) {\r\n                            removed.push(view.getQuery());\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n            finally {\r\n                try {\r\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n                }\r\n                finally { if (e_2) throw e_2.error; }\r\n            }\r\n        }\r\n        else {\r\n            // remove the callback from the specific view.\r\n            var view = this.views.get(queryId);\r\n            if (view) {\r\n                cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\r\n                if (view.isEmpty()) {\r\n                    this.views.delete(queryId);\r\n                    // We'll deal with complete views later.\r\n                    if (!view.getQuery().getQueryParams().loadsAllData()) {\r\n                        removed.push(view.getQuery());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (hadCompleteView && !this.hasCompleteView()) {\r\n            // We removed our last complete view.\r\n            removed.push(new SyncPoint.__referenceConstructor(query.repo, query.path));\r\n        }\r\n        return { removed: removed, events: cancelEvents };\r\n    };\r\n    SyncPoint.prototype.getQueryViews = function () {\r\n        var e_3, _a;\r\n        var result = [];\r\n        try {\r\n            for (var _b = tslib.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                var view = _c.value;\r\n                if (!view.getQuery().getQueryParams().loadsAllData()) {\r\n                    result.push(view);\r\n                }\r\n            }\r\n        }\r\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_3) throw e_3.error; }\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * @param path The path to the desired complete snapshot\r\n     * @return A complete cache, if it exists\r\n     */\r\n    SyncPoint.prototype.getCompleteServerCache = function (path) {\r\n        var e_4, _a;\r\n        var serverCache = null;\r\n        try {\r\n            for (var _b = tslib.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                var view = _c.value;\r\n                serverCache = serverCache || view.getCompleteServerCache(path);\r\n            }\r\n        }\r\n        catch (e_4_1) { e_4 = { error: e_4_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_4) throw e_4.error; }\r\n        }\r\n        return serverCache;\r\n    };\r\n    SyncPoint.prototype.viewForQuery = function (query) {\r\n        var params = query.getQueryParams();\r\n        if (params.loadsAllData()) {\r\n            return this.getCompleteView();\r\n        }\r\n        else {\r\n            var queryId = query.queryIdentifier();\r\n            return this.views.get(queryId);\r\n        }\r\n    };\r\n    SyncPoint.prototype.viewExistsForQuery = function (query) {\r\n        return this.viewForQuery(query) != null;\r\n    };\r\n    SyncPoint.prototype.hasCompleteView = function () {\r\n        return this.getCompleteView() != null;\r\n    };\r\n    SyncPoint.prototype.getCompleteView = function () {\r\n        var e_5, _a;\r\n        try {\r\n            for (var _b = tslib.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                var view = _c.value;\r\n                if (view.getQuery().getQueryParams().loadsAllData()) {\r\n                    return view;\r\n                }\r\n            }\r\n        }\r\n        catch (e_5_1) { e_5 = { error: e_5_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_5) throw e_5.error; }\r\n        }\r\n        return null;\r\n    };\r\n    return SyncPoint;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\r\nvar CompoundWrite = /** @class */ (function () {\r\n    function CompoundWrite(writeTree_) {\r\n        this.writeTree_ = writeTree_;\r\n    }\r\n    CompoundWrite.prototype.addWrite = function (path, node) {\r\n        if (path.isEmpty()) {\r\n            return new CompoundWrite(new ImmutableTree(node));\r\n        }\r\n        else {\r\n            var rootmost = this.writeTree_.findRootMostValueAndPath(path);\r\n            if (rootmost != null) {\r\n                var rootMostPath = rootmost.path;\r\n                var value = rootmost.value;\r\n                var relativePath = Path.relativePath(rootMostPath, path);\r\n                value = value.updateChild(relativePath, node);\r\n                return new CompoundWrite(this.writeTree_.set(rootMostPath, value));\r\n            }\r\n            else {\r\n                var subtree = new ImmutableTree(node);\r\n                var newWriteTree = this.writeTree_.setTree(path, subtree);\r\n                return new CompoundWrite(newWriteTree);\r\n            }\r\n        }\r\n    };\r\n    CompoundWrite.prototype.addWrites = function (path, updates) {\r\n        var newWrite = this;\r\n        each(updates, function (childKey, node) {\r\n            newWrite = newWrite.addWrite(path.child(childKey), node);\r\n        });\r\n        return newWrite;\r\n    };\r\n    /**\r\n     * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n     * location, which must be removed by calling this method with that path.\r\n     *\r\n     * @param path The path at which a write and all deeper writes should be removed\r\n     * @return {!CompoundWrite} The new CompoundWrite with the removed path\r\n     */\r\n    CompoundWrite.prototype.removeWrite = function (path) {\r\n        if (path.isEmpty()) {\r\n            return CompoundWrite.Empty;\r\n        }\r\n        else {\r\n            var newWriteTree = this.writeTree_.setTree(path, ImmutableTree.Empty);\r\n            return new CompoundWrite(newWriteTree);\r\n        }\r\n    };\r\n    /**\r\n     * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n     * considered \"complete\".\r\n     *\r\n     * @param path The path to check for\r\n     * @return Whether there is a complete write at that path\r\n     */\r\n    CompoundWrite.prototype.hasCompleteWrite = function (path) {\r\n        return this.getCompleteNode(path) != null;\r\n    };\r\n    /**\r\n     * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n     * writes from deeper paths, but will return child nodes from a more shallow path.\r\n     *\r\n     * @param path The path to get a complete write\r\n     * @return The node if complete at that path, or null otherwise.\r\n     */\r\n    CompoundWrite.prototype.getCompleteNode = function (path) {\r\n        var rootmost = this.writeTree_.findRootMostValueAndPath(path);\r\n        if (rootmost != null) {\r\n            return this.writeTree_\r\n                .get(rootmost.path)\r\n                .getChild(Path.relativePath(rootmost.path, path));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Returns all children that are guaranteed to be a complete overwrite.\r\n     *\r\n     * @return A list of all complete children.\r\n     */\r\n    CompoundWrite.prototype.getCompleteChildren = function () {\r\n        var children = [];\r\n        var node = this.writeTree_.value;\r\n        if (node != null) {\r\n            // If it's a leaf node, it has no children; so nothing to do.\r\n            if (!node.isLeafNode()) {\r\n                node.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\r\n                    children.push(new NamedNode(childName, childNode));\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            this.writeTree_.children.inorderTraversal(function (childName, childTree) {\r\n                if (childTree.value != null) {\r\n                    children.push(new NamedNode(childName, childTree.value));\r\n                }\r\n            });\r\n        }\r\n        return children;\r\n    };\r\n    CompoundWrite.prototype.childCompoundWrite = function (path) {\r\n        if (path.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            var shadowingNode = this.getCompleteNode(path);\r\n            if (shadowingNode != null) {\r\n                return new CompoundWrite(new ImmutableTree(shadowingNode));\r\n            }\r\n            else {\r\n                return new CompoundWrite(this.writeTree_.subtree(path));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n     * @return Whether this CompoundWrite is empty\r\n     */\r\n    CompoundWrite.prototype.isEmpty = function () {\r\n        return this.writeTree_.isEmpty();\r\n    };\r\n    /**\r\n     * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n     * node\r\n     * @param node The node to apply this CompoundWrite to\r\n     * @return The node with all writes applied\r\n     */\r\n    CompoundWrite.prototype.apply = function (node) {\r\n        return applySubtreeWrite(Path.Empty, this.writeTree_, node);\r\n    };\r\n    CompoundWrite.Empty = new CompoundWrite(new ImmutableTree(null));\r\n    return CompoundWrite;\r\n}());\r\nfunction applySubtreeWrite(relativePath, writeTree, node) {\r\n    if (writeTree.value != null) {\r\n        // Since there a write is always a leaf, we're done here\r\n        return node.updateChild(relativePath, writeTree.value);\r\n    }\r\n    else {\r\n        var priorityWrite_1 = null;\r\n        writeTree.children.inorderTraversal(function (childKey, childTree) {\r\n            if (childKey === '.priority') {\r\n                // Apply priorities at the end so we don't update priorities for either empty nodes or forget\r\n                // to apply priorities to empty nodes that are later filled\r\n                util.assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\r\n                priorityWrite_1 = childTree.value;\r\n            }\r\n            else {\r\n                node = applySubtreeWrite(relativePath.child(childKey), childTree, node);\r\n            }\r\n        });\r\n        // If there was a priority write, we only apply it if the node is not empty\r\n        if (!node.getChild(relativePath).isEmpty() && priorityWrite_1 !== null) {\r\n            node = node.updateChild(relativePath.child('.priority'), priorityWrite_1);\r\n        }\r\n        return node;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\r\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\r\n * and addMerge(), and removed with removeWrite().\r\n *\r\n * @constructor\r\n */\r\nvar WriteTree = /** @class */ (function () {\r\n    function WriteTree() {\r\n        /**\r\n         * A tree tracking the result of applying all visible writes.  This does not include transactions with\r\n         * applyLocally=false or writes that are completely shadowed by other writes.\r\n         *\r\n         * @type {!CompoundWrite}\r\n         * @private\r\n         */\r\n        this.visibleWrites_ = CompoundWrite.Empty;\r\n        /**\r\n         * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\r\n         * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\r\n         * used by transactions).\r\n         *\r\n         * @type {!Array.<!WriteRecord>}\r\n         * @private\r\n         */\r\n        this.allWrites_ = [];\r\n        this.lastWriteId_ = -1;\r\n    }\r\n    /**\r\n     * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {!WriteTreeRef}\r\n     */\r\n    WriteTree.prototype.childWrites = function (path) {\r\n        return new WriteTreeRef(path, this);\r\n    };\r\n    /**\r\n     * Record a new overwrite from user code.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} snap\r\n     * @param {!number} writeId\r\n     * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches\r\n     */\r\n    WriteTree.prototype.addOverwrite = function (path, snap, writeId, visible) {\r\n        util.assert(writeId > this.lastWriteId_, 'Stacking an older write on top of newer ones');\r\n        if (visible === undefined) {\r\n            visible = true;\r\n        }\r\n        this.allWrites_.push({\r\n            path: path,\r\n            snap: snap,\r\n            writeId: writeId,\r\n            visible: visible\r\n        });\r\n        if (visible) {\r\n            this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);\r\n        }\r\n        this.lastWriteId_ = writeId;\r\n    };\r\n    /**\r\n     * Record a new merge from user code.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @param {!number} writeId\r\n     */\r\n    WriteTree.prototype.addMerge = function (path, changedChildren, writeId) {\r\n        util.assert(writeId > this.lastWriteId_, 'Stacking an older merge on top of newer ones');\r\n        this.allWrites_.push({\r\n            path: path,\r\n            children: changedChildren,\r\n            writeId: writeId,\r\n            visible: true\r\n        });\r\n        this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);\r\n        this.lastWriteId_ = writeId;\r\n    };\r\n    /**\r\n     * @param {!number} writeId\r\n     * @return {?WriteRecord}\r\n     */\r\n    WriteTree.prototype.getWrite = function (writeId) {\r\n        for (var i = 0; i < this.allWrites_.length; i++) {\r\n            var record = this.allWrites_[i];\r\n            if (record.writeId === writeId) {\r\n                return record;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n     * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n     *\r\n     * @param {!number} writeId\r\n     * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n     * events as a result).\r\n     */\r\n    WriteTree.prototype.removeWrite = function (writeId) {\r\n        // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\r\n        // out of order.\r\n        //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\r\n        //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\r\n        var _this = this;\r\n        var idx = this.allWrites_.findIndex(function (s) {\r\n            return s.writeId === writeId;\r\n        });\r\n        util.assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\r\n        var writeToRemove = this.allWrites_[idx];\r\n        this.allWrites_.splice(idx, 1);\r\n        var removedWriteWasVisible = writeToRemove.visible;\r\n        var removedWriteOverlapsWithOtherWrites = false;\r\n        var i = this.allWrites_.length - 1;\r\n        while (removedWriteWasVisible && i >= 0) {\r\n            var currentWrite = this.allWrites_[i];\r\n            if (currentWrite.visible) {\r\n                if (i >= idx &&\r\n                    this.recordContainsPath_(currentWrite, writeToRemove.path)) {\r\n                    // The removed write was completely shadowed by a subsequent write.\r\n                    removedWriteWasVisible = false;\r\n                }\r\n                else if (writeToRemove.path.contains(currentWrite.path)) {\r\n                    // Either we're covering some writes or they're covering part of us (depending on which came first).\r\n                    removedWriteOverlapsWithOtherWrites = true;\r\n                }\r\n            }\r\n            i--;\r\n        }\r\n        if (!removedWriteWasVisible) {\r\n            return false;\r\n        }\r\n        else if (removedWriteOverlapsWithOtherWrites) {\r\n            // There's some shadowing going on. Just rebuild the visible writes from scratch.\r\n            this.resetTree_();\r\n            return true;\r\n        }\r\n        else {\r\n            // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\r\n            if (writeToRemove.snap) {\r\n                this.visibleWrites_ = this.visibleWrites_.removeWrite(writeToRemove.path);\r\n            }\r\n            else {\r\n                var children = writeToRemove.children;\r\n                each(children, function (childName) {\r\n                    _this.visibleWrites_ = _this.visibleWrites_.removeWrite(writeToRemove.path.child(childName));\r\n                });\r\n            }\r\n            return true;\r\n        }\r\n    };\r\n    /**\r\n     * Return a complete snapshot for the given path if there's visible write data at that path, else null.\r\n     * No server data is considered.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.getCompleteWriteData = function (path) {\r\n        return this.visibleWrites_.getCompleteNode(path);\r\n    };\r\n    /**\r\n     * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n     * writes), attempt to calculate a complete snapshot for the given path\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {?Node} completeServerCache\r\n     * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded\r\n     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.calcCompleteEventCache = function (treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n        if (!writeIdsToExclude && !includeHiddenWrites) {\r\n            var shadowingNode = this.visibleWrites_.getCompleteNode(treePath);\r\n            if (shadowingNode != null) {\r\n                return shadowingNode;\r\n            }\r\n            else {\r\n                var subMerge = this.visibleWrites_.childCompoundWrite(treePath);\r\n                if (subMerge.isEmpty()) {\r\n                    return completeServerCache;\r\n                }\r\n                else if (completeServerCache == null &&\r\n                    !subMerge.hasCompleteWrite(Path.Empty)) {\r\n                    // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\r\n                    return null;\r\n                }\r\n                else {\r\n                    var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                    return subMerge.apply(layeredCache);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var merge = this.visibleWrites_.childCompoundWrite(treePath);\r\n            if (!includeHiddenWrites && merge.isEmpty()) {\r\n                return completeServerCache;\r\n            }\r\n            else {\r\n                // If the server cache is null, and we don't have a complete cache, we need to return null\r\n                if (!includeHiddenWrites &&\r\n                    completeServerCache == null &&\r\n                    !merge.hasCompleteWrite(Path.Empty)) {\r\n                    return null;\r\n                }\r\n                else {\r\n                    var filter = function (write) {\r\n                        return ((write.visible || includeHiddenWrites) &&\r\n                            (!writeIdsToExclude ||\r\n                                !~writeIdsToExclude.indexOf(write.writeId)) &&\r\n                            (write.path.contains(treePath) || treePath.contains(write.path)));\r\n                    };\r\n                    var mergeAtPath = WriteTree.layerTree_(this.allWrites_, filter, treePath);\r\n                    var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                    return mergeAtPath.apply(layeredCache);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n     * Used when creating new views, to pre-fill their complete event children snapshot.\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {?ChildrenNode} completeServerChildren\r\n     * @return {!ChildrenNode}\r\n     */\r\n    WriteTree.prototype.calcCompleteEventChildren = function (treePath, completeServerChildren) {\r\n        var completeChildren = ChildrenNode.EMPTY_NODE;\r\n        var topLevelSet = this.visibleWrites_.getCompleteNode(treePath);\r\n        if (topLevelSet) {\r\n            if (!topLevelSet.isLeafNode()) {\r\n                // we're shadowing everything. Return the children.\r\n                topLevelSet.forEachChild(PRIORITY_INDEX, function (childName, childSnap) {\r\n                    completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\r\n                });\r\n            }\r\n            return completeChildren;\r\n        }\r\n        else if (completeServerChildren) {\r\n            // Layer any children we have on top of this\r\n            // We know we don't have a top-level set, so just enumerate existing children\r\n            var merge_1 = this.visibleWrites_.childCompoundWrite(treePath);\r\n            completeServerChildren.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\r\n                var node = merge_1\r\n                    .childCompoundWrite(new Path(childName))\r\n                    .apply(childNode);\r\n                completeChildren = completeChildren.updateImmediateChild(childName, node);\r\n            });\r\n            // Add any complete children we have from the set\r\n            merge_1.getCompleteChildren().forEach(function (namedNode) {\r\n                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n            });\r\n            return completeChildren;\r\n        }\r\n        else {\r\n            // We don't have anything to layer on top of. Layer on any children we have\r\n            // Note that we can return an empty snap if we have a defined delete\r\n            var merge = this.visibleWrites_.childCompoundWrite(treePath);\r\n            merge.getCompleteChildren().forEach(function (namedNode) {\r\n                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n            });\r\n            return completeChildren;\r\n        }\r\n    };\r\n    /**\r\n     * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n     * applied to the event cache.\r\n     *\r\n     * Possibilities:\r\n     *\r\n     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n     *\r\n     * 2. Some write is completely shadowing. No events to be raised\r\n     *\r\n     * 3. Is partially shadowed. Events\r\n     *\r\n     * Either existingEventSnap or existingServerSnap must exist\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {!Path} childPath\r\n     * @param {?Node} existingEventSnap\r\n     * @param {?Node} existingServerSnap\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.calcEventCacheAfterServerOverwrite = function (treePath, childPath, existingEventSnap, existingServerSnap) {\r\n        util.assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\r\n        var path = treePath.child(childPath);\r\n        if (this.visibleWrites_.hasCompleteWrite(path)) {\r\n            // At this point we can probably guarantee that we're in case 2, meaning no events\r\n            // May need to check visibility while doing the findRootMostValueAndPath call\r\n            return null;\r\n        }\r\n        else {\r\n            // No complete shadowing. We're either partially shadowing or not shadowing at all.\r\n            var childMerge = this.visibleWrites_.childCompoundWrite(path);\r\n            if (childMerge.isEmpty()) {\r\n                // We're not shadowing at all. Case 1\r\n                return existingServerSnap.getChild(childPath);\r\n            }\r\n            else {\r\n                // This could be more efficient if the serverNode + updates doesn't change the eventSnap\r\n                // However this is tricky to find out, since user updates don't necessary change the server\r\n                // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\r\n                // adds nodes, but doesn't change any existing writes. It is therefore not enough to\r\n                // only check if the updates change the serverNode.\r\n                // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\r\n                return childMerge.apply(existingServerSnap.getChild(childPath));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n     * complete child for this ChildKey.\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {!string} childKey\r\n     * @param {!CacheNode} existingServerSnap\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.calcCompleteChild = function (treePath, childKey, existingServerSnap) {\r\n        var path = treePath.child(childKey);\r\n        var shadowingNode = this.visibleWrites_.getCompleteNode(path);\r\n        if (shadowingNode != null) {\r\n            return shadowingNode;\r\n        }\r\n        else {\r\n            if (existingServerSnap.isCompleteForChild(childKey)) {\r\n                var childMerge = this.visibleWrites_.childCompoundWrite(path);\r\n                return childMerge.apply(existingServerSnap.getNode().getImmediateChild(childKey));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n     * a higher path, this will return the child of that write relative to the write and this path.\r\n     * Returns null if there is no write at this path.\r\n     */\r\n    WriteTree.prototype.shadowingWrite = function (path) {\r\n        return this.visibleWrites_.getCompleteNode(path);\r\n    };\r\n    /**\r\n     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n     * the window, but may now be in the window.\r\n     */\r\n    WriteTree.prototype.calcIndexedSlice = function (treePath, completeServerData, startPost, count, reverse, index) {\r\n        var toIterate;\r\n        var merge = this.visibleWrites_.childCompoundWrite(treePath);\r\n        var shadowingNode = merge.getCompleteNode(Path.Empty);\r\n        if (shadowingNode != null) {\r\n            toIterate = shadowingNode;\r\n        }\r\n        else if (completeServerData != null) {\r\n            toIterate = merge.apply(completeServerData);\r\n        }\r\n        else {\r\n            // no children to iterate on\r\n            return [];\r\n        }\r\n        toIterate = toIterate.withIndex(index);\r\n        if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\r\n            var nodes = [];\r\n            var cmp = index.getCompare();\r\n            var iter = reverse\r\n                ? toIterate.getReverseIteratorFrom(startPost, index)\r\n                : toIterate.getIteratorFrom(startPost, index);\r\n            var next = iter.getNext();\r\n            while (next && nodes.length < count) {\r\n                if (cmp(next, startPost) !== 0) {\r\n                    nodes.push(next);\r\n                }\r\n                next = iter.getNext();\r\n            }\r\n            return nodes;\r\n        }\r\n        else {\r\n            return [];\r\n        }\r\n    };\r\n    WriteTree.prototype.recordContainsPath_ = function (writeRecord, path) {\r\n        if (writeRecord.snap) {\r\n            return writeRecord.path.contains(path);\r\n        }\r\n        else {\r\n            for (var childName in writeRecord.children) {\r\n                if (writeRecord.children.hasOwnProperty(childName) &&\r\n                    writeRecord.path.child(childName).contains(path)) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n     */\r\n    WriteTree.prototype.resetTree_ = function () {\r\n        this.visibleWrites_ = WriteTree.layerTree_(this.allWrites_, WriteTree.DefaultFilter_, Path.Empty);\r\n        if (this.allWrites_.length > 0) {\r\n            this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;\r\n        }\r\n        else {\r\n            this.lastWriteId_ = -1;\r\n        }\r\n    };\r\n    /**\r\n     * The default filter used when constructing the tree. Keep everything that's visible.\r\n     */\r\n    WriteTree.DefaultFilter_ = function (write) {\r\n        return write.visible;\r\n    };\r\n    /**\r\n     * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n     * event data at that path.\r\n     */\r\n    WriteTree.layerTree_ = function (writes, filter, treeRoot) {\r\n        var compoundWrite = CompoundWrite.Empty;\r\n        for (var i = 0; i < writes.length; ++i) {\r\n            var write = writes[i];\r\n            // Theory, a later set will either:\r\n            // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\r\n            // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\r\n            if (filter(write)) {\r\n                var writePath = write.path;\r\n                var relativePath = void 0;\r\n                if (write.snap) {\r\n                    if (treeRoot.contains(writePath)) {\r\n                        relativePath = Path.relativePath(treeRoot, writePath);\r\n                        compoundWrite = compoundWrite.addWrite(relativePath, write.snap);\r\n                    }\r\n                    else if (writePath.contains(treeRoot)) {\r\n                        relativePath = Path.relativePath(writePath, treeRoot);\r\n                        compoundWrite = compoundWrite.addWrite(Path.Empty, write.snap.getChild(relativePath));\r\n                    }\r\n                    else ;\r\n                }\r\n                else if (write.children) {\r\n                    if (treeRoot.contains(writePath)) {\r\n                        relativePath = Path.relativePath(treeRoot, writePath);\r\n                        compoundWrite = compoundWrite.addWrites(relativePath, write.children);\r\n                    }\r\n                    else if (writePath.contains(treeRoot)) {\r\n                        relativePath = Path.relativePath(writePath, treeRoot);\r\n                        if (relativePath.isEmpty()) {\r\n                            compoundWrite = compoundWrite.addWrites(Path.Empty, write.children);\r\n                        }\r\n                        else {\r\n                            var child = util.safeGet(write.children, relativePath.getFront());\r\n                            if (child) {\r\n                                // There exists a child in this node that matches the root path\r\n                                var deepNode = child.getChild(relativePath.popFront());\r\n                                compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);\r\n                            }\r\n                        }\r\n                    }\r\n                    else ;\r\n                }\r\n                else {\r\n                    throw util.assertionError('WriteRecord should have .snap or .children');\r\n                }\r\n            }\r\n        }\r\n        return compoundWrite;\r\n    };\r\n    return WriteTree;\r\n}());\r\n/**\r\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\r\n * just proxy to the underlying WriteTree.\r\n *\r\n * @constructor\r\n */\r\nvar WriteTreeRef = /** @class */ (function () {\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!WriteTree} writeTree\r\n     */\r\n    function WriteTreeRef(path, writeTree) {\r\n        this.treePath_ = path;\r\n        this.writeTree_ = writeTree;\r\n    }\r\n    /**\r\n     * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n     * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n     * can lead to a more expensive calculation.\r\n     *\r\n     * @param {?Node} completeServerCache\r\n     * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.\r\n     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.calcCompleteEventCache = function (completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n        return this.writeTree_.calcCompleteEventCache(this.treePath_, completeServerCache, writeIdsToExclude, includeHiddenWrites);\r\n    };\r\n    /**\r\n     * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n     * mix of the given server data and write data.\r\n     *\r\n     * @param {?ChildrenNode} completeServerChildren\r\n     * @return {!ChildrenNode}\r\n     */\r\n    WriteTreeRef.prototype.calcCompleteEventChildren = function (completeServerChildren) {\r\n        return this.writeTree_.calcCompleteEventChildren(this.treePath_, completeServerChildren);\r\n    };\r\n    /**\r\n     * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n     * if anything, needs to be applied to the event cache.\r\n     *\r\n     * Possibilities:\r\n     *\r\n     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n     *\r\n     * 2. Some write is completely shadowing. No events to be raised\r\n     *\r\n     * 3. Is partially shadowed. Events should be raised\r\n     *\r\n     * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n     *\r\n     * @param {!Path} path\r\n     * @param {?Node} existingEventSnap\r\n     * @param {?Node} existingServerSnap\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.calcEventCacheAfterServerOverwrite = function (path, existingEventSnap, existingServerSnap) {\r\n        return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_, path, existingEventSnap, existingServerSnap);\r\n    };\r\n    /**\r\n     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n     * a higher path, this will return the child of that write relative to the write and this path.\r\n     * Returns null if there is no write at this path.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.shadowingWrite = function (path) {\r\n        return this.writeTree_.shadowingWrite(this.treePath_.child(path));\r\n    };\r\n    /**\r\n     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n     * the window, but may now be in the window\r\n     *\r\n     * @param {?Node} completeServerData\r\n     * @param {!NamedNode} startPost\r\n     * @param {!number} count\r\n     * @param {boolean} reverse\r\n     * @param {!Index} index\r\n     * @return {!Array.<!NamedNode>}\r\n     */\r\n    WriteTreeRef.prototype.calcIndexedSlice = function (completeServerData, startPost, count, reverse, index) {\r\n        return this.writeTree_.calcIndexedSlice(this.treePath_, completeServerData, startPost, count, reverse, index);\r\n    };\r\n    /**\r\n     * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n     * complete child for this ChildKey.\r\n     *\r\n     * @param {!string} childKey\r\n     * @param {!CacheNode} existingServerCache\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.calcCompleteChild = function (childKey, existingServerCache) {\r\n        return this.writeTree_.calcCompleteChild(this.treePath_, childKey, existingServerCache);\r\n    };\r\n    /**\r\n     * Return a WriteTreeRef for a child.\r\n     *\r\n     * @param {string} childName\r\n     * @return {!WriteTreeRef}\r\n     */\r\n    WriteTreeRef.prototype.child = function (childName) {\r\n        return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);\r\n    };\r\n    return WriteTreeRef;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n * @constructor\r\n */\r\nvar SyncTree = /** @class */ (function () {\r\n    /**\r\n     * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */\r\n    function SyncTree(listenProvider_) {\r\n        this.listenProvider_ = listenProvider_;\r\n        /**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         */\r\n        this.syncPointTree_ = ImmutableTree.Empty;\r\n        /**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         */\r\n        this.pendingWriteTree_ = new WriteTree();\r\n        this.tagToQueryMap = new Map();\r\n        this.queryToTagMap = new Map();\r\n    }\r\n    /**\r\n     * Apply the data changes for a user-generated set() or transaction() call.\r\n     *\r\n     * @return Events to raise.\r\n     */\r\n    SyncTree.prototype.applyUserOverwrite = function (path, newData, writeId, visible) {\r\n        // Record pending write.\r\n        this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);\r\n        if (!visible) {\r\n            return [];\r\n        }\r\n        else {\r\n            return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.User, path, newData));\r\n        }\r\n    };\r\n    /**\r\n     * Apply the data from a user-generated update() call\r\n     *\r\n     * @return Events to raise.\r\n     */\r\n    SyncTree.prototype.applyUserMerge = function (path, changedChildren, writeId) {\r\n        // Record pending merge.\r\n        this.pendingWriteTree_.addMerge(path, changedChildren, writeId);\r\n        var changeTree = ImmutableTree.fromObject(changedChildren);\r\n        return this.applyOperationToSyncPoints_(new Merge(OperationSource.User, path, changeTree));\r\n    };\r\n    /**\r\n     * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n     *\r\n     * @param revert True if the given write failed and needs to be reverted\r\n     * @return Events to raise.\r\n     */\r\n    SyncTree.prototype.ackUserWrite = function (writeId, revert) {\r\n        if (revert === void 0) { revert = false; }\r\n        var write = this.pendingWriteTree_.getWrite(writeId);\r\n        var needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);\r\n        if (!needToReevaluate) {\r\n            return [];\r\n        }\r\n        else {\r\n            var affectedTree_1 = ImmutableTree.Empty;\r\n            if (write.snap != null) {\r\n                // overwrite\r\n                affectedTree_1 = affectedTree_1.set(Path.Empty, true);\r\n            }\r\n            else {\r\n                each(write.children, function (pathString, node) {\r\n                    affectedTree_1 = affectedTree_1.set(new Path(pathString), node);\r\n                });\r\n            }\r\n            return this.applyOperationToSyncPoints_(new AckUserWrite(write.path, affectedTree_1, revert));\r\n        }\r\n    };\r\n    /**\r\n     * Apply new server data for the specified path..\r\n     *\r\n     * @return Events to raise.\r\n     */\r\n    SyncTree.prototype.applyServerOverwrite = function (path, newData) {\r\n        return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.Server, path, newData));\r\n    };\r\n    /**\r\n     * Apply new server data to be merged in at the specified path.\r\n     *\r\n     * @return Events to raise.\r\n     */\r\n    SyncTree.prototype.applyServerMerge = function (path, changedChildren) {\r\n        var changeTree = ImmutableTree.fromObject(changedChildren);\r\n        return this.applyOperationToSyncPoints_(new Merge(OperationSource.Server, path, changeTree));\r\n    };\r\n    /**\r\n     * Apply a listen complete for a query\r\n     *\r\n     * @return Events to raise.\r\n     */\r\n    SyncTree.prototype.applyListenComplete = function (path) {\r\n        return this.applyOperationToSyncPoints_(new ListenComplete(OperationSource.Server, path));\r\n    };\r\n    /**\r\n     * Apply new server data for the specified tagged query.\r\n     *\r\n     * @return Events to raise.\r\n     */\r\n    SyncTree.prototype.applyTaggedQueryOverwrite = function (path, snap, tag) {\r\n        var queryKey = this.queryKeyForTag_(tag);\r\n        if (queryKey != null) {\r\n            var r = SyncTree.parseQueryKey_(queryKey);\r\n            var queryPath = r.path, queryId = r.queryId;\r\n            var relativePath = Path.relativePath(queryPath, path);\r\n            var op = new Overwrite(OperationSource.forServerTaggedQuery(queryId), relativePath, snap);\r\n            return this.applyTaggedOperation_(queryPath, op);\r\n        }\r\n        else {\r\n            // Query must have been removed already\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * Apply server data to be merged in for the specified tagged query.\r\n     *\r\n     * @return Events to raise.\r\n     */\r\n    SyncTree.prototype.applyTaggedQueryMerge = function (path, changedChildren, tag) {\r\n        var queryKey = this.queryKeyForTag_(tag);\r\n        if (queryKey) {\r\n            var r = SyncTree.parseQueryKey_(queryKey);\r\n            var queryPath = r.path, queryId = r.queryId;\r\n            var relativePath = Path.relativePath(queryPath, path);\r\n            var changeTree = ImmutableTree.fromObject(changedChildren);\r\n            var op = new Merge(OperationSource.forServerTaggedQuery(queryId), relativePath, changeTree);\r\n            return this.applyTaggedOperation_(queryPath, op);\r\n        }\r\n        else {\r\n            // We've already removed the query. No big deal, ignore the update\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * Apply a listen complete for a tagged query\r\n     *\r\n     * @return Events to raise.\r\n     */\r\n    SyncTree.prototype.applyTaggedListenComplete = function (path, tag) {\r\n        var queryKey = this.queryKeyForTag_(tag);\r\n        if (queryKey) {\r\n            var r = SyncTree.parseQueryKey_(queryKey);\r\n            var queryPath = r.path, queryId = r.queryId;\r\n            var relativePath = Path.relativePath(queryPath, path);\r\n            var op = new ListenComplete(OperationSource.forServerTaggedQuery(queryId), relativePath);\r\n            return this.applyTaggedOperation_(queryPath, op);\r\n        }\r\n        else {\r\n            // We've already removed the query. No big deal, ignore the update\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * Add an event callback for the specified query.\r\n     *\r\n     * @return Events to raise.\r\n     */\r\n    SyncTree.prototype.addEventRegistration = function (query, eventRegistration) {\r\n        var path = query.path;\r\n        var serverCache = null;\r\n        var foundAncestorDefaultView = false;\r\n        // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n        // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n        this.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {\r\n            var relativePath = Path.relativePath(pathToSyncPoint, path);\r\n            serverCache = serverCache || sp.getCompleteServerCache(relativePath);\r\n            foundAncestorDefaultView =\r\n                foundAncestorDefaultView || sp.hasCompleteView();\r\n        });\r\n        var syncPoint = this.syncPointTree_.get(path);\r\n        if (!syncPoint) {\r\n            syncPoint = new SyncPoint();\r\n            this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\r\n        }\r\n        else {\r\n            foundAncestorDefaultView =\r\n                foundAncestorDefaultView || syncPoint.hasCompleteView();\r\n            serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);\r\n        }\r\n        var serverCacheComplete;\r\n        if (serverCache != null) {\r\n            serverCacheComplete = true;\r\n        }\r\n        else {\r\n            serverCacheComplete = false;\r\n            serverCache = ChildrenNode.EMPTY_NODE;\r\n            var subtree = this.syncPointTree_.subtree(path);\r\n            subtree.foreachChild(function (childName, childSyncPoint) {\r\n                var completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);\r\n                if (completeCache) {\r\n                    serverCache = serverCache.updateImmediateChild(childName, completeCache);\r\n                }\r\n            });\r\n        }\r\n        var viewAlreadyExists = syncPoint.viewExistsForQuery(query);\r\n        if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\r\n            // We need to track a tag for this query\r\n            var queryKey = SyncTree.makeQueryKey_(query);\r\n            util.assert(!this.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\r\n            var tag = SyncTree.getNextQueryTag_();\r\n            this.queryToTagMap.set(queryKey, tag);\r\n            this.tagToQueryMap.set(tag, queryKey);\r\n        }\r\n        var writesCache = this.pendingWriteTree_.childWrites(path);\r\n        var events = syncPoint.addEventRegistration(query, eventRegistration, writesCache, serverCache, serverCacheComplete);\r\n        if (!viewAlreadyExists && !foundAncestorDefaultView) {\r\n            var view /** @type !View */ = syncPoint.viewForQuery(query);\r\n            events = events.concat(this.setupListener_(query, view));\r\n        }\r\n        return events;\r\n    };\r\n    /**\r\n     * Remove event callback(s).\r\n     *\r\n     * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n     * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n     *\r\n     * @param eventRegistration If null, all callbacks are removed.\r\n     * @param cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n     * @return Cancel events, if cancelError was provided.\r\n     */\r\n    SyncTree.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\r\n        var _this = this;\r\n        // Find the syncPoint first. Then deal with whether or not it has matching listeners\r\n        var path = query.path;\r\n        var maybeSyncPoint = this.syncPointTree_.get(path);\r\n        var cancelEvents = [];\r\n        // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\r\n        // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\r\n        // not loadsAllData().\r\n        if (maybeSyncPoint &&\r\n            (query.queryIdentifier() === 'default' ||\r\n                maybeSyncPoint.viewExistsForQuery(query))) {\r\n            /**\r\n             * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}\r\n             */\r\n            var removedAndEvents = maybeSyncPoint.removeEventRegistration(query, eventRegistration, cancelError);\r\n            if (maybeSyncPoint.isEmpty()) {\r\n                this.syncPointTree_ = this.syncPointTree_.remove(path);\r\n            }\r\n            var removed = removedAndEvents.removed;\r\n            cancelEvents = removedAndEvents.events;\r\n            // We may have just removed one of many listeners and can short-circuit this whole process\r\n            // We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n            // properly set up.\r\n            //\r\n            // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\r\n            // queryId === 'default'\r\n            var removingDefault = -1 !==\r\n                removed.findIndex(function (query) {\r\n                    return query.getQueryParams().loadsAllData();\r\n                });\r\n            var covered = this.syncPointTree_.findOnPath(path, function (relativePath, parentSyncPoint) {\r\n                return parentSyncPoint.hasCompleteView();\r\n            });\r\n            if (removingDefault && !covered) {\r\n                var subtree = this.syncPointTree_.subtree(path);\r\n                // There are potentially child listeners. Determine what if any listens we need to send before executing the\r\n                // removal\r\n                if (!subtree.isEmpty()) {\r\n                    // We need to fold over our subtree and collect the listeners to send\r\n                    var newViews = this.collectDistinctViewsForSubTree_(subtree);\r\n                    // Ok, we've collected all the listens we need. Set them up.\r\n                    for (var i = 0; i < newViews.length; ++i) {\r\n                        var view = newViews[i], newQuery = view.getQuery();\r\n                        var listener = this.createListenerForView_(view);\r\n                        this.listenProvider_.startListening(SyncTree.queryForListening_(newQuery), this.tagForQuery_(newQuery), listener.hashFn, listener.onComplete);\r\n                    }\r\n                }\r\n            }\r\n            // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\r\n            // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\r\n            // Also, note that if we have a cancelError, it's already been removed at the provider level.\r\n            if (!covered && removed.length > 0 && !cancelError) {\r\n                // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\r\n                // default. Otherwise, we need to iterate through and cancel each individual query\r\n                if (removingDefault) {\r\n                    // We don't tag default listeners\r\n                    var defaultTag = null;\r\n                    this.listenProvider_.stopListening(SyncTree.queryForListening_(query), defaultTag);\r\n                }\r\n                else {\r\n                    removed.forEach(function (queryToRemove) {\r\n                        var tagToRemove = _this.queryToTagMap.get(SyncTree.makeQueryKey_(queryToRemove));\r\n                        _this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToRemove), tagToRemove);\r\n                    });\r\n                }\r\n            }\r\n            // Now, clear all of the tags we're tracking for the removed listens\r\n            this.removeTags_(removed);\r\n        }\r\n        return cancelEvents;\r\n    };\r\n    /**\r\n     * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n     * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n     * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n     *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n     *\r\n     * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n     *\r\n     * @param path The path to the data we want\r\n     * @param writeIdsToExclude A specific set to be excluded\r\n     */\r\n    SyncTree.prototype.calcCompleteEventCache = function (path, writeIdsToExclude) {\r\n        var includeHiddenSets = true;\r\n        var writeTree = this.pendingWriteTree_;\r\n        var serverCache = this.syncPointTree_.findOnPath(path, function (pathSoFar, syncPoint) {\r\n            var relativePath = Path.relativePath(pathSoFar, path);\r\n            var serverCache = syncPoint.getCompleteServerCache(relativePath);\r\n            if (serverCache) {\r\n                return serverCache;\r\n            }\r\n        });\r\n        return writeTree.calcCompleteEventCache(path, serverCache, writeIdsToExclude, includeHiddenSets);\r\n    };\r\n    /**\r\n     * This collapses multiple unfiltered views into a single view, since we only need a single\r\n     * listener for them.\r\n     */\r\n    SyncTree.prototype.collectDistinctViewsForSubTree_ = function (subtree) {\r\n        return subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\r\n            if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\r\n                var completeView = maybeChildSyncPoint.getCompleteView();\r\n                return [completeView];\r\n            }\r\n            else {\r\n                // No complete view here, flatten any deeper listens into an array\r\n                var views_1 = [];\r\n                if (maybeChildSyncPoint) {\r\n                    views_1 = maybeChildSyncPoint.getQueryViews();\r\n                }\r\n                each(childMap, function (_key, childViews) {\r\n                    views_1 = views_1.concat(childViews);\r\n                });\r\n                return views_1;\r\n            }\r\n        });\r\n    };\r\n    SyncTree.prototype.removeTags_ = function (queries) {\r\n        for (var j = 0; j < queries.length; ++j) {\r\n            var removedQuery = queries[j];\r\n            if (!removedQuery.getQueryParams().loadsAllData()) {\r\n                // We should have a tag for this\r\n                var removedQueryKey = SyncTree.makeQueryKey_(removedQuery);\r\n                var removedQueryTag = this.queryToTagMap.get(removedQueryKey);\r\n                this.queryToTagMap.delete(removedQueryKey);\r\n                this.tagToQueryMap.delete(removedQueryTag);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Normalizes a query to a query we send the server for listening\r\n     *\r\n     * @return The normalized query\r\n     */\r\n    SyncTree.queryForListening_ = function (query) {\r\n        if (query.getQueryParams().loadsAllData() &&\r\n            !query.getQueryParams().isDefault()) {\r\n            // We treat queries that load all data as default queries\r\n            // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\r\n            // from Query\r\n            return query.getRef();\r\n        }\r\n        else {\r\n            return query;\r\n        }\r\n    };\r\n    /**\r\n     * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n     *\r\n     * @return This method can return events to support synchronous data sources\r\n     */\r\n    SyncTree.prototype.setupListener_ = function (query, view) {\r\n        var path = query.path;\r\n        var tag = this.tagForQuery_(query);\r\n        var listener = this.createListenerForView_(view);\r\n        var events = this.listenProvider_.startListening(SyncTree.queryForListening_(query), tag, listener.hashFn, listener.onComplete);\r\n        var subtree = this.syncPointTree_.subtree(path);\r\n        // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\r\n        // may need to shadow other listens as well.\r\n        if (tag) {\r\n            util.assert(!subtree.value.hasCompleteView(), \"If we're adding a query, it shouldn't be shadowed\");\r\n        }\r\n        else {\r\n            // Shadow everything at or below this location, this is a default listener.\r\n            var queriesToStop = subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\r\n                if (!relativePath.isEmpty() &&\r\n                    maybeChildSyncPoint &&\r\n                    maybeChildSyncPoint.hasCompleteView()) {\r\n                    return [maybeChildSyncPoint.getCompleteView().getQuery()];\r\n                }\r\n                else {\r\n                    // No default listener here, flatten any deeper queries into an array\r\n                    var queries_1 = [];\r\n                    if (maybeChildSyncPoint) {\r\n                        queries_1 = queries_1.concat(maybeChildSyncPoint.getQueryViews().map(function (view) { return view.getQuery(); }));\r\n                    }\r\n                    each(childMap, function (_key, childQueries) {\r\n                        queries_1 = queries_1.concat(childQueries);\r\n                    });\r\n                    return queries_1;\r\n                }\r\n            });\r\n            for (var i = 0; i < queriesToStop.length; ++i) {\r\n                var queryToStop = queriesToStop[i];\r\n                this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToStop), this.tagForQuery_(queryToStop));\r\n            }\r\n        }\r\n        return events;\r\n    };\r\n    SyncTree.prototype.createListenerForView_ = function (view) {\r\n        var _this = this;\r\n        var query = view.getQuery();\r\n        var tag = this.tagForQuery_(query);\r\n        return {\r\n            hashFn: function () {\r\n                var cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;\r\n                return cache.hash();\r\n            },\r\n            onComplete: function (status) {\r\n                if (status === 'ok') {\r\n                    if (tag) {\r\n                        return _this.applyTaggedListenComplete(query.path, tag);\r\n                    }\r\n                    else {\r\n                        return _this.applyListenComplete(query.path);\r\n                    }\r\n                }\r\n                else {\r\n                    // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\r\n                    // Note that this may need to be scoped to just this listener if we change permissions on filtered children\r\n                    var error = errorForServerCode(status, query);\r\n                    return _this.removeEventRegistration(query, \r\n                    /*eventRegistration*/ null, error);\r\n                }\r\n            }\r\n        };\r\n    };\r\n    /**\r\n     * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n     */\r\n    SyncTree.makeQueryKey_ = function (query) {\r\n        return query.path.toString() + '$' + query.queryIdentifier();\r\n    };\r\n    /**\r\n     * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n     */\r\n    SyncTree.parseQueryKey_ = function (queryKey) {\r\n        var splitIndex = queryKey.indexOf('$');\r\n        util.assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\r\n        return {\r\n            queryId: queryKey.substr(splitIndex + 1),\r\n            path: new Path(queryKey.substr(0, splitIndex))\r\n        };\r\n    };\r\n    /**\r\n     * Return the query associated with the given tag, if we have one\r\n     */\r\n    SyncTree.prototype.queryKeyForTag_ = function (tag) {\r\n        return this.tagToQueryMap.get(tag);\r\n    };\r\n    /**\r\n     * Return the tag associated with the given query.\r\n     */\r\n    SyncTree.prototype.tagForQuery_ = function (query) {\r\n        var queryKey = SyncTree.makeQueryKey_(query);\r\n        return this.queryToTagMap.get(queryKey);\r\n    };\r\n    /**\r\n     * Static accessor for query tags.\r\n     */\r\n    SyncTree.getNextQueryTag_ = function () {\r\n        return SyncTree.nextQueryTag_++;\r\n    };\r\n    /**\r\n     * A helper method to apply tagged operations\r\n     */\r\n    SyncTree.prototype.applyTaggedOperation_ = function (queryPath, operation) {\r\n        var syncPoint = this.syncPointTree_.get(queryPath);\r\n        util.assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\r\n        var writesCache = this.pendingWriteTree_.childWrites(queryPath);\r\n        return syncPoint.applyOperation(operation, writesCache, \r\n        /*serverCache=*/ null);\r\n    };\r\n    /**\r\n     * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n     *\r\n     * NOTES:\r\n     * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n     *\r\n     * - We call applyOperation() on each SyncPoint passing three things:\r\n     *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n     *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n     *   3. A snapshot Node with cached server data, if we have it.\r\n     *\r\n     * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n     */\r\n    SyncTree.prototype.applyOperationToSyncPoints_ = function (operation) {\r\n        return this.applyOperationHelper_(operation, this.syncPointTree_, \r\n        /*serverCache=*/ null, this.pendingWriteTree_.childWrites(Path.Empty));\r\n    };\r\n    /**\r\n     * Recursive helper for applyOperationToSyncPoints_\r\n     */\r\n    SyncTree.prototype.applyOperationHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\r\n        if (operation.path.isEmpty()) {\r\n            return this.applyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\r\n        }\r\n        else {\r\n            var syncPoint = syncPointTree.get(Path.Empty);\r\n            // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n            if (serverCache == null && syncPoint != null) {\r\n                serverCache = syncPoint.getCompleteServerCache(Path.Empty);\r\n            }\r\n            var events = [];\r\n            var childName = operation.path.getFront();\r\n            var childOperation = operation.operationForChild(childName);\r\n            var childTree = syncPointTree.children.get(childName);\r\n            if (childTree && childOperation) {\r\n                var childServerCache = serverCache\r\n                    ? serverCache.getImmediateChild(childName)\r\n                    : null;\r\n                var childWritesCache = writesCache.child(childName);\r\n                events = events.concat(this.applyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n            }\r\n            if (syncPoint) {\r\n                events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\r\n            }\r\n            return events;\r\n        }\r\n    };\r\n    /**\r\n     * Recursive helper for applyOperationToSyncPoints_\r\n     */\r\n    SyncTree.prototype.applyOperationDescendantsHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\r\n        var _this = this;\r\n        var syncPoint = syncPointTree.get(Path.Empty);\r\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n        if (serverCache == null && syncPoint != null) {\r\n            serverCache = syncPoint.getCompleteServerCache(Path.Empty);\r\n        }\r\n        var events = [];\r\n        syncPointTree.children.inorderTraversal(function (childName, childTree) {\r\n            var childServerCache = serverCache\r\n                ? serverCache.getImmediateChild(childName)\r\n                : null;\r\n            var childWritesCache = writesCache.child(childName);\r\n            var childOperation = operation.operationForChild(childName);\r\n            if (childOperation) {\r\n                events = events.concat(_this.applyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n            }\r\n        });\r\n        if (syncPoint) {\r\n            events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\r\n        }\r\n        return events;\r\n    };\r\n    /**\r\n     * Static tracker for next query tag.\r\n     */\r\n    SyncTree.nextQueryTag_ = 1;\r\n    return SyncTree;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n *\r\n * @constructor\r\n */\r\nvar SnapshotHolder = /** @class */ (function () {\r\n    function SnapshotHolder() {\r\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\r\n    }\r\n    SnapshotHolder.prototype.getNode = function (path) {\r\n        return this.rootNode_.getChild(path);\r\n    };\r\n    SnapshotHolder.prototype.updateSnapshot = function (path, newSnapshotNode) {\r\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\r\n    };\r\n    return SnapshotHolder;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Tracks a collection of stats.\r\n *\r\n * @constructor\r\n */\r\nvar StatsCollection = /** @class */ (function () {\r\n    function StatsCollection() {\r\n        this.counters_ = {};\r\n    }\r\n    StatsCollection.prototype.incrementCounter = function (name, amount) {\r\n        if (amount === void 0) { amount = 1; }\r\n        if (!util.contains(this.counters_, name)) {\r\n            this.counters_[name] = 0;\r\n        }\r\n        this.counters_[name] += amount;\r\n    };\r\n    StatsCollection.prototype.get = function () {\r\n        return util.deepCopy(this.counters_);\r\n    };\r\n    return StatsCollection;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar StatsManager = /** @class */ (function () {\r\n    function StatsManager() {\r\n    }\r\n    StatsManager.getCollection = function (repoInfo) {\r\n        var hashString = repoInfo.toString();\r\n        if (!this.collections_[hashString]) {\r\n            this.collections_[hashString] = new StatsCollection();\r\n        }\r\n        return this.collections_[hashString];\r\n    };\r\n    StatsManager.getOrCreateReporter = function (repoInfo, creatorFunction) {\r\n        var hashString = repoInfo.toString();\r\n        if (!this.reporters_[hashString]) {\r\n            this.reporters_[hashString] = creatorFunction();\r\n        }\r\n        return this.reporters_[hashString];\r\n    };\r\n    StatsManager.collections_ = {};\r\n    StatsManager.reporters_ = {};\r\n    return StatsManager;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ The collection to \"listen\" to.\r\n * @constructor\r\n */\r\nvar StatsListener = /** @class */ (function () {\r\n    function StatsListener(collection_) {\r\n        this.collection_ = collection_;\r\n        this.last_ = null;\r\n    }\r\n    StatsListener.prototype.get = function () {\r\n        var newStats = this.collection_.get();\r\n        var delta = tslib.__assign({}, newStats);\r\n        if (this.last_) {\r\n            each(this.last_, function (stat, value) {\r\n                delta[stat] = delta[stat] - value;\r\n            });\r\n        }\r\n        this.last_ = newStats;\r\n        return delta;\r\n    };\r\n    return StatsListener;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\r\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\r\n// seconds to try to ensure the Firebase connection is established / settled.\r\nvar FIRST_STATS_MIN_TIME = 10 * 1000;\r\nvar FIRST_STATS_MAX_TIME = 30 * 1000;\r\n// We'll continue to report stats on average every 5 minutes.\r\nvar REPORT_STATS_INTERVAL = 5 * 60 * 1000;\r\n/**\r\n * @constructor\r\n */\r\nvar StatsReporter = /** @class */ (function () {\r\n    /**\r\n     * @param collection\r\n     * @param server_\r\n     */\r\n    function StatsReporter(collection, server_) {\r\n        this.server_ = server_;\r\n        this.statsToReport_ = {};\r\n        this.statsListener_ = new StatsListener(collection);\r\n        var timeout = FIRST_STATS_MIN_TIME +\r\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\r\n    }\r\n    StatsReporter.prototype.includeStat = function (stat) {\r\n        this.statsToReport_[stat] = true;\r\n    };\r\n    StatsReporter.prototype.reportStats_ = function () {\r\n        var _this = this;\r\n        var stats = this.statsListener_.get();\r\n        var reportedStats = {};\r\n        var haveStatsToReport = false;\r\n        each(stats, function (stat, value) {\r\n            if (value > 0 && util.contains(_this.statsToReport_, stat)) {\r\n                reportedStats[stat] = value;\r\n                haveStatsToReport = true;\r\n            }\r\n        });\r\n        if (haveStatsToReport) {\r\n            this.server_.reportStats(reportedStats);\r\n        }\r\n        // queue our next run.\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\r\n    };\r\n    return StatsReporter;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n * @constructor\r\n */\r\nvar EventQueue = /** @class */ (function () {\r\n    function EventQueue() {\r\n        /**\r\n         * @private\r\n         * @type {!Array.<EventList>}\r\n         */\r\n        this.eventLists_ = [];\r\n        /**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         * @private\r\n         * @type {!number}\r\n         */\r\n        this.recursionDepth_ = 0;\r\n    }\r\n    /**\r\n     * @param {!Array.<Event>} eventDataList The new events to queue.\r\n     */\r\n    EventQueue.prototype.queueEvents = function (eventDataList) {\r\n        // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\r\n        var currList = null;\r\n        for (var i = 0; i < eventDataList.length; i++) {\r\n            var eventData = eventDataList[i];\r\n            var eventPath = eventData.getPath();\r\n            if (currList !== null && !eventPath.equals(currList.getPath())) {\r\n                this.eventLists_.push(currList);\r\n                currList = null;\r\n            }\r\n            if (currList === null) {\r\n                currList = new EventList(eventPath);\r\n            }\r\n            currList.add(eventData);\r\n        }\r\n        if (currList) {\r\n            this.eventLists_.push(currList);\r\n        }\r\n    };\r\n    /**\r\n     * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n     * for the specified path.\r\n     *\r\n     * It is assumed that the new events are all for the specified path.\r\n     *\r\n     * @param {!Path} path The path to raise events for.\r\n     * @param {!Array.<Event>} eventDataList The new events to raise.\r\n     */\r\n    EventQueue.prototype.raiseEventsAtPath = function (path, eventDataList) {\r\n        this.queueEvents(eventDataList);\r\n        this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\r\n            return eventPath.equals(path);\r\n        });\r\n    };\r\n    /**\r\n     * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n     * locations related to the specified change path (i.e. all ancestors and descendants).\r\n     *\r\n     * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n     *\r\n     * @param {!Path} changedPath The path to raise events for.\r\n     * @param {!Array.<!Event>} eventDataList The events to raise\r\n     */\r\n    EventQueue.prototype.raiseEventsForChangedPath = function (changedPath, eventDataList) {\r\n        this.queueEvents(eventDataList);\r\n        this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\r\n            return eventPath.contains(changedPath) || changedPath.contains(eventPath);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!function(!Path):boolean} predicate\r\n     * @private\r\n     */\r\n    EventQueue.prototype.raiseQueuedEventsMatchingPredicate_ = function (predicate) {\r\n        this.recursionDepth_++;\r\n        var sentAll = true;\r\n        for (var i = 0; i < this.eventLists_.length; i++) {\r\n            var eventList = this.eventLists_[i];\r\n            if (eventList) {\r\n                var eventPath = eventList.getPath();\r\n                if (predicate(eventPath)) {\r\n                    this.eventLists_[i].raise();\r\n                    this.eventLists_[i] = null;\r\n                }\r\n                else {\r\n                    sentAll = false;\r\n                }\r\n            }\r\n        }\r\n        if (sentAll) {\r\n            this.eventLists_ = [];\r\n        }\r\n        this.recursionDepth_--;\r\n    };\r\n    return EventQueue;\r\n}());\r\n/**\r\n * @param {!Path} path\r\n * @constructor\r\n */\r\nvar EventList = /** @class */ (function () {\r\n    function EventList(path_) {\r\n        this.path_ = path_;\r\n        /**\r\n         * @type {!Array.<Event>}\r\n         * @private\r\n         */\r\n        this.events_ = [];\r\n    }\r\n    /**\r\n     * @param {!Event} eventData\r\n     */\r\n    EventList.prototype.add = function (eventData) {\r\n        this.events_.push(eventData);\r\n    };\r\n    /**\r\n     * Iterates through the list and raises each event\r\n     */\r\n    EventList.prototype.raise = function () {\r\n        for (var i = 0; i < this.events_.length; i++) {\r\n            var eventData = this.events_[i];\r\n            if (eventData !== null) {\r\n                this.events_[i] = null;\r\n                var eventFn = eventData.getEventRunner();\r\n                if (logger) {\r\n                    log('event: ' + eventData.toString());\r\n                }\r\n                exceptionGuard(eventFn);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @return {!Path}\r\n     */\r\n    EventList.prototype.getPath = function () {\r\n        return this.path_;\r\n    };\r\n    return EventList;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\r\nvar EventEmitter = /** @class */ (function () {\r\n    /**\r\n     * @param {!Array.<string>} allowedEvents_\r\n     */\r\n    function EventEmitter(allowedEvents_) {\r\n        this.allowedEvents_ = allowedEvents_;\r\n        this.listeners_ = {};\r\n        util.assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\r\n    }\r\n    /**\r\n     * To be called by derived classes to trigger events.\r\n     * @param {!string} eventType\r\n     * @param {...*} varArgs\r\n     */\r\n    EventEmitter.prototype.trigger = function (eventType) {\r\n        var varArgs = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            varArgs[_i - 1] = arguments[_i];\r\n        }\r\n        if (Array.isArray(this.listeners_[eventType])) {\r\n            // Clone the list, since callbacks could add/remove listeners.\r\n            var listeners = tslib.__spread(this.listeners_[eventType]);\r\n            for (var i = 0; i < listeners.length; i++) {\r\n                listeners[i].callback.apply(listeners[i].context, varArgs);\r\n            }\r\n        }\r\n    };\r\n    EventEmitter.prototype.on = function (eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\r\n        this.listeners_[eventType].push({ callback: callback, context: context });\r\n        var eventData = this.getInitialEvent(eventType);\r\n        if (eventData) {\r\n            callback.apply(context, eventData);\r\n        }\r\n    };\r\n    EventEmitter.prototype.off = function (eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        var listeners = this.listeners_[eventType] || [];\r\n        for (var i = 0; i < listeners.length; i++) {\r\n            if (listeners[i].callback === callback &&\r\n                (!context || context === listeners[i].context)) {\r\n                listeners.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    };\r\n    EventEmitter.prototype.validateEventType_ = function (eventType) {\r\n        util.assert(this.allowedEvents_.find(function (et) {\r\n            return et === eventType;\r\n        }), 'Unknown event: ' + eventType);\r\n    };\r\n    return EventEmitter;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @extends {EventEmitter}\r\n */\r\nvar VisibilityMonitor = /** @class */ (function (_super) {\r\n    tslib.__extends(VisibilityMonitor, _super);\r\n    function VisibilityMonitor() {\r\n        var _this = _super.call(this, ['visible']) || this;\r\n        var hidden;\r\n        var visibilityChange;\r\n        if (typeof document !== 'undefined' &&\r\n            typeof document.addEventListener !== 'undefined') {\r\n            if (typeof document['hidden'] !== 'undefined') {\r\n                // Opera 12.10 and Firefox 18 and later support\r\n                visibilityChange = 'visibilitychange';\r\n                hidden = 'hidden';\r\n            }\r\n            else if (typeof document['mozHidden'] !== 'undefined') {\r\n                visibilityChange = 'mozvisibilitychange';\r\n                hidden = 'mozHidden';\r\n            }\r\n            else if (typeof document['msHidden'] !== 'undefined') {\r\n                visibilityChange = 'msvisibilitychange';\r\n                hidden = 'msHidden';\r\n            }\r\n            else if (typeof document['webkitHidden'] !== 'undefined') {\r\n                visibilityChange = 'webkitvisibilitychange';\r\n                hidden = 'webkitHidden';\r\n            }\r\n        }\r\n        // Initially, we always assume we are visible. This ensures that in browsers\r\n        // without page visibility support or in cases where we are never visible\r\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\r\n        // reconnects\r\n        _this.visible_ = true;\r\n        if (visibilityChange) {\r\n            document.addEventListener(visibilityChange, function () {\r\n                var visible = !document[hidden];\r\n                if (visible !== _this.visible_) {\r\n                    _this.visible_ = visible;\r\n                    _this.trigger('visible', visible);\r\n                }\r\n            }, false);\r\n        }\r\n        return _this;\r\n    }\r\n    VisibilityMonitor.getInstance = function () {\r\n        return new VisibilityMonitor();\r\n    };\r\n    /**\r\n     * @param {!string} eventType\r\n     * @return {Array.<boolean>}\r\n     */\r\n    VisibilityMonitor.prototype.getInitialEvent = function (eventType) {\r\n        util.assert(eventType === 'visible', 'Unknown event type: ' + eventType);\r\n        return [this.visible_];\r\n    };\r\n    return VisibilityMonitor;\r\n}(EventEmitter));\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n *\r\n * @extends {EventEmitter}\r\n */\r\nvar OnlineMonitor = /** @class */ (function (_super) {\r\n    tslib.__extends(OnlineMonitor, _super);\r\n    function OnlineMonitor() {\r\n        var _this = _super.call(this, ['online']) || this;\r\n        _this.online_ = true;\r\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\r\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\r\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\r\n        // for Cordova.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window.addEventListener !== 'undefined' &&\r\n            !util.isMobileCordova()) {\r\n            window.addEventListener('online', function () {\r\n                if (!_this.online_) {\r\n                    _this.online_ = true;\r\n                    _this.trigger('online', true);\r\n                }\r\n            }, false);\r\n            window.addEventListener('offline', function () {\r\n                if (_this.online_) {\r\n                    _this.online_ = false;\r\n                    _this.trigger('online', false);\r\n                }\r\n            }, false);\r\n        }\r\n        return _this;\r\n    }\r\n    OnlineMonitor.getInstance = function () {\r\n        return new OnlineMonitor();\r\n    };\r\n    /**\r\n     * @param {!string} eventType\r\n     * @return {Array.<boolean>}\r\n     */\r\n    OnlineMonitor.prototype.getInitialEvent = function (eventType) {\r\n        util.assert(eventType === 'online', 'Unknown event type: ' + eventType);\r\n        return [this.online_];\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    OnlineMonitor.prototype.currentlyOnline = function () {\r\n        return this.online_;\r\n    };\r\n    return OnlineMonitor;\r\n}(EventEmitter));\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n * @constructor\r\n */\r\nvar PacketReceiver = /** @class */ (function () {\r\n    /**\r\n     * @param onMessage_\r\n     */\r\n    function PacketReceiver(onMessage_) {\r\n        this.onMessage_ = onMessage_;\r\n        this.pendingResponses = [];\r\n        this.currentResponseNum = 0;\r\n        this.closeAfterResponse = -1;\r\n        this.onClose = null;\r\n    }\r\n    PacketReceiver.prototype.closeAfter = function (responseNum, callback) {\r\n        this.closeAfterResponse = responseNum;\r\n        this.onClose = callback;\r\n        if (this.closeAfterResponse < this.currentResponseNum) {\r\n            this.onClose();\r\n            this.onClose = null;\r\n        }\r\n    };\r\n    /**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     * @param {number} requestNum\r\n     * @param {Array} data\r\n     */\r\n    PacketReceiver.prototype.handleResponse = function (requestNum, data) {\r\n        var _this = this;\r\n        this.pendingResponses[requestNum] = data;\r\n        var _loop_1 = function () {\r\n            var toProcess = this_1.pendingResponses[this_1.currentResponseNum];\r\n            delete this_1.pendingResponses[this_1.currentResponseNum];\r\n            var _loop_2 = function (i) {\r\n                if (toProcess[i]) {\r\n                    exceptionGuard(function () {\r\n                        _this.onMessage_(toProcess[i]);\r\n                    });\r\n                }\r\n            };\r\n            for (var i = 0; i < toProcess.length; ++i) {\r\n                _loop_2(i);\r\n            }\r\n            if (this_1.currentResponseNum === this_1.closeAfterResponse) {\r\n                if (this_1.onClose) {\r\n                    this_1.onClose();\r\n                    this_1.onClose = null;\r\n                }\r\n                return \"break\";\r\n            }\r\n            this_1.currentResponseNum++;\r\n        };\r\n        var this_1 = this;\r\n        while (this.pendingResponses[this.currentResponseNum]) {\r\n            var state_1 = _loop_1();\r\n            if (state_1 === \"break\")\r\n                break;\r\n        }\r\n    };\r\n    return PacketReceiver;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// URL query parameters associated with longpolling\r\nvar FIREBASE_LONGPOLL_START_PARAM = 'start';\r\nvar FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\r\nvar FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\r\nvar FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\r\nvar FIREBASE_LONGPOLL_ID_PARAM = 'id';\r\nvar FIREBASE_LONGPOLL_PW_PARAM = 'pw';\r\nvar FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\r\nvar FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\r\nvar FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\r\nvar FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\r\nvar FIREBASE_LONGPOLL_DATA_PARAM = 'd';\r\nvar FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\r\n//Data size constants.\r\n//TODO: Perf: the maximum length actually differs from browser to browser.\r\n// We should check what browser we're on and set accordingly.\r\nvar MAX_URL_DATA_SIZE = 1870;\r\nvar SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\r\nvar MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\r\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n * @const\r\n * @type {number}\r\n */\r\nvar KEEPALIVE_REQUEST_INTERVAL = 25000;\r\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n * @const\r\n * @type {number}\r\n */\r\nvar LP_CONNECT_TIMEOUT = 30000;\r\n/**\r\n * This class manages a single long-polling connection.\r\n *\r\n * @constructor\r\n * @implements {Transport}\r\n */\r\nvar BrowserPollConnection = /** @class */ (function () {\r\n    /**\r\n     * @param connId An identifier for this connection, used for logging\r\n     * @param repoInfo The info for the endpoint to send data to.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param transportSessionId Optional transportSessionid if we are reconnecting for an existing\r\n     *                                         transport session\r\n     * @param lastSessionId Optional lastSessionId if the PersistentConnection has already created a\r\n     *                                     connection previously\r\n     */\r\n    function BrowserPollConnection(connId, repoInfo, applicationId, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.repoInfo = repoInfo;\r\n        this.applicationId = applicationId;\r\n        this.transportSessionId = transportSessionId;\r\n        this.lastSessionId = lastSessionId;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.everConnected_ = false;\r\n        this.log_ = logWrapper(connId);\r\n        this.stats_ = StatsManager.getCollection(repoInfo);\r\n        this.urlFn = function (params) {\r\n            return repoInfo.connectionURL(LONG_POLLING, params);\r\n        };\r\n    }\r\n    /**\r\n     *\r\n     * @param {function(Object)} onMessage Callback when messages arrive\r\n     * @param {function()} onDisconnect Callback with connection lost.\r\n     */\r\n    BrowserPollConnection.prototype.open = function (onMessage, onDisconnect) {\r\n        var _this = this;\r\n        this.curSegmentNum = 0;\r\n        this.onDisconnect_ = onDisconnect;\r\n        this.myPacketOrderer = new PacketReceiver(onMessage);\r\n        this.isClosed_ = false;\r\n        this.connectTimeoutTimer_ = setTimeout(function () {\r\n            _this.log_('Timed out trying to connect.');\r\n            // Make sure we clear the host cache\r\n            _this.onClosed_();\r\n            _this.connectTimeoutTimer_ = null;\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(LP_CONNECT_TIMEOUT));\r\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\r\n        executeWhenDOMReady(function () {\r\n            if (_this.isClosed_) {\r\n                return;\r\n            }\r\n            //Set up a callback that gets triggered once a connection is set up.\r\n            _this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {\r\n                var args = [];\r\n                for (var _i = 0; _i < arguments.length; _i++) {\r\n                    args[_i] = arguments[_i];\r\n                }\r\n                var _a = tslib.__read(args, 5), command = _a[0], arg1 = _a[1], arg2 = _a[2], arg3 = _a[3], arg4 = _a[4];\r\n                _this.incrementIncomingBytes_(args);\r\n                if (!_this.scriptTagHolder) {\r\n                    return; // we closed the connection.\r\n                }\r\n                if (_this.connectTimeoutTimer_) {\r\n                    clearTimeout(_this.connectTimeoutTimer_);\r\n                    _this.connectTimeoutTimer_ = null;\r\n                }\r\n                _this.everConnected_ = true;\r\n                if (command === FIREBASE_LONGPOLL_START_PARAM) {\r\n                    _this.id = arg1;\r\n                    _this.password = arg2;\r\n                }\r\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\r\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\r\n                    if (arg1) {\r\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\r\n                        // through our already open polls), so don't send any more.\r\n                        _this.scriptTagHolder.sendNewPolls = false;\r\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\r\n                        // all of the responses up to this one before closing\r\n                        _this.myPacketOrderer.closeAfter(arg1, function () {\r\n                            _this.onClosed_();\r\n                        });\r\n                    }\r\n                    else {\r\n                        _this.onClosed_();\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Unrecognized command received: ' + command);\r\n                }\r\n            }, function () {\r\n                var args = [];\r\n                for (var _i = 0; _i < arguments.length; _i++) {\r\n                    args[_i] = arguments[_i];\r\n                }\r\n                var _a = tslib.__read(args, 2), pN = _a[0], data = _a[1];\r\n                _this.incrementIncomingBytes_(args);\r\n                _this.myPacketOrderer.handleResponse(pN, data);\r\n            }, function () {\r\n                _this.onClosed_();\r\n            }, _this.urlFn);\r\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\r\n            //from cache.\r\n            var urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\r\n            if (_this.scriptTagHolder.uniqueCallbackIdentifier) {\r\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;\r\n            }\r\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n            if (_this.transportSessionId) {\r\n                urlParams[TRANSPORT_SESSION_PARAM] = _this.transportSessionId;\r\n            }\r\n            if (_this.lastSessionId) {\r\n                urlParams[LAST_SESSION_PARAM] = _this.lastSessionId;\r\n            }\r\n            if (_this.applicationId) {\r\n                urlParams[APPLICATION_ID_PARAM] = _this.applicationId;\r\n            }\r\n            if (typeof location !== 'undefined' &&\r\n                location.href &&\r\n                location.href.indexOf(FORGE_DOMAIN) !== -1) {\r\n                urlParams[REFERER_PARAM] = FORGE_REF;\r\n            }\r\n            var connectURL = _this.urlFn(urlParams);\r\n            _this.log_('Connecting via long-poll to ' + connectURL);\r\n            _this.scriptTagHolder.addTag(connectURL, function () {\r\n                /* do nothing */\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */\r\n    BrowserPollConnection.prototype.start = function () {\r\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\r\n        this.addDisconnectPingFrame(this.id, this.password);\r\n    };\r\n    /**\r\n     * Forces long polling to be considered as a potential transport\r\n     */\r\n    BrowserPollConnection.forceAllow = function () {\r\n        BrowserPollConnection.forceAllow_ = true;\r\n    };\r\n    /**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */\r\n    BrowserPollConnection.forceDisallow = function () {\r\n        BrowserPollConnection.forceDisallow_ = true;\r\n    };\r\n    // Static method, use string literal so it can be accessed in a generic way\r\n    BrowserPollConnection.isAvailable = function () {\r\n        if (util.isNodeSdk()) {\r\n            return false;\r\n        }\r\n        else if (BrowserPollConnection.forceAllow_) {\r\n            return true;\r\n        }\r\n        else {\r\n            // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\r\n            // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\r\n            return (!BrowserPollConnection.forceDisallow_ &&\r\n                typeof document !== 'undefined' &&\r\n                document.createElement != null &&\r\n                !isChromeExtensionContentScript() &&\r\n                !isWindowsStoreApp());\r\n        }\r\n    };\r\n    /**\r\n     * No-op for polling\r\n     */\r\n    BrowserPollConnection.prototype.markConnectionHealthy = function () { };\r\n    /**\r\n     * Stops polling and cleans up the iframe\r\n     * @private\r\n     */\r\n    BrowserPollConnection.prototype.shutdown_ = function () {\r\n        this.isClosed_ = true;\r\n        if (this.scriptTagHolder) {\r\n            this.scriptTagHolder.close();\r\n            this.scriptTagHolder = null;\r\n        }\r\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\r\n        if (this.myDisconnFrame) {\r\n            document.body.removeChild(this.myDisconnFrame);\r\n            this.myDisconnFrame = null;\r\n        }\r\n        if (this.connectTimeoutTimer_) {\r\n            clearTimeout(this.connectTimeoutTimer_);\r\n            this.connectTimeoutTimer_ = null;\r\n        }\r\n    };\r\n    /**\r\n     * Triggered when this transport is closed\r\n     * @private\r\n     */\r\n    BrowserPollConnection.prototype.onClosed_ = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is closing itself');\r\n            this.shutdown_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_(this.everConnected_);\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */\r\n    BrowserPollConnection.prototype.close = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is being closed.');\r\n            this.shutdown_();\r\n        }\r\n    };\r\n    /**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param {!Object} data The JSON data to transmit.\r\n     */\r\n    BrowserPollConnection.prototype.send = function (data) {\r\n        var dataStr = util.stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //first, lets get the base64-encoded data\r\n        var base64data = util.base64Encode(dataStr);\r\n        //We can only fit a certain amount in each URL, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        var dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\r\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\r\n        //of segments so that we can reassemble the packet on the server.\r\n        for (var i = 0; i < dataSegs.length; i++) {\r\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\r\n            this.curSegmentNum++;\r\n        }\r\n    };\r\n    /**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     * @param {!string} id\r\n     * @param {!string} pw\r\n     */\r\n    BrowserPollConnection.prototype.addDisconnectPingFrame = function (id, pw) {\r\n        if (util.isNodeSdk()) {\r\n            return;\r\n        }\r\n        this.myDisconnFrame = document.createElement('iframe');\r\n        var urlParams = {};\r\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\r\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\r\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\r\n        this.myDisconnFrame.src = this.urlFn(urlParams);\r\n        this.myDisconnFrame.style.display = 'none';\r\n        document.body.appendChild(this.myDisconnFrame);\r\n    };\r\n    /**\r\n     * Used to track the bytes received by this client\r\n     * @param {*} args\r\n     * @private\r\n     */\r\n    BrowserPollConnection.prototype.incrementIncomingBytes_ = function (args) {\r\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\r\n        var bytesReceived = util.stringify(args).length;\r\n        this.bytesReceived += bytesReceived;\r\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\r\n    };\r\n    return BrowserPollConnection;\r\n}());\r\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n * @constructor\r\n *********************************************************************************************/\r\nvar FirebaseIFrameScriptHolder = /** @class */ (function () {\r\n    /**\r\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */\r\n    function FirebaseIFrameScriptHolder(commandCB, onMessageCB, onDisconnect, urlFn) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.urlFn = urlFn;\r\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\r\n        //problems in some browsers.\r\n        this.outstandingRequests = new Set();\r\n        //A queue of the pending segments waiting for transmission to the server.\r\n        this.pendingSegs = [];\r\n        //A serial number. We use this for two things:\r\n        // 1) A way to ensure the browser doesn't cache responses to polls\r\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\r\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\r\n        //    JSONP code in the order it was added to the iframe.\r\n        this.currentSerial = Math.floor(Math.random() * 100000000);\r\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\r\n        // incoming data from the server that we're waiting for).\r\n        this.sendNewPolls = true;\r\n        if (!util.isNodeSdk()) {\r\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\r\n            //iframes where we put the long-polling script tags. We have two callbacks:\r\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\r\n            //   2) Message Callback - Triggered when new data arrives.\r\n            this.uniqueCallbackIdentifier = LUIDGenerator();\r\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\r\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;\r\n            //Create an iframe for us to add script tags to.\r\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\r\n            // Set the iframe's contents.\r\n            var script = '';\r\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\r\n            // for ie9, but ie8 needs to do it again in the document itself.\r\n            if (this.myIFrame.src &&\r\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\r\n                var currentDomain = document.domain;\r\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\r\n            }\r\n            var iframeContents = '<html><body>' + script + '</body></html>';\r\n            try {\r\n                this.myIFrame.doc.open();\r\n                this.myIFrame.doc.write(iframeContents);\r\n                this.myIFrame.doc.close();\r\n            }\r\n            catch (e) {\r\n                log('frame writing exception');\r\n                if (e.stack) {\r\n                    log(e.stack);\r\n                }\r\n                log(e);\r\n            }\r\n        }\r\n        else {\r\n            this.commandCB = commandCB;\r\n            this.onMessageCB = onMessageCB;\r\n        }\r\n    }\r\n    /**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     * @private\r\n     * @return {Element}\r\n     */\r\n    FirebaseIFrameScriptHolder.createIFrame_ = function () {\r\n        var iframe = document.createElement('iframe');\r\n        iframe.style.display = 'none';\r\n        // This is necessary in order to initialize the document inside the iframe\r\n        if (document.body) {\r\n            document.body.appendChild(iframe);\r\n            try {\r\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\r\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\r\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\r\n                var a = iframe.contentWindow.document;\r\n                if (!a) {\r\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\r\n                    log('No IE domain setting required');\r\n                }\r\n            }\r\n            catch (e) {\r\n                var domain = document.domain;\r\n                iframe.src =\r\n                    \"javascript:void((function(){document.open();document.domain='\" +\r\n                        domain +\r\n                        \"';document.close();})())\";\r\n            }\r\n        }\r\n        else {\r\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\r\n            // never gets hit.\r\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\r\n        }\r\n        // Get the document of the iframe in a browser-specific way.\r\n        if (iframe.contentDocument) {\r\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\r\n        }\r\n        else if (iframe.contentWindow) {\r\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (iframe.document) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            iframe.doc = iframe.document; //others?\r\n        }\r\n        return iframe;\r\n    };\r\n    /**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.close = function () {\r\n        var _this = this;\r\n        //Mark this iframe as dead, so no new requests are sent.\r\n        this.alive = false;\r\n        if (this.myIFrame) {\r\n            //We have to actually remove all of the html inside this iframe before removing it from the\r\n            //window, or IE will continue loading and executing the script tags we've already added, which\r\n            //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\r\n            this.myIFrame.doc.body.innerHTML = '';\r\n            setTimeout(function () {\r\n                if (_this.myIFrame !== null) {\r\n                    document.body.removeChild(_this.myIFrame);\r\n                    _this.myIFrame = null;\r\n                }\r\n            }, Math.floor(0));\r\n        }\r\n        // Protect from being called recursively.\r\n        var onDisconnect = this.onDisconnect;\r\n        if (onDisconnect) {\r\n            this.onDisconnect = null;\r\n            onDisconnect();\r\n        }\r\n    };\r\n    /**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param {!string} id - The ID of this connection\r\n     * @param {!string} pw - The password for this connection\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.startLongPoll = function (id, pw) {\r\n        this.myID = id;\r\n        this.myPW = pw;\r\n        this.alive = true;\r\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\r\n        while (this.newRequest_()) { }\r\n    };\r\n    /**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.newRequest_ = function () {\r\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\r\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\r\n        // close the old request.\r\n        if (this.alive &&\r\n            this.sendNewPolls &&\r\n            this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\r\n            //construct our url\r\n            this.currentSerial++;\r\n            var urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\r\n            var theURL = this.urlFn(urlParams);\r\n            //Now add as much data as we can.\r\n            var curDataString = '';\r\n            var i = 0;\r\n            while (this.pendingSegs.length > 0) {\r\n                //first, lets see if the next segment will fit.\r\n                var nextSeg = this.pendingSegs[0];\r\n                if (nextSeg.d.length +\r\n                    SEG_HEADER_SIZE +\r\n                    curDataString.length <=\r\n                    MAX_URL_DATA_SIZE) {\r\n                    //great, the segment will fit. Lets append it.\r\n                    var theSeg = this.pendingSegs.shift();\r\n                    curDataString =\r\n                        curDataString +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.seg +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.ts +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_DATA_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.d;\r\n                    i++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            theURL = theURL + curDataString;\r\n            this.addLongPollTag_(theURL, this.currentSerial);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.enqueueSegment = function (segnum, totalsegs, data) {\r\n        //add this to the queue of segments to send.\r\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\r\n        //send the data immediately if there isn't already data being transmitted, unless\r\n        //startLongPoll hasn't been called yet.\r\n        if (this.alive) {\r\n            this.newRequest_();\r\n        }\r\n    };\r\n    /**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param {!string} url - The URL of the script tag.\r\n     * @param {!number} serial - The serial number of the request.\r\n     * @private\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.addLongPollTag_ = function (url, serial) {\r\n        var _this = this;\r\n        //remember that we sent this request.\r\n        this.outstandingRequests.add(serial);\r\n        var doNewRequest = function () {\r\n            _this.outstandingRequests.delete(serial);\r\n            _this.newRequest_();\r\n        };\r\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\r\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\r\n        var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\r\n        var readyStateCB = function () {\r\n            // Request completed.  Cancel the keepalive.\r\n            clearTimeout(keepaliveTimeout);\r\n            // Trigger a new request so we can continue receiving data.\r\n            doNewRequest();\r\n        };\r\n        this.addTag(url, readyStateCB);\r\n    };\r\n    /**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param {!string} url - The URL for the script tag source.\r\n     * @param {!function()} loadCB - A callback to be triggered once the script has loaded.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.addTag = function (url, loadCB) {\r\n        var _this = this;\r\n        if (util.isNodeSdk()) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            this.doNodeLongPoll(url, loadCB);\r\n        }\r\n        else {\r\n            setTimeout(function () {\r\n                try {\r\n                    // if we're already closed, don't add this poll\r\n                    if (!_this.sendNewPolls) {\r\n                        return;\r\n                    }\r\n                    var newScript_1 = _this.myIFrame.doc.createElement('script');\r\n                    newScript_1.type = 'text/javascript';\r\n                    newScript_1.async = true;\r\n                    newScript_1.src = url;\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    newScript_1.onload = newScript_1.onreadystatechange = function () {\r\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                        var rstate = newScript_1.readyState;\r\n                        if (!rstate || rstate === 'loaded' || rstate === 'complete') {\r\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                            newScript_1.onload = newScript_1.onreadystatechange = null;\r\n                            if (newScript_1.parentNode) {\r\n                                newScript_1.parentNode.removeChild(newScript_1);\r\n                            }\r\n                            loadCB();\r\n                        }\r\n                    };\r\n                    newScript_1.onerror = function () {\r\n                        log('Long-poll script failed to load: ' + url);\r\n                        _this.sendNewPolls = false;\r\n                        _this.close();\r\n                    };\r\n                    _this.myIFrame.doc.body.appendChild(newScript_1);\r\n                }\r\n                catch (e) {\r\n                    // TODO: we should make this error visible somehow\r\n                }\r\n            }, Math.floor(1));\r\n        }\r\n    };\r\n    return FirebaseIFrameScriptHolder;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** The semver (www.semver.org) version of the SDK. */\r\nvar SDK_VERSION = '';\r\n// SDK_VERSION should be set before any database instance is created\r\nfunction setSDKVersion(version) {\r\n    SDK_VERSION = version;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar WEBSOCKET_MAX_FRAME_SIZE = 16384;\r\nvar WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\r\nvar WebSocketImpl = null;\r\nif (typeof MozWebSocket !== 'undefined') {\r\n    WebSocketImpl = MozWebSocket;\r\n}\r\nelse if (typeof WebSocket !== 'undefined') {\r\n    WebSocketImpl = WebSocket;\r\n}\r\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n * @constructor\r\n * @implements {Transport}\r\n */\r\nvar WebSocketConnection = /** @class */ (function () {\r\n    /**\r\n     * @param connId identifier for this transport\r\n     * @param repoInfo The info for the websocket endpoint.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param transportSessionId Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param lastSessionId Optional lastSessionId if there was a previous connection\r\n     */\r\n    function WebSocketConnection(connId, repoInfo, applicationId, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.applicationId = applicationId;\r\n        this.keepaliveTimer = null;\r\n        this.frames = null;\r\n        this.totalFrames = 0;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.log_ = logWrapper(this.connId);\r\n        this.stats_ = StatsManager.getCollection(repoInfo);\r\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId);\r\n        this.nodeAdmin = repoInfo.nodeAdmin;\r\n    }\r\n    /**\r\n     * @param {RepoInfo} repoInfo The info for the websocket endpoint.\r\n     * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\r\n     * @return {string} connection url\r\n     * @private\r\n     */\r\n    WebSocketConnection.connectionURL_ = function (repoInfo, transportSessionId, lastSessionId) {\r\n        var urlParams = {};\r\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n        if (!util.isNodeSdk() &&\r\n            typeof location !== 'undefined' &&\r\n            location.href &&\r\n            location.href.indexOf(FORGE_DOMAIN) !== -1) {\r\n            urlParams[REFERER_PARAM] = FORGE_REF;\r\n        }\r\n        if (transportSessionId) {\r\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\r\n        }\r\n        if (lastSessionId) {\r\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\r\n        }\r\n        return repoInfo.connectionURL(WEBSOCKET, urlParams);\r\n    };\r\n    /**\r\n     *\r\n     * @param onMessage Callback when messages arrive\r\n     * @param onDisconnect Callback with connection lost.\r\n     */\r\n    WebSocketConnection.prototype.open = function (onMessage, onDisconnect) {\r\n        var _this = this;\r\n        this.onDisconnect = onDisconnect;\r\n        this.onMessage = onMessage;\r\n        this.log_('Websocket connecting to ' + this.connURL);\r\n        this.everConnected_ = false;\r\n        // Assume failure until proven otherwise.\r\n        PersistentStorage.set('previous_websocket_failure', true);\r\n        try {\r\n            if (util.isNodeSdk()) {\r\n                var device = this.nodeAdmin ? 'AdminNode' : 'Node';\r\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\r\n                var options = {\r\n                    headers: {\r\n                        'User-Agent': \"Firebase/\" + PROTOCOL_VERSION + \"/\" + SDK_VERSION + \"/\" + process.platform + \"/\" + device,\r\n                        'X-Firebase-GMPID': this.applicationId || ''\r\n                    }\r\n                };\r\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\r\n                var env = process['env'];\r\n                var proxy = this.connURL.indexOf('wss://') === 0\r\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\r\n                    : env['HTTP_PROXY'] || env['http_proxy'];\r\n                if (proxy) {\r\n                    options['proxy'] = { origin: proxy };\r\n                }\r\n                this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n            }\r\n            else {\r\n                var options = {\r\n                    headers: {\r\n                        'X-Firebase-GMPID': this.applicationId || ''\r\n                    }\r\n                };\r\n                this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n            }\r\n        }\r\n        catch (e) {\r\n            this.log_('Error instantiating WebSocket.');\r\n            var error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n            return;\r\n        }\r\n        this.mySock.onopen = function () {\r\n            _this.log_('Websocket connected.');\r\n            _this.everConnected_ = true;\r\n        };\r\n        this.mySock.onclose = function () {\r\n            _this.log_('Websocket connection was disconnected.');\r\n            _this.mySock = null;\r\n            _this.onClosed_();\r\n        };\r\n        this.mySock.onmessage = function (m) {\r\n            _this.handleIncomingFrame(m);\r\n        };\r\n        this.mySock.onerror = function (e) {\r\n            _this.log_('WebSocket error.  Closing connection.');\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            var error = e.message || e.data;\r\n            if (error) {\r\n                _this.log_(error);\r\n            }\r\n            _this.onClosed_();\r\n        };\r\n    };\r\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\r\n    WebSocketConnection.prototype.start = function () { };\r\n    WebSocketConnection.forceDisallow = function () {\r\n        WebSocketConnection.forceDisallow_ = true;\r\n    };\r\n    WebSocketConnection.isAvailable = function () {\r\n        var isOldAndroid = false;\r\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n            var oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\r\n            var oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\r\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\r\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\r\n                    isOldAndroid = true;\r\n                }\r\n            }\r\n        }\r\n        return (!isOldAndroid &&\r\n            WebSocketImpl !== null &&\r\n            !WebSocketConnection.forceDisallow_);\r\n    };\r\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     * @return {boolean}\r\n     */\r\n    WebSocketConnection.previouslyFailed = function () {\r\n        // If our persistent storage is actually only in-memory storage,\r\n        // we default to assuming that it previously failed to be safe.\r\n        return (PersistentStorage.isInMemoryStorage ||\r\n            PersistentStorage.get('previous_websocket_failure') === true);\r\n    };\r\n    WebSocketConnection.prototype.markConnectionHealthy = function () {\r\n        PersistentStorage.remove('previous_websocket_failure');\r\n    };\r\n    WebSocketConnection.prototype.appendFrame_ = function (data) {\r\n        this.frames.push(data);\r\n        if (this.frames.length === this.totalFrames) {\r\n            var fullMess = this.frames.join('');\r\n            this.frames = null;\r\n            var jsonMess = util.jsonEval(fullMess);\r\n            //handle the message\r\n            this.onMessage(jsonMess);\r\n        }\r\n    };\r\n    /**\r\n     * @param {number} frameCount The number of frames we are expecting from the server\r\n     * @private\r\n     */\r\n    WebSocketConnection.prototype.handleNewFrameCount_ = function (frameCount) {\r\n        this.totalFrames = frameCount;\r\n        this.frames = [];\r\n    };\r\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @param {!String} data\r\n     * @return {?String} Any remaining data to be process, or null if there is none\r\n     * @private\r\n     */\r\n    WebSocketConnection.prototype.extractFrameCount_ = function (data) {\r\n        util.assert(this.frames === null, 'We already have a frame buffer');\r\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\r\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\r\n        if (data.length <= 6) {\r\n            var frameCount = Number(data);\r\n            if (!isNaN(frameCount)) {\r\n                this.handleNewFrameCount_(frameCount);\r\n                return null;\r\n            }\r\n        }\r\n        this.handleNewFrameCount_(1);\r\n        return data;\r\n    };\r\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess The frame data\r\n     */\r\n    WebSocketConnection.prototype.handleIncomingFrame = function (mess) {\r\n        if (this.mySock === null) {\r\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\r\n        }\r\n        var data = mess['data'];\r\n        this.bytesReceived += data.length;\r\n        this.stats_.incrementCounter('bytes_received', data.length);\r\n        this.resetKeepAlive();\r\n        if (this.frames !== null) {\r\n            // we're buffering\r\n            this.appendFrame_(data);\r\n        }\r\n        else {\r\n            // try to parse out a frame count, otherwise, assume 1 and process it\r\n            var remainingData = this.extractFrameCount_(data);\r\n            if (remainingData !== null) {\r\n                this.appendFrame_(remainingData);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Send a message to the server\r\n     * @param {Object} data The JSON object to transmit\r\n     */\r\n    WebSocketConnection.prototype.send = function (data) {\r\n        this.resetKeepAlive();\r\n        var dataStr = util.stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        var dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\r\n        //Send the length header\r\n        if (dataSegs.length > 1) {\r\n            this.sendString_(String(dataSegs.length));\r\n        }\r\n        //Send the actual data in segments.\r\n        for (var i = 0; i < dataSegs.length; i++) {\r\n            this.sendString_(dataSegs[i]);\r\n        }\r\n    };\r\n    WebSocketConnection.prototype.shutdown_ = function () {\r\n        this.isClosed_ = true;\r\n        if (this.keepaliveTimer) {\r\n            clearInterval(this.keepaliveTimer);\r\n            this.keepaliveTimer = null;\r\n        }\r\n        if (this.mySock) {\r\n            this.mySock.close();\r\n            this.mySock = null;\r\n        }\r\n    };\r\n    WebSocketConnection.prototype.onClosed_ = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is closing itself');\r\n            this.shutdown_();\r\n            // since this is an internal close, trigger the close listener\r\n            if (this.onDisconnect) {\r\n                this.onDisconnect(this.everConnected_);\r\n                this.onDisconnect = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\r\n    WebSocketConnection.prototype.close = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is being closed');\r\n            this.shutdown_();\r\n        }\r\n    };\r\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\r\n    WebSocketConnection.prototype.resetKeepAlive = function () {\r\n        var _this = this;\r\n        clearInterval(this.keepaliveTimer);\r\n        this.keepaliveTimer = setInterval(function () {\r\n            //If there has been no websocket activity for a while, send a no-op\r\n            if (_this.mySock) {\r\n                _this.sendString_('0');\r\n            }\r\n            _this.resetKeepAlive();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\r\n    };\r\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param {string} str String to send.\r\n     * @private\r\n     */\r\n    WebSocketConnection.prototype.sendString_ = function (str) {\r\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\r\n        // calls for some unknown reason.  We treat these as an error and disconnect.\r\n        // See https://app.asana.com/0/58926111402292/68021340250410\r\n        try {\r\n            this.mySock.send(str);\r\n        }\r\n        catch (e) {\r\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\r\n            setTimeout(this.onClosed_.bind(this), 0);\r\n        }\r\n    };\r\n    /**\r\n     * Number of response before we consider the connection \"healthy.\"\r\n     * @type {number}\r\n     */\r\n    WebSocketConnection.responsesRequiredToBeHealthy = 2;\r\n    /**\r\n     * Time to wait for the connection te become healthy before giving up.\r\n     * @type {number}\r\n     */\r\n    WebSocketConnection.healthyTimeout = 30000;\r\n    return WebSocketConnection;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n * @constructor\r\n */\r\nvar TransportManager = /** @class */ (function () {\r\n    /**\r\n     * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to\r\n     */\r\n    function TransportManager(repoInfo) {\r\n        this.initTransports_(repoInfo);\r\n    }\r\n    Object.defineProperty(TransportManager, \"ALL_TRANSPORTS\", {\r\n        /**\r\n         * @const\r\n         * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}\r\n         */\r\n        get: function () {\r\n            return [BrowserPollConnection, WebSocketConnection];\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @param {!RepoInfo} repoInfo\r\n     * @private\r\n     */\r\n    TransportManager.prototype.initTransports_ = function (repoInfo) {\r\n        var e_1, _a;\r\n        var isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\r\n        var isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\r\n        if (repoInfo.webSocketOnly) {\r\n            if (!isWebSocketsAvailable) {\r\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\r\n            }\r\n            isSkipPollConnection = true;\r\n        }\r\n        if (isSkipPollConnection) {\r\n            this.transports_ = [WebSocketConnection];\r\n        }\r\n        else {\r\n            var transports = (this.transports_ = []);\r\n            try {\r\n                for (var _b = tslib.__values(TransportManager.ALL_TRANSPORTS), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                    var transport = _c.value;\r\n                    if (transport && transport['isAvailable']()) {\r\n                        transports.push(transport);\r\n                    }\r\n                }\r\n            }\r\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n            finally {\r\n                try {\r\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n                }\r\n                finally { if (e_1) throw e_1.error; }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the\r\n     * initial transport to use\r\n     */\r\n    TransportManager.prototype.initialTransport = function () {\r\n        if (this.transports_.length > 0) {\r\n            return this.transports_[0];\r\n        }\r\n        else {\r\n            throw new Error('No transports available');\r\n        }\r\n    };\r\n    /**\r\n     * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next\r\n     * transport, or null\r\n     */\r\n    TransportManager.prototype.upgradeTransport = function () {\r\n        if (this.transports_.length > 1) {\r\n            return this.transports_[1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    return TransportManager;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Abort upgrade attempt if it takes longer than 60s.\r\nvar UPGRADE_TIMEOUT = 60000;\r\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\r\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\r\nvar DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\r\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\r\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\r\n// but we've sent/received enough bytes, we don't cancel the connection.\r\nvar BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\r\nvar BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\r\nvar MESSAGE_TYPE = 't';\r\nvar MESSAGE_DATA = 'd';\r\nvar CONTROL_SHUTDOWN = 's';\r\nvar CONTROL_RESET = 'r';\r\nvar CONTROL_ERROR = 'e';\r\nvar CONTROL_PONG = 'o';\r\nvar SWITCH_ACK = 'a';\r\nvar END_TRANSMISSION = 'n';\r\nvar PING = 'p';\r\nvar SERVER_HELLO = 'h';\r\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n *\r\n * @constructor\r\n */\r\nvar Connection = /** @class */ (function () {\r\n    /**\r\n     * @param id - an id for this connection\r\n     * @param repoInfo_ - the info for the endpoint to connect to\r\n     * @param applicationId_ - the Firebase App ID for this project\r\n     * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */\r\n    function Connection(id, repoInfo_, applicationId_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\r\n        this.id = id;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.onMessage_ = onMessage_;\r\n        this.onReady_ = onReady_;\r\n        this.onDisconnect_ = onDisconnect_;\r\n        this.onKill_ = onKill_;\r\n        this.lastSessionId = lastSessionId;\r\n        this.connectionCount = 0;\r\n        this.pendingDataMessages = [];\r\n        this.state_ = 0 /* CONNECTING */;\r\n        this.log_ = logWrapper('c:' + this.id + ':');\r\n        this.transportManager_ = new TransportManager(repoInfo_);\r\n        this.log_('Connection created');\r\n        this.start_();\r\n    }\r\n    /**\r\n     * Starts a connection attempt\r\n     * @private\r\n     */\r\n    Connection.prototype.start_ = function () {\r\n        var _this = this;\r\n        var conn = this.transportManager_.initialTransport();\r\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, undefined, this.lastSessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\r\n        var onMessageReceived = this.connReceiver_(this.conn_);\r\n        var onConnectionLost = this.disconnReceiver_(this.conn_);\r\n        this.tx_ = this.conn_;\r\n        this.rx_ = this.conn_;\r\n        this.secondaryConn_ = null;\r\n        this.isHealthy_ = false;\r\n        /*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */\r\n        setTimeout(function () {\r\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\r\n            _this.conn_ && _this.conn_.open(onMessageReceived, onConnectionLost);\r\n        }, Math.floor(0));\r\n        var healthyTimeoutMS = conn['healthyTimeout'] || 0;\r\n        if (healthyTimeoutMS > 0) {\r\n            this.healthyTimeout_ = setTimeoutNonBlocking(function () {\r\n                _this.healthyTimeout_ = null;\r\n                if (!_this.isHealthy_) {\r\n                    if (_this.conn_ &&\r\n                        _this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\r\n                        _this.log_('Connection exceeded healthy timeout but has received ' +\r\n                            _this.conn_.bytesReceived +\r\n                            ' bytes.  Marking connection healthy.');\r\n                        _this.isHealthy_ = true;\r\n                        _this.conn_.markConnectionHealthy();\r\n                    }\r\n                    else if (_this.conn_ &&\r\n                        _this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\r\n                        _this.log_('Connection exceeded healthy timeout but has sent ' +\r\n                            _this.conn_.bytesSent +\r\n                            ' bytes.  Leaving connection alive.');\r\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\r\n                        // the server.\r\n                    }\r\n                    else {\r\n                        _this.log_('Closing unhealthy connection after timeout.');\r\n                        _this.close();\r\n                    }\r\n                }\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            }, Math.floor(healthyTimeoutMS));\r\n        }\r\n    };\r\n    /**\r\n     * @return {!string}\r\n     * @private\r\n     */\r\n    Connection.prototype.nextTransportId_ = function () {\r\n        return 'c:' + this.id + ':' + this.connectionCount++;\r\n    };\r\n    Connection.prototype.disconnReceiver_ = function (conn) {\r\n        var _this = this;\r\n        return function (everConnected) {\r\n            if (conn === _this.conn_) {\r\n                _this.onConnectionLost_(everConnected);\r\n            }\r\n            else if (conn === _this.secondaryConn_) {\r\n                _this.log_('Secondary connection lost.');\r\n                _this.onSecondaryConnectionLost_();\r\n            }\r\n            else {\r\n                _this.log_('closing an old connection');\r\n            }\r\n        };\r\n    };\r\n    Connection.prototype.connReceiver_ = function (conn) {\r\n        var _this = this;\r\n        return function (message) {\r\n            if (_this.state_ !== 2 /* DISCONNECTED */) {\r\n                if (conn === _this.rx_) {\r\n                    _this.onPrimaryMessageReceived_(message);\r\n                }\r\n                else if (conn === _this.secondaryConn_) {\r\n                    _this.onSecondaryMessageReceived_(message);\r\n                }\r\n                else {\r\n                    _this.log_('message on old connection');\r\n                }\r\n            }\r\n        };\r\n    };\r\n    /**\r\n     *\r\n     * @param {Object} dataMsg An arbitrary data message to be sent to the server\r\n     */\r\n    Connection.prototype.sendRequest = function (dataMsg) {\r\n        // wrap in a data message envelope and send it on\r\n        var msg = { t: 'd', d: dataMsg };\r\n        this.sendData_(msg);\r\n    };\r\n    Connection.prototype.tryCleanupConnection = function () {\r\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\r\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\r\n            this.conn_ = this.secondaryConn_;\r\n            this.secondaryConn_ = null;\r\n            // the server will shutdown the old connection\r\n        }\r\n    };\r\n    Connection.prototype.onSecondaryControl_ = function (controlData) {\r\n        if (MESSAGE_TYPE in controlData) {\r\n            var cmd = controlData[MESSAGE_TYPE];\r\n            if (cmd === SWITCH_ACK) {\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // Most likely the session wasn't valid. Abandon the switch attempt\r\n                this.log_('Got a reset on secondary, closing it');\r\n                this.secondaryConn_.close();\r\n                // If we were already using this connection for something, than we need to fully close\r\n                if (this.tx_ === this.secondaryConn_ ||\r\n                    this.rx_ === this.secondaryConn_) {\r\n                    this.close();\r\n                }\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on secondary.');\r\n                this.secondaryResponsesRequired_--;\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n        }\r\n    };\r\n    Connection.prototype.onSecondaryMessageReceived_ = function (parsedData) {\r\n        var layer = requireKey('t', parsedData);\r\n        var data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onSecondaryControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            // got a data message, but we're still second connection. Need to buffer it up\r\n            this.pendingDataMessages.push(data);\r\n        }\r\n        else {\r\n            throw new Error('Unknown protocol layer: ' + layer);\r\n        }\r\n    };\r\n    Connection.prototype.upgradeIfSecondaryHealthy_ = function () {\r\n        if (this.secondaryResponsesRequired_ <= 0) {\r\n            this.log_('Secondary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n            this.secondaryConn_.markConnectionHealthy();\r\n            this.proceedWithUpgrade_();\r\n        }\r\n        else {\r\n            // Send a ping to make sure the connection is healthy.\r\n            this.log_('sending ping on secondary.');\r\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    };\r\n    Connection.prototype.proceedWithUpgrade_ = function () {\r\n        // tell this connection to consider itself open\r\n        this.secondaryConn_.start();\r\n        // send ack\r\n        this.log_('sending client ack on secondary');\r\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\r\n        // send end packet on primary transport, switch to sending on this one\r\n        // can receive on this one, buffer responses until end received on primary transport\r\n        this.log_('Ending transmission on primary');\r\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\r\n        this.tx_ = this.secondaryConn_;\r\n        this.tryCleanupConnection();\r\n    };\r\n    Connection.prototype.onPrimaryMessageReceived_ = function (parsedData) {\r\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\r\n        var layer = requireKey('t', parsedData);\r\n        var data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            this.onDataMessage_(data);\r\n        }\r\n    };\r\n    Connection.prototype.onDataMessage_ = function (message) {\r\n        this.onPrimaryResponse_();\r\n        // We don't do anything with data messages, just kick them up a level\r\n        this.onMessage_(message);\r\n    };\r\n    Connection.prototype.onPrimaryResponse_ = function () {\r\n        if (!this.isHealthy_) {\r\n            this.primaryResponsesRequired_--;\r\n            if (this.primaryResponsesRequired_ <= 0) {\r\n                this.log_('Primary connection is healthy.');\r\n                this.isHealthy_ = true;\r\n                this.conn_.markConnectionHealthy();\r\n            }\r\n        }\r\n    };\r\n    Connection.prototype.onControl_ = function (controlData) {\r\n        var cmd = requireKey(MESSAGE_TYPE, controlData);\r\n        if (MESSAGE_DATA in controlData) {\r\n            var payload = controlData[MESSAGE_DATA];\r\n            if (cmd === SERVER_HELLO) {\r\n                this.onHandshake_(payload);\r\n            }\r\n            else if (cmd === END_TRANSMISSION) {\r\n                this.log_('recvd end transmission on primary');\r\n                this.rx_ = this.secondaryConn_;\r\n                for (var i = 0; i < this.pendingDataMessages.length; ++i) {\r\n                    this.onDataMessage_(this.pendingDataMessages[i]);\r\n                }\r\n                this.pendingDataMessages = [];\r\n                this.tryCleanupConnection();\r\n            }\r\n            else if (cmd === CONTROL_SHUTDOWN) {\r\n                // This was previously the 'onKill' callback passed to the lower-level connection\r\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\r\n                this.onConnectionShutdown_(payload);\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // payload in this case is the host we should contact\r\n                this.onReset_(payload);\r\n            }\r\n            else if (cmd === CONTROL_ERROR) {\r\n                error('Server Error: ' + payload);\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on primary.');\r\n                this.onPrimaryResponse_();\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }\r\n            else {\r\n                error('Unknown control packet command: ' + cmd);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {Object} handshake The handshake data returned from the server\r\n     * @private\r\n     */\r\n    Connection.prototype.onHandshake_ = function (handshake) {\r\n        var timestamp = handshake.ts;\r\n        var version = handshake.v;\r\n        var host = handshake.h;\r\n        this.sessionId = handshake.s;\r\n        this.repoInfo_.updateHost(host);\r\n        // if we've already closed the connection, then don't bother trying to progress further\r\n        if (this.state_ === 0 /* CONNECTING */) {\r\n            this.conn_.start();\r\n            this.onConnectionEstablished_(this.conn_, timestamp);\r\n            if (PROTOCOL_VERSION !== version) {\r\n                warn('Protocol version mismatch detected');\r\n            }\r\n            // TODO: do we want to upgrade? when? maybe a delay?\r\n            this.tryStartUpgrade_();\r\n        }\r\n    };\r\n    Connection.prototype.tryStartUpgrade_ = function () {\r\n        var conn = this.transportManager_.upgradeTransport();\r\n        if (conn) {\r\n            this.startUpgrade_(conn);\r\n        }\r\n    };\r\n    Connection.prototype.startUpgrade_ = function (conn) {\r\n        var _this = this;\r\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.sessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.secondaryResponsesRequired_ =\r\n            conn['responsesRequiredToBeHealthy'] || 0;\r\n        var onMessage = this.connReceiver_(this.secondaryConn_);\r\n        var onDisconnect = this.disconnReceiver_(this.secondaryConn_);\r\n        this.secondaryConn_.open(onMessage, onDisconnect);\r\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\r\n        setTimeoutNonBlocking(function () {\r\n            if (_this.secondaryConn_) {\r\n                _this.log_('Timed out trying to upgrade.');\r\n                _this.secondaryConn_.close();\r\n            }\r\n        }, Math.floor(UPGRADE_TIMEOUT));\r\n    };\r\n    Connection.prototype.onReset_ = function (host) {\r\n        this.log_('Reset packet received.  New host: ' + host);\r\n        this.repoInfo_.updateHost(host);\r\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\r\n        // We don't currently support resets after the connection has already been established\r\n        if (this.state_ === 1 /* CONNECTED */) {\r\n            this.close();\r\n        }\r\n        else {\r\n            // Close whatever connections we have open and start again.\r\n            this.closeConnections_();\r\n            this.start_();\r\n        }\r\n    };\r\n    Connection.prototype.onConnectionEstablished_ = function (conn, timestamp) {\r\n        var _this = this;\r\n        this.log_('Realtime connection established.');\r\n        this.conn_ = conn;\r\n        this.state_ = 1 /* CONNECTED */;\r\n        if (this.onReady_) {\r\n            this.onReady_(timestamp, this.sessionId);\r\n            this.onReady_ = null;\r\n        }\r\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\r\n        // send some pings.\r\n        if (this.primaryResponsesRequired_ === 0) {\r\n            this.log_('Primary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n        }\r\n        else {\r\n            setTimeoutNonBlocking(function () {\r\n                _this.sendPingOnPrimaryIfNecessary_();\r\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\r\n        }\r\n    };\r\n    Connection.prototype.sendPingOnPrimaryIfNecessary_ = function () {\r\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\r\n        if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('sending ping on primary.');\r\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    };\r\n    Connection.prototype.onSecondaryConnectionLost_ = function () {\r\n        var conn = this.secondaryConn_;\r\n        this.secondaryConn_ = null;\r\n        if (this.tx_ === conn || this.rx_ === conn) {\r\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\r\n            this.close();\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     * @private\r\n     */\r\n    Connection.prototype.onConnectionLost_ = function (everConnected) {\r\n        this.conn_ = null;\r\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\r\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\r\n        if (!everConnected && this.state_ === 0 /* CONNECTING */) {\r\n            this.log_('Realtime connection failed.');\r\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\r\n            if (this.repoInfo_.isCacheableHost()) {\r\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\r\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\r\n                this.repoInfo_.internalHost = this.repoInfo_.host;\r\n            }\r\n        }\r\n        else if (this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('Realtime connection lost.');\r\n        }\r\n        this.close();\r\n    };\r\n    /**\r\n     *\r\n     * @param {string} reason\r\n     * @private\r\n     */\r\n    Connection.prototype.onConnectionShutdown_ = function (reason) {\r\n        this.log_('Connection shutdown command received. Shutting down...');\r\n        if (this.onKill_) {\r\n            this.onKill_(reason);\r\n            this.onKill_ = null;\r\n        }\r\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\r\n        // so clear the callback.\r\n        this.onDisconnect_ = null;\r\n        this.close();\r\n    };\r\n    Connection.prototype.sendData_ = function (data) {\r\n        if (this.state_ !== 1 /* CONNECTED */) {\r\n            throw 'Connection is not connected';\r\n        }\r\n        else {\r\n            this.tx_.send(data);\r\n        }\r\n    };\r\n    /**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */\r\n    Connection.prototype.close = function () {\r\n        if (this.state_ !== 2 /* DISCONNECTED */) {\r\n            this.log_('Closing realtime connection.');\r\n            this.state_ = 2 /* DISCONNECTED */;\r\n            this.closeConnections_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_();\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @private\r\n     */\r\n    Connection.prototype.closeConnections_ = function () {\r\n        this.log_('Shutting down all connections');\r\n        if (this.conn_) {\r\n            this.conn_.close();\r\n            this.conn_ = null;\r\n        }\r\n        if (this.secondaryConn_) {\r\n            this.secondaryConn_.close();\r\n            this.secondaryConn_ = null;\r\n        }\r\n        if (this.healthyTimeout_) {\r\n            clearTimeout(this.healthyTimeout_);\r\n            this.healthyTimeout_ = null;\r\n        }\r\n    };\r\n    return Connection;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\r\nvar ServerActions = /** @class */ (function () {\r\n    function ServerActions() {\r\n    }\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, string)=} onComplete\r\n     * @param {string=} hash\r\n     */\r\n    ServerActions.prototype.put = function (pathString, data, onComplete, hash) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, ?string)} onComplete\r\n     * @param {string=} hash\r\n     */\r\n    ServerActions.prototype.merge = function (pathString, data, onComplete, hash) { };\r\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param {string} token The authentication token\r\n     */\r\n    ServerActions.prototype.refreshAuthToken = function (token) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, string)=} onComplete\r\n     */\r\n    ServerActions.prototype.onDisconnectPut = function (pathString, data, onComplete) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, string)=} onComplete\r\n     */\r\n    ServerActions.prototype.onDisconnectMerge = function (pathString, data, onComplete) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {function(string, string)=} onComplete\r\n     */\r\n    ServerActions.prototype.onDisconnectCancel = function (pathString, onComplete) { };\r\n    /**\r\n     * @param {Object.<string, *>} stats\r\n     */\r\n    ServerActions.prototype.reportStats = function (stats) { };\r\n    return ServerActions;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar RECONNECT_MIN_DELAY = 1000;\r\nvar RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\r\nvar RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\r\nvar RECONNECT_DELAY_MULTIPLIER = 1.3;\r\nvar RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\r\nvar SERVER_KILL_INTERRUPT_REASON = 'server_kill';\r\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\r\nvar INVALID_AUTH_TOKEN_THRESHOLD = 3;\r\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\r\nvar PersistentConnection = /** @class */ (function (_super) {\r\n    tslib.__extends(PersistentConnection, _super);\r\n    /**\r\n     * @implements {ServerActions}\r\n     * @param repoInfo_ Data about the namespace we are connecting to\r\n     * @param applicationId_ The Firebase App ID for this project\r\n     * @param onDataUpdate_ A callback for new data from the server\r\n     */\r\n    function PersistentConnection(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, authOverride_) {\r\n        var _this = _super.call(this) || this;\r\n        _this.repoInfo_ = repoInfo_;\r\n        _this.applicationId_ = applicationId_;\r\n        _this.onDataUpdate_ = onDataUpdate_;\r\n        _this.onConnectStatus_ = onConnectStatus_;\r\n        _this.onServerInfoUpdate_ = onServerInfoUpdate_;\r\n        _this.authTokenProvider_ = authTokenProvider_;\r\n        _this.authOverride_ = authOverride_;\r\n        // Used for diagnostic logging.\r\n        _this.id = PersistentConnection.nextPersistentConnectionId_++;\r\n        _this.log_ = logWrapper('p:' + _this.id + ':');\r\n        _this.interruptReasons_ = {};\r\n        /** Map<path, Map<queryId, ListenSpec>> */\r\n        _this.listens = new Map();\r\n        _this.outstandingPuts_ = [];\r\n        _this.outstandingPutCount_ = 0;\r\n        _this.onDisconnectRequestQueue_ = [];\r\n        _this.connected_ = false;\r\n        _this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n        _this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\r\n        _this.securityDebugCallback_ = null;\r\n        _this.lastSessionId = null;\r\n        _this.establishConnectionTimer_ = null;\r\n        _this.visible_ = false;\r\n        // Before we get connected, we keep a queue of pending messages to send.\r\n        _this.requestCBHash_ = {};\r\n        _this.requestNumber_ = 0;\r\n        _this.realtime_ = null;\r\n        _this.authToken_ = null;\r\n        _this.forceTokenRefresh_ = false;\r\n        _this.invalidAuthTokenCount_ = 0;\r\n        _this.firstConnection_ = true;\r\n        _this.lastConnectionAttemptTime_ = null;\r\n        _this.lastConnectionEstablishedTime_ = null;\r\n        if (authOverride_ && !util.isNodeSdk()) {\r\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\r\n        }\r\n        _this.scheduleConnect_(0);\r\n        VisibilityMonitor.getInstance().on('visible', _this.onVisible_, _this);\r\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\r\n            OnlineMonitor.getInstance().on('online', _this.onOnline_, _this);\r\n        }\r\n        return _this;\r\n    }\r\n    PersistentConnection.prototype.sendRequest = function (action, body, onResponse) {\r\n        var curReqNum = ++this.requestNumber_;\r\n        var msg = { r: curReqNum, a: action, b: body };\r\n        this.log_(util.stringify(msg));\r\n        util.assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\r\n        this.realtime_.sendRequest(msg);\r\n        if (onResponse) {\r\n            this.requestCBHash_[curReqNum] = onResponse;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.listen = function (query, currentHashFn, tag, onComplete) {\r\n        var queryId = query.queryIdentifier();\r\n        var pathString = query.path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\r\n        if (!this.listens.has(pathString)) {\r\n            this.listens.set(pathString, new Map());\r\n        }\r\n        util.assert(query.getQueryParams().isDefault() ||\r\n            !query.getQueryParams().loadsAllData(), 'listen() called for non-default but complete query');\r\n        util.assert(!this.listens.get(pathString).has(queryId), 'listen() called twice for same path/queryId.');\r\n        var listenSpec = {\r\n            onComplete: onComplete,\r\n            hashFn: currentHashFn,\r\n            query: query,\r\n            tag: tag\r\n        };\r\n        this.listens.get(pathString).set(queryId, listenSpec);\r\n        if (this.connected_) {\r\n            this.sendListen_(listenSpec);\r\n        }\r\n    };\r\n    PersistentConnection.prototype.sendListen_ = function (listenSpec) {\r\n        var _this = this;\r\n        var query = listenSpec.query;\r\n        var pathString = query.path.toString();\r\n        var queryId = query.queryIdentifier();\r\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\r\n        var req = { /*path*/ p: pathString };\r\n        var action = 'q';\r\n        // Only bother to send query if it's non-default.\r\n        if (listenSpec.tag) {\r\n            req['q'] = query.queryObject();\r\n            req['t'] = listenSpec.tag;\r\n        }\r\n        req[ /*hash*/'h'] = listenSpec.hashFn();\r\n        this.sendRequest(action, req, function (message) {\r\n            var payload = message[ /*data*/'d'];\r\n            var status = message[ /*status*/'s'];\r\n            // print warnings in any case...\r\n            PersistentConnection.warnOnListenWarnings_(payload, query);\r\n            var currentListenSpec = _this.listens.get(pathString) &&\r\n                _this.listens.get(pathString).get(queryId);\r\n            // only trigger actions if the listen hasn't been removed and readded\r\n            if (currentListenSpec === listenSpec) {\r\n                _this.log_('listen response', message);\r\n                if (status !== 'ok') {\r\n                    _this.removeListen_(pathString, queryId);\r\n                }\r\n                if (listenSpec.onComplete) {\r\n                    listenSpec.onComplete(status, payload);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    PersistentConnection.warnOnListenWarnings_ = function (payload, query) {\r\n        if (payload && typeof payload === 'object' && util.contains(payload, 'w')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            var warnings = util.safeGet(payload, 'w');\r\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\r\n                var indexSpec = '\".indexOn\": \"' + query.getQueryParams().getIndex().toString() + '\"';\r\n                var indexPath = query.path.toString();\r\n                warn(\"Using an unspecified index. Your data will be downloaded and \" +\r\n                    (\"filtered on the client. Consider adding \" + indexSpec + \" at \") +\r\n                    (indexPath + \" to your security rules for better performance.\"));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.refreshAuthToken = function (token) {\r\n        this.authToken_ = token;\r\n        this.log_('Auth token refreshed');\r\n        if (this.authToken_) {\r\n            this.tryAuth();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\r\n            //the credential so we dont become authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unauth', {}, function () { });\r\n            }\r\n        }\r\n        this.reduceReconnectDelayIfAdminCredential_(token);\r\n    };\r\n    PersistentConnection.prototype.reduceReconnectDelayIfAdminCredential_ = function (credential) {\r\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\r\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\r\n        var isFirebaseSecret = credential && credential.length === 40;\r\n        if (isFirebaseSecret || util.isAdmin(credential)) {\r\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\r\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n        }\r\n    };\r\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\r\n    PersistentConnection.prototype.tryAuth = function () {\r\n        var _this = this;\r\n        if (this.connected_ && this.authToken_) {\r\n            var token_1 = this.authToken_;\r\n            var authMethod = util.isValidFormat(token_1) ? 'auth' : 'gauth';\r\n            var requestData = { cred: token_1 };\r\n            if (this.authOverride_ === null) {\r\n                requestData['noauth'] = true;\r\n            }\r\n            else if (typeof this.authOverride_ === 'object') {\r\n                requestData['authvar'] = this.authOverride_;\r\n            }\r\n            this.sendRequest(authMethod, requestData, function (res) {\r\n                var status = res[ /*status*/'s'];\r\n                var data = res[ /*data*/'d'] || 'error';\r\n                if (_this.authToken_ === token_1) {\r\n                    if (status === 'ok') {\r\n                        _this.invalidAuthTokenCount_ = 0;\r\n                    }\r\n                    else {\r\n                        // Triggers reconnect and force refresh for auth token\r\n                        _this.onAuthRevoked_(status, data);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.unlisten = function (query, tag) {\r\n        var pathString = query.path.toString();\r\n        var queryId = query.queryIdentifier();\r\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\r\n        util.assert(query.getQueryParams().isDefault() ||\r\n            !query.getQueryParams().loadsAllData(), 'unlisten() called for non-default but complete query');\r\n        var listen = this.removeListen_(pathString, queryId);\r\n        if (listen && this.connected_) {\r\n            this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);\r\n        }\r\n    };\r\n    PersistentConnection.prototype.sendUnlisten_ = function (pathString, queryId, queryObj, tag) {\r\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\r\n        var req = { /*path*/ p: pathString };\r\n        var action = 'n';\r\n        // Only bother sending queryId if it's non-default.\r\n        if (tag) {\r\n            req['q'] = queryObj;\r\n            req['t'] = tag;\r\n        }\r\n        this.sendRequest(action, req);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.onDisconnectPut = function (pathString, data, onComplete) {\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString: pathString,\r\n                action: 'o',\r\n                data: data,\r\n                onComplete: onComplete\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.onDisconnectMerge = function (pathString, data, onComplete) {\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString: pathString,\r\n                action: 'om',\r\n                data: data,\r\n                onComplete: onComplete\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.onDisconnectCancel = function (pathString, onComplete) {\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString: pathString,\r\n                action: 'oc',\r\n                data: null,\r\n                onComplete: onComplete\r\n            });\r\n        }\r\n    };\r\n    PersistentConnection.prototype.sendOnDisconnect_ = function (action, pathString, data, onComplete) {\r\n        var request = { /*path*/ p: pathString, /*data*/ d: data };\r\n        this.log_('onDisconnect ' + action, request);\r\n        this.sendRequest(action, request, function (response) {\r\n            if (onComplete) {\r\n                setTimeout(function () {\r\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\r\n                }, Math.floor(0));\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\r\n        this.putInternal('p', pathString, data, onComplete, hash);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.merge = function (pathString, data, onComplete, hash) {\r\n        this.putInternal('m', pathString, data, onComplete, hash);\r\n    };\r\n    PersistentConnection.prototype.putInternal = function (action, pathString, data, onComplete, hash) {\r\n        var request = {\r\n            /*path*/ p: pathString,\r\n            /*data*/ d: data\r\n        };\r\n        if (hash !== undefined) {\r\n            request[ /*hash*/'h'] = hash;\r\n        }\r\n        // TODO: Only keep track of the most recent put for a given path?\r\n        this.outstandingPuts_.push({\r\n            action: action,\r\n            request: request,\r\n            onComplete: onComplete\r\n        });\r\n        this.outstandingPutCount_++;\r\n        var index = this.outstandingPuts_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendPut_(index);\r\n        }\r\n        else {\r\n            this.log_('Buffering put: ' + pathString);\r\n        }\r\n    };\r\n    PersistentConnection.prototype.sendPut_ = function (index) {\r\n        var _this = this;\r\n        var action = this.outstandingPuts_[index].action;\r\n        var request = this.outstandingPuts_[index].request;\r\n        var onComplete = this.outstandingPuts_[index].onComplete;\r\n        this.outstandingPuts_[index].queued = this.connected_;\r\n        this.sendRequest(action, request, function (message) {\r\n            _this.log_(action + ' response', message);\r\n            delete _this.outstandingPuts_[index];\r\n            _this.outstandingPutCount_--;\r\n            // Clean up array occasionally.\r\n            if (_this.outstandingPutCount_ === 0) {\r\n                _this.outstandingPuts_ = [];\r\n            }\r\n            if (onComplete) {\r\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.reportStats = function (stats) {\r\n        var _this = this;\r\n        // If we're not connected, we just drop the stats.\r\n        if (this.connected_) {\r\n            var request = { /*counters*/ c: stats };\r\n            this.log_('reportStats', request);\r\n            this.sendRequest(/*stats*/ 's', request, function (result) {\r\n                var status = result[ /*status*/'s'];\r\n                if (status !== 'ok') {\r\n                    var errorReason = result[ /* data */'d'];\r\n                    _this.log_('reportStats', 'Error sending stats: ' + errorReason);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onDataMessage_ = function (message) {\r\n        if ('r' in message) {\r\n            // this is a response\r\n            this.log_('from server: ' + util.stringify(message));\r\n            var reqNum = message['r'];\r\n            var onResponse = this.requestCBHash_[reqNum];\r\n            if (onResponse) {\r\n                delete this.requestCBHash_[reqNum];\r\n                onResponse(message[ /*body*/'b']);\r\n            }\r\n        }\r\n        else if ('error' in message) {\r\n            throw 'A server-side error has occurred: ' + message['error'];\r\n        }\r\n        else if ('a' in message) {\r\n            // a and b are action and body, respectively\r\n            this.onDataPush_(message['a'], message['b']);\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onDataPush_ = function (action, body) {\r\n        this.log_('handleServerMessage', action, body);\r\n        if (action === 'd') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge*/ false, body['t']);\r\n        }\r\n        else if (action === 'm') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge=*/ true, body['t']);\r\n        }\r\n        else if (action === 'c') {\r\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\r\n        }\r\n        else if (action === 'ac') {\r\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'sd') {\r\n            this.onSecurityDebugPacket_(body);\r\n        }\r\n        else {\r\n            error('Unrecognized action received from server: ' +\r\n                util.stringify(action) +\r\n                '\\nAre you using the latest client?');\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onReady_ = function (timestamp, sessionId) {\r\n        this.log_('connection ready');\r\n        this.connected_ = true;\r\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\r\n        this.handleTimestamp_(timestamp);\r\n        this.lastSessionId = sessionId;\r\n        if (this.firstConnection_) {\r\n            this.sendConnectStats_();\r\n        }\r\n        this.restoreState_();\r\n        this.firstConnection_ = false;\r\n        this.onConnectStatus_(true);\r\n    };\r\n    PersistentConnection.prototype.scheduleConnect_ = function (timeout) {\r\n        var _this = this;\r\n        util.assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\r\n        if (this.establishConnectionTimer_) {\r\n            clearTimeout(this.establishConnectionTimer_);\r\n        }\r\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\r\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\r\n        this.establishConnectionTimer_ = setTimeout(function () {\r\n            _this.establishConnectionTimer_ = null;\r\n            _this.establishConnection_();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(timeout));\r\n    };\r\n    PersistentConnection.prototype.onVisible_ = function (visible) {\r\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\r\n        if (visible &&\r\n            !this.visible_ &&\r\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\r\n            this.log_('Window became visible.  Reducing delay.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        this.visible_ = visible;\r\n    };\r\n    PersistentConnection.prototype.onOnline_ = function (online) {\r\n        if (online) {\r\n            this.log_('Browser went online.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        else {\r\n            this.log_('Browser went offline.  Killing connection.');\r\n            if (this.realtime_) {\r\n                this.realtime_.close();\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onRealtimeDisconnect_ = function () {\r\n        this.log_('data client disconnected');\r\n        this.connected_ = false;\r\n        this.realtime_ = null;\r\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\r\n        this.cancelSentTransactions_();\r\n        // Clear out the pending requests.\r\n        this.requestCBHash_ = {};\r\n        if (this.shouldReconnect_()) {\r\n            if (!this.visible_) {\r\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\r\n                this.reconnectDelay_ = this.maxReconnectDelay_;\r\n                this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            }\r\n            else if (this.lastConnectionEstablishedTime_) {\r\n                // If we've been connected long enough, reset reconnect delay to minimum.\r\n                var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\r\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\r\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n                }\r\n                this.lastConnectionEstablishedTime_ = null;\r\n            }\r\n            var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\r\n            var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\r\n            reconnectDelay = Math.random() * reconnectDelay;\r\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\r\n            this.scheduleConnect_(reconnectDelay);\r\n            // Adjust reconnect delay for next time.\r\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\r\n        }\r\n        this.onConnectStatus_(false);\r\n    };\r\n    PersistentConnection.prototype.establishConnection_ = function () {\r\n        var _this = this;\r\n        if (this.shouldReconnect_()) {\r\n            this.log_('Making a connection attempt');\r\n            this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            this.lastConnectionEstablishedTime_ = null;\r\n            var onDataMessage_1 = this.onDataMessage_.bind(this);\r\n            var onReady_1 = this.onReady_.bind(this);\r\n            var onDisconnect_1 = this.onRealtimeDisconnect_.bind(this);\r\n            var connId_1 = this.id + ':' + PersistentConnection.nextConnectionId_++;\r\n            var self_1 = this;\r\n            var lastSessionId_1 = this.lastSessionId;\r\n            var canceled_1 = false;\r\n            var connection_1 = null;\r\n            var closeFn_1 = function () {\r\n                if (connection_1) {\r\n                    connection_1.close();\r\n                }\r\n                else {\r\n                    canceled_1 = true;\r\n                    onDisconnect_1();\r\n                }\r\n            };\r\n            var sendRequestFn = function (msg) {\r\n                util.assert(connection_1, \"sendRequest call when we're not connected not allowed.\");\r\n                connection_1.sendRequest(msg);\r\n            };\r\n            this.realtime_ = {\r\n                close: closeFn_1,\r\n                sendRequest: sendRequestFn\r\n            };\r\n            var forceRefresh = this.forceTokenRefresh_;\r\n            this.forceTokenRefresh_ = false;\r\n            // First fetch auth token, and establish connection after fetching the token was successful\r\n            this.authTokenProvider_\r\n                .getToken(forceRefresh)\r\n                .then(function (result) {\r\n                if (!canceled_1) {\r\n                    log('getToken() completed. Creating connection.');\r\n                    self_1.authToken_ = result && result.accessToken;\r\n                    connection_1 = new Connection(connId_1, self_1.repoInfo_, self_1.applicationId_, onDataMessage_1, onReady_1, onDisconnect_1, \r\n                    /* onKill= */ function (reason) {\r\n                        warn(reason + ' (' + self_1.repoInfo_.toString() + ')');\r\n                        self_1.interrupt(SERVER_KILL_INTERRUPT_REASON);\r\n                    }, lastSessionId_1);\r\n                }\r\n                else {\r\n                    log('getToken() completed but was canceled');\r\n                }\r\n            })\r\n                .then(null, function (error) {\r\n                self_1.log_('Failed to get token: ' + error);\r\n                if (!canceled_1) {\r\n                    if (_this.repoInfo_.nodeAdmin) {\r\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\r\n                        // But getToken() may also just have temporarily failed, so we still want to\r\n                        // continue retrying.\r\n                        warn(error);\r\n                    }\r\n                    closeFn_1();\r\n                }\r\n            });\r\n        }\r\n    };\r\n    PersistentConnection.prototype.interrupt = function (reason) {\r\n        log('Interrupting connection for reason: ' + reason);\r\n        this.interruptReasons_[reason] = true;\r\n        if (this.realtime_) {\r\n            this.realtime_.close();\r\n        }\r\n        else {\r\n            if (this.establishConnectionTimer_) {\r\n                clearTimeout(this.establishConnectionTimer_);\r\n                this.establishConnectionTimer_ = null;\r\n            }\r\n            if (this.connected_) {\r\n                this.onRealtimeDisconnect_();\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.resume = function (reason) {\r\n        log('Resuming connection for reason: ' + reason);\r\n        delete this.interruptReasons_[reason];\r\n        if (util.isEmpty(this.interruptReasons_)) {\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.handleTimestamp_ = function (timestamp) {\r\n        var delta = timestamp - new Date().getTime();\r\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\r\n    };\r\n    PersistentConnection.prototype.cancelSentTransactions_ = function () {\r\n        for (var i = 0; i < this.outstandingPuts_.length; i++) {\r\n            var put = this.outstandingPuts_[i];\r\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\r\n                if (put.onComplete) {\r\n                    put.onComplete('disconnect');\r\n                }\r\n                delete this.outstandingPuts_[i];\r\n                this.outstandingPutCount_--;\r\n            }\r\n        }\r\n        // Clean up array occasionally.\r\n        if (this.outstandingPutCount_ === 0) {\r\n            this.outstandingPuts_ = [];\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onListenRevoked_ = function (pathString, query) {\r\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\r\n        var queryId;\r\n        if (!query) {\r\n            queryId = 'default';\r\n        }\r\n        else {\r\n            queryId = query.map(function (q) { return ObjectToUniqueKey(q); }).join('$');\r\n        }\r\n        var listen = this.removeListen_(pathString, queryId);\r\n        if (listen && listen.onComplete) {\r\n            listen.onComplete('permission_denied');\r\n        }\r\n    };\r\n    PersistentConnection.prototype.removeListen_ = function (pathString, queryId) {\r\n        var normalizedPathString = new Path(pathString).toString(); // normalize path.\r\n        var listen;\r\n        if (this.listens.has(normalizedPathString)) {\r\n            var map = this.listens.get(normalizedPathString);\r\n            listen = map.get(queryId);\r\n            map.delete(queryId);\r\n            if (map.size === 0) {\r\n                this.listens.delete(normalizedPathString);\r\n            }\r\n        }\r\n        else {\r\n            // all listens for this path has already been removed\r\n            listen = undefined;\r\n        }\r\n        return listen;\r\n    };\r\n    PersistentConnection.prototype.onAuthRevoked_ = function (statusCode, explanation) {\r\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\r\n        this.authToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        this.realtime_.close();\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAuthTokenCount_++;\r\n            if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {\r\n                // Set a long reconnect delay because recovery is unlikely\r\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n                // Notify the auth token provider that the token is invalid, which will log\r\n                // a warning\r\n                this.authTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onSecurityDebugPacket_ = function (body) {\r\n        if (this.securityDebugCallback_) {\r\n            this.securityDebugCallback_(body);\r\n        }\r\n        else {\r\n            if ('msg' in body) {\r\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.restoreState_ = function () {\r\n        var e_1, _a, e_2, _b;\r\n        //Re-authenticate ourselves if we have a credential stored.\r\n        this.tryAuth();\r\n        try {\r\n            // Puts depend on having received the corresponding data update from the server before they complete, so we must\r\n            // make sure to send listens before puts.\r\n            for (var _c = tslib.__values(this.listens.values()), _d = _c.next(); !_d.done; _d = _c.next()) {\r\n                var queries = _d.value;\r\n                try {\r\n                    for (var _e = (e_2 = void 0, tslib.__values(queries.values())), _f = _e.next(); !_f.done; _f = _e.next()) {\r\n                        var listenSpec = _f.value;\r\n                        this.sendListen_(listenSpec);\r\n                    }\r\n                }\r\n                catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n                finally {\r\n                    try {\r\n                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\r\n                    }\r\n                    finally { if (e_2) throw e_2.error; }\r\n                }\r\n            }\r\n        }\r\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n        finally {\r\n            try {\r\n                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\r\n            }\r\n            finally { if (e_1) throw e_1.error; }\r\n        }\r\n        for (var i = 0; i < this.outstandingPuts_.length; i++) {\r\n            if (this.outstandingPuts_[i]) {\r\n                this.sendPut_(i);\r\n            }\r\n        }\r\n        while (this.onDisconnectRequestQueue_.length) {\r\n            var request = this.onDisconnectRequestQueue_.shift();\r\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\r\n        }\r\n    };\r\n    /**\r\n     * Sends client stats for first connection\r\n     */\r\n    PersistentConnection.prototype.sendConnectStats_ = function () {\r\n        var stats = {};\r\n        var clientName = 'js';\r\n        if (util.isNodeSdk()) {\r\n            if (this.repoInfo_.nodeAdmin) {\r\n                clientName = 'admin_node';\r\n            }\r\n            else {\r\n                clientName = 'node';\r\n            }\r\n        }\r\n        stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\r\n        if (util.isMobileCordova()) {\r\n            stats['framework.cordova'] = 1;\r\n        }\r\n        else if (util.isReactNative()) {\r\n            stats['framework.reactnative'] = 1;\r\n        }\r\n        this.reportStats(stats);\r\n    };\r\n    PersistentConnection.prototype.shouldReconnect_ = function () {\r\n        var online = OnlineMonitor.getInstance().currentlyOnline();\r\n        return util.isEmpty(this.interruptReasons_) && online;\r\n    };\r\n    PersistentConnection.nextPersistentConnectionId_ = 0;\r\n    /**\r\n     * Counter for number of connections created. Mainly used for tagging in the logs\r\n     */\r\n    PersistentConnection.nextConnectionId_ = 0;\r\n    return PersistentConnection;\r\n}(ServerActions));\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\r\nvar ReadonlyRestClient = /** @class */ (function (_super) {\r\n    tslib.__extends(ReadonlyRestClient, _super);\r\n    /**\r\n     * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\r\n     * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\r\n     * @param {AuthTokenProvider} authTokenProvider_\r\n     * @implements {ServerActions}\r\n     */\r\n    function ReadonlyRestClient(repoInfo_, onDataUpdate_, authTokenProvider_) {\r\n        var _this = _super.call(this) || this;\r\n        _this.repoInfo_ = repoInfo_;\r\n        _this.onDataUpdate_ = onDataUpdate_;\r\n        _this.authTokenProvider_ = authTokenProvider_;\r\n        /** @private {function(...[*])} */\r\n        _this.log_ = logWrapper('p:rest:');\r\n        /**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         *\r\n         * @private {!Object.<string, !Object>}\r\n         */\r\n        _this.listens_ = {};\r\n        return _this;\r\n    }\r\n    ReadonlyRestClient.prototype.reportStats = function (stats) {\r\n        throw new Error('Method not implemented.');\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @param {?number=} tag\r\n     * @return {string}\r\n     * @private\r\n     */\r\n    ReadonlyRestClient.getListenId_ = function (query, tag) {\r\n        if (tag !== undefined) {\r\n            return 'tag$' + tag;\r\n        }\r\n        else {\r\n            util.assert(query.getQueryParams().isDefault(), \"should have a tag if it's not a default query.\");\r\n            return query.path.toString();\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ReadonlyRestClient.prototype.listen = function (query, currentHashFn, tag, onComplete) {\r\n        var _this = this;\r\n        var pathString = query.path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + query.queryIdentifier());\r\n        // Mark this listener so we can tell if it's removed.\r\n        var listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        var thisListen = {};\r\n        this.listens_[listenId] = thisListen;\r\n        var queryStringParameters = query\r\n            .getQueryParams()\r\n            .toRestQueryStringParameters();\r\n        this.restRequest_(pathString + '.json', queryStringParameters, function (error, result) {\r\n            var data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                _this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\r\n            }\r\n            if (util.safeGet(_this.listens_, listenId) === thisListen) {\r\n                var status_1;\r\n                if (!error) {\r\n                    status_1 = 'ok';\r\n                }\r\n                else if (error === 401) {\r\n                    status_1 = 'permission_denied';\r\n                }\r\n                else {\r\n                    status_1 = 'rest_error:' + error;\r\n                }\r\n                onComplete(status_1, null);\r\n            }\r\n        });\r\n    };\r\n    /** @inheritDoc */\r\n    ReadonlyRestClient.prototype.unlisten = function (query, tag) {\r\n        var listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        delete this.listens_[listenId];\r\n    };\r\n    /** @inheritDoc */\r\n    ReadonlyRestClient.prototype.refreshAuthToken = function (token) {\r\n        // no-op since we just always call getToken.\r\n    };\r\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     *\r\n     * @param {!string} pathString\r\n     * @param {!Object.<string, *>} queryStringParameters\r\n     * @param {?function(?number, *=)} callback\r\n     * @private\r\n     */\r\n    ReadonlyRestClient.prototype.restRequest_ = function (pathString, queryStringParameters, callback) {\r\n        var _this = this;\r\n        if (queryStringParameters === void 0) { queryStringParameters = {}; }\r\n        queryStringParameters['format'] = 'export';\r\n        this.authTokenProvider_\r\n            .getToken(/*forceRefresh=*/ false)\r\n            .then(function (authTokenData) {\r\n            var authToken = authTokenData && authTokenData.accessToken;\r\n            if (authToken) {\r\n                queryStringParameters['auth'] = authToken;\r\n            }\r\n            var url = (_this.repoInfo_.secure ? 'https://' : 'http://') +\r\n                _this.repoInfo_.host +\r\n                pathString +\r\n                '?' +\r\n                'ns=' +\r\n                _this.repoInfo_.namespace +\r\n                util.querystring(queryStringParameters);\r\n            _this.log_('Sending REST request for ' + url);\r\n            var xhr = new XMLHttpRequest();\r\n            xhr.onreadystatechange = function () {\r\n                if (callback && xhr.readyState === 4) {\r\n                    _this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\r\n                    var res = null;\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        try {\r\n                            res = util.jsonEval(xhr.responseText);\r\n                        }\r\n                        catch (e) {\r\n                            warn('Failed to parse JSON response for ' +\r\n                                url +\r\n                                ': ' +\r\n                                xhr.responseText);\r\n                        }\r\n                        callback(null, res);\r\n                    }\r\n                    else {\r\n                        // 401 and 404 are expected.\r\n                        if (xhr.status !== 401 && xhr.status !== 404) {\r\n                            warn('Got unsuccessful REST response for ' +\r\n                                url +\r\n                                ' Status: ' +\r\n                                xhr.status);\r\n                        }\r\n                        callback(xhr.status);\r\n                    }\r\n                    callback = null;\r\n                }\r\n            };\r\n            xhr.open('GET', url, /*asynchronous=*/ true);\r\n            xhr.send();\r\n        });\r\n    };\r\n    return ReadonlyRestClient;\r\n}(ServerActions));\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar INTERRUPT_REASON = 'repo_interrupt';\r\n/**\r\n * A connection to a single data repository.\r\n */\r\nvar Repo = /** @class */ (function () {\r\n    function Repo(repoInfo_, forceRestClient, app, authTokenProvider) {\r\n        var _this = this;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.app = app;\r\n        this.dataUpdateCount = 0;\r\n        this.statsListener_ = null;\r\n        this.eventQueue_ = new EventQueue();\r\n        this.nextWriteId_ = 1;\r\n        this.interceptServerDataCallback_ = null;\r\n        /** A list of data pieces and paths to be set when this client disconnects. */\r\n        this.onDisconnect_ = new SparseSnapshotTree();\r\n        // TODO: This should be @private but it's used by test_access.js and internal.js\r\n        this.persistentConnection_ = null;\r\n        this.stats_ = StatsManager.getCollection(repoInfo_);\r\n        if (forceRestClient || beingCrawled()) {\r\n            this.server_ = new ReadonlyRestClient(this.repoInfo_, this.onDataUpdate_.bind(this), authTokenProvider);\r\n            // Minor hack: Fire onConnect immediately, since there's no actual connection.\r\n            setTimeout(this.onConnectStatus_.bind(this, true), 0);\r\n        }\r\n        else {\r\n            var authOverride = app.options['databaseAuthVariableOverride'];\r\n            // Validate authOverride\r\n            if (typeof authOverride !== 'undefined' && authOverride !== null) {\r\n                if (typeof authOverride !== 'object') {\r\n                    throw new Error('Only objects are supported for option databaseAuthVariableOverride');\r\n                }\r\n                try {\r\n                    util.stringify(authOverride);\r\n                }\r\n                catch (e) {\r\n                    throw new Error('Invalid authOverride provided: ' + e);\r\n                }\r\n            }\r\n            this.persistentConnection_ = new PersistentConnection(this.repoInfo_, app.options.appId, this.onDataUpdate_.bind(this), this.onConnectStatus_.bind(this), this.onServerInfoUpdate_.bind(this), authTokenProvider, authOverride);\r\n            this.server_ = this.persistentConnection_;\r\n        }\r\n        authTokenProvider.addTokenChangeListener(function (token) {\r\n            _this.server_.refreshAuthToken(token);\r\n        });\r\n        // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\r\n        // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\r\n        this.statsReporter_ = StatsManager.getOrCreateReporter(repoInfo_, function () { return new StatsReporter(_this.stats_, _this.server_); });\r\n        this.transactionsInit_();\r\n        // Used for .info.\r\n        this.infoData_ = new SnapshotHolder();\r\n        this.infoSyncTree_ = new SyncTree({\r\n            startListening: function (query, tag, currentHashFn, onComplete) {\r\n                var infoEvents = [];\r\n                var node = _this.infoData_.getNode(query.path);\r\n                // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\r\n                // on initial data...\r\n                if (!node.isEmpty()) {\r\n                    infoEvents = _this.infoSyncTree_.applyServerOverwrite(query.path, node);\r\n                    setTimeout(function () {\r\n                        onComplete('ok');\r\n                    }, 0);\r\n                }\r\n                return infoEvents;\r\n            },\r\n            stopListening: function () { }\r\n        });\r\n        this.updateInfo_('connected', false);\r\n        this.serverSyncTree_ = new SyncTree({\r\n            startListening: function (query, tag, currentHashFn, onComplete) {\r\n                _this.server_.listen(query, currentHashFn, tag, function (status, data) {\r\n                    var events = onComplete(status, data);\r\n                    _this.eventQueue_.raiseEventsForChangedPath(query.path, events);\r\n                });\r\n                // No synchronous events for network-backed sync trees\r\n                return [];\r\n            },\r\n            stopListening: function (query, tag) {\r\n                _this.server_.unlisten(query, tag);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @return The URL corresponding to the root of this Firebase.\r\n     */\r\n    Repo.prototype.toString = function () {\r\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\r\n    };\r\n    /**\r\n     * @return The namespace represented by the repo.\r\n     */\r\n    Repo.prototype.name = function () {\r\n        return this.repoInfo_.namespace;\r\n    };\r\n    /**\r\n     * @return The time in milliseconds, taking the server offset into account if we have one.\r\n     */\r\n    Repo.prototype.serverTime = function () {\r\n        var offsetNode = this.infoData_.getNode(new Path('.info/serverTimeOffset'));\r\n        var offset = offsetNode.val() || 0;\r\n        return new Date().getTime() + offset;\r\n    };\r\n    /**\r\n     * Generate ServerValues using some variables from the repo object.\r\n     */\r\n    Repo.prototype.generateServerValues = function () {\r\n        return generateWithValues({\r\n            timestamp: this.serverTime()\r\n        });\r\n    };\r\n    /**\r\n     * Called by realtime when we get new messages from the server.\r\n     */\r\n    Repo.prototype.onDataUpdate_ = function (pathString, data, isMerge, tag) {\r\n        // For testing.\r\n        this.dataUpdateCount++;\r\n        var path = new Path(pathString);\r\n        data = this.interceptServerDataCallback_\r\n            ? this.interceptServerDataCallback_(pathString, data)\r\n            : data;\r\n        var events = [];\r\n        if (tag) {\r\n            if (isMerge) {\r\n                var taggedChildren = util.map(data, function (raw) { return nodeFromJSON$1(raw); });\r\n                events = this.serverSyncTree_.applyTaggedQueryMerge(path, taggedChildren, tag);\r\n            }\r\n            else {\r\n                var taggedSnap = nodeFromJSON$1(data);\r\n                events = this.serverSyncTree_.applyTaggedQueryOverwrite(path, taggedSnap, tag);\r\n            }\r\n        }\r\n        else if (isMerge) {\r\n            var changedChildren = util.map(data, function (raw) { return nodeFromJSON$1(raw); });\r\n            events = this.serverSyncTree_.applyServerMerge(path, changedChildren);\r\n        }\r\n        else {\r\n            var snap = nodeFromJSON$1(data);\r\n            events = this.serverSyncTree_.applyServerOverwrite(path, snap);\r\n        }\r\n        var affectedPath = path;\r\n        if (events.length > 0) {\r\n            // Since we have a listener outstanding for each transaction, receiving any events\r\n            // is a proxy for some change having occurred.\r\n            affectedPath = this.rerunTransactions_(path);\r\n        }\r\n        this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);\r\n    };\r\n    // TODO: This should be @private but it's used by test_access.js and internal.js\r\n    Repo.prototype.interceptServerData_ = function (callback) {\r\n        this.interceptServerDataCallback_ = callback;\r\n    };\r\n    Repo.prototype.onConnectStatus_ = function (connectStatus) {\r\n        this.updateInfo_('connected', connectStatus);\r\n        if (connectStatus === false) {\r\n            this.runOnDisconnectEvents_();\r\n        }\r\n    };\r\n    Repo.prototype.onServerInfoUpdate_ = function (updates) {\r\n        var _this = this;\r\n        each(updates, function (key, value) {\r\n            _this.updateInfo_(key, value);\r\n        });\r\n    };\r\n    Repo.prototype.updateInfo_ = function (pathString, value) {\r\n        var path = new Path('/.info/' + pathString);\r\n        var newNode = nodeFromJSON$1(value);\r\n        this.infoData_.updateSnapshot(path, newNode);\r\n        var events = this.infoSyncTree_.applyServerOverwrite(path, newNode);\r\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n    };\r\n    Repo.prototype.getNextWriteId_ = function () {\r\n        return this.nextWriteId_++;\r\n    };\r\n    Repo.prototype.setWithPriority = function (path, newVal, newPriority, onComplete) {\r\n        var _this = this;\r\n        this.log_('set', {\r\n            path: path.toString(),\r\n            value: newVal,\r\n            priority: newPriority\r\n        });\r\n        // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\r\n        // (b) store unresolved paths on JSON parse\r\n        var serverValues = this.generateServerValues();\r\n        var newNodeUnresolved = nodeFromJSON$1(newVal, newPriority);\r\n        var existing = this.serverSyncTree_.calcCompleteEventCache(path);\r\n        var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\r\n        var writeId = this.getNextWriteId_();\r\n        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, writeId, true);\r\n        this.eventQueue_.queueEvents(events);\r\n        this.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), function (status, errorReason) {\r\n            var success = status === 'ok';\r\n            if (!success) {\r\n                warn('set at ' + path + ' failed: ' + status);\r\n            }\r\n            var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId, !success);\r\n            _this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n        var affectedPath = this.abortTransactions_(path);\r\n        this.rerunTransactions_(affectedPath);\r\n        // We queued the events above, so just flush the queue here\r\n        this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);\r\n    };\r\n    Repo.prototype.update = function (path, childrenToMerge, onComplete) {\r\n        var _this = this;\r\n        this.log_('update', { path: path.toString(), value: childrenToMerge });\r\n        // Start with our existing data and merge each child into it.\r\n        var empty = true;\r\n        var serverValues = this.generateServerValues();\r\n        var changedChildren = {};\r\n        each(childrenToMerge, function (changedKey, changedValue) {\r\n            empty = false;\r\n            changedChildren[changedKey] = resolveDeferredValueTree(path.child(changedKey), nodeFromJSON$1(changedValue), _this.serverSyncTree_, serverValues);\r\n        });\r\n        if (!empty) {\r\n            var writeId_1 = this.getNextWriteId_();\r\n            var events = this.serverSyncTree_.applyUserMerge(path, changedChildren, writeId_1);\r\n            this.eventQueue_.queueEvents(events);\r\n            this.server_.merge(path.toString(), childrenToMerge, function (status, errorReason) {\r\n                var success = status === 'ok';\r\n                if (!success) {\r\n                    warn('update at ' + path + ' failed: ' + status);\r\n                }\r\n                var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId_1, !success);\r\n                var affectedPath = clearEvents.length > 0 ? _this.rerunTransactions_(path) : path;\r\n                _this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);\r\n                _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n            });\r\n            each(childrenToMerge, function (changedPath) {\r\n                var affectedPath = _this.abortTransactions_(path.child(changedPath));\r\n                _this.rerunTransactions_(affectedPath);\r\n            });\r\n            // We queued the events above, so just flush the queue here\r\n            this.eventQueue_.raiseEventsForChangedPath(path, []);\r\n        }\r\n        else {\r\n            log(\"update() called with empty data.  Don't do anything.\");\r\n            this.callOnCompleteCallback(onComplete, 'ok');\r\n        }\r\n    };\r\n    /**\r\n     * Applies all of the changes stored up in the onDisconnect_ tree.\r\n     */\r\n    Repo.prototype.runOnDisconnectEvents_ = function () {\r\n        var _this = this;\r\n        this.log_('onDisconnectEvents');\r\n        var serverValues = this.generateServerValues();\r\n        var resolvedOnDisconnectTree = new SparseSnapshotTree();\r\n        this.onDisconnect_.forEachTree(Path.Empty, function (path, node) {\r\n            var resolved = resolveDeferredValueTree(path, node, _this.serverSyncTree_, serverValues);\r\n            resolvedOnDisconnectTree.remember(path, resolved);\r\n        });\r\n        var events = [];\r\n        resolvedOnDisconnectTree.forEachTree(Path.Empty, function (path, snap) {\r\n            events = events.concat(_this.serverSyncTree_.applyServerOverwrite(path, snap));\r\n            var affectedPath = _this.abortTransactions_(path);\r\n            _this.rerunTransactions_(affectedPath);\r\n        });\r\n        this.onDisconnect_ = new SparseSnapshotTree();\r\n        this.eventQueue_.raiseEventsForChangedPath(Path.Empty, events);\r\n    };\r\n    Repo.prototype.onDisconnectCancel = function (path, onComplete) {\r\n        var _this = this;\r\n        this.server_.onDisconnectCancel(path.toString(), function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                _this.onDisconnect_.forget(path);\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    Repo.prototype.onDisconnectSet = function (path, value, onComplete) {\r\n        var _this = this;\r\n        var newNode = nodeFromJSON$1(value);\r\n        this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                _this.onDisconnect_.remember(path, newNode);\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    Repo.prototype.onDisconnectSetWithPriority = function (path, value, priority, onComplete) {\r\n        var _this = this;\r\n        var newNode = nodeFromJSON$1(value, priority);\r\n        this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                _this.onDisconnect_.remember(path, newNode);\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    Repo.prototype.onDisconnectUpdate = function (path, childrenToMerge, onComplete) {\r\n        var _this = this;\r\n        if (util.isEmpty(childrenToMerge)) {\r\n            log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\r\n            this.callOnCompleteCallback(onComplete, 'ok');\r\n            return;\r\n        }\r\n        this.server_.onDisconnectMerge(path.toString(), childrenToMerge, function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                each(childrenToMerge, function (childName, childNode) {\r\n                    var newChildNode = nodeFromJSON$1(childNode);\r\n                    _this.onDisconnect_.remember(path.child(childName), newChildNode);\r\n                });\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    Repo.prototype.addEventCallbackForQuery = function (query, eventRegistration) {\r\n        var events;\r\n        if (query.path.getFront() === '.info') {\r\n            events = this.infoSyncTree_.addEventRegistration(query, eventRegistration);\r\n        }\r\n        else {\r\n            events = this.serverSyncTree_.addEventRegistration(query, eventRegistration);\r\n        }\r\n        this.eventQueue_.raiseEventsAtPath(query.path, events);\r\n    };\r\n    Repo.prototype.removeEventCallbackForQuery = function (query, eventRegistration) {\r\n        // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\r\n        // a little bit by handling the return values anyways.\r\n        var events;\r\n        if (query.path.getFront() === '.info') {\r\n            events = this.infoSyncTree_.removeEventRegistration(query, eventRegistration);\r\n        }\r\n        else {\r\n            events = this.serverSyncTree_.removeEventRegistration(query, eventRegistration);\r\n        }\r\n        this.eventQueue_.raiseEventsAtPath(query.path, events);\r\n    };\r\n    Repo.prototype.interrupt = function () {\r\n        if (this.persistentConnection_) {\r\n            this.persistentConnection_.interrupt(INTERRUPT_REASON);\r\n        }\r\n    };\r\n    Repo.prototype.resume = function () {\r\n        if (this.persistentConnection_) {\r\n            this.persistentConnection_.resume(INTERRUPT_REASON);\r\n        }\r\n    };\r\n    Repo.prototype.stats = function (showDelta) {\r\n        if (showDelta === void 0) { showDelta = false; }\r\n        if (typeof console === 'undefined') {\r\n            return;\r\n        }\r\n        var stats;\r\n        if (showDelta) {\r\n            if (!this.statsListener_) {\r\n                this.statsListener_ = new StatsListener(this.stats_);\r\n            }\r\n            stats = this.statsListener_.get();\r\n        }\r\n        else {\r\n            stats = this.stats_.get();\r\n        }\r\n        var longestName = Object.keys(stats).reduce(function (previousValue, currentValue) {\r\n            return Math.max(currentValue.length, previousValue);\r\n        }, 0);\r\n        each(stats, function (stat, value) {\r\n            var paddedStat = stat;\r\n            // pad stat names to be the same length (plus 2 extra spaces).\r\n            for (var i = stat.length; i < longestName + 2; i++) {\r\n                paddedStat += ' ';\r\n            }\r\n            console.log(paddedStat + value);\r\n        });\r\n    };\r\n    Repo.prototype.statsIncrementCounter = function (metric) {\r\n        this.stats_.incrementCounter(metric);\r\n        this.statsReporter_.includeStat(metric);\r\n    };\r\n    Repo.prototype.log_ = function () {\r\n        var varArgs = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            varArgs[_i] = arguments[_i];\r\n        }\r\n        var prefix = '';\r\n        if (this.persistentConnection_) {\r\n            prefix = this.persistentConnection_.id + ':';\r\n        }\r\n        log.apply(void 0, tslib.__spread([prefix], varArgs));\r\n    };\r\n    Repo.prototype.callOnCompleteCallback = function (callback, status, errorReason) {\r\n        if (callback) {\r\n            exceptionGuard(function () {\r\n                if (status === 'ok') {\r\n                    callback(null);\r\n                }\r\n                else {\r\n                    var code = (status || 'error').toUpperCase();\r\n                    var message = code;\r\n                    if (errorReason) {\r\n                        message += ': ' + errorReason;\r\n                    }\r\n                    var error = new Error(message);\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    error.code = code;\r\n                    callback(error);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    Object.defineProperty(Repo.prototype, \"database\", {\r\n        get: function () {\r\n            return this.__database || (this.__database = new Database(this));\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return Repo;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n */\r\nvar RangedFilter = /** @class */ (function () {\r\n    /**\r\n     * @param {!QueryParams} params\r\n     */\r\n    function RangedFilter(params) {\r\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\r\n        this.index_ = params.getIndex();\r\n        this.startPost_ = RangedFilter.getStartPost_(params);\r\n        this.endPost_ = RangedFilter.getEndPost_(params);\r\n    }\r\n    /**\r\n     * @return {!NamedNode}\r\n     */\r\n    RangedFilter.prototype.getStartPost = function () {\r\n        return this.startPost_;\r\n    };\r\n    /**\r\n     * @return {!NamedNode}\r\n     */\r\n    RangedFilter.prototype.getEndPost = function () {\r\n        return this.endPost_;\r\n    };\r\n    /**\r\n     * @param {!NamedNode} node\r\n     * @return {boolean}\r\n     */\r\n    RangedFilter.prototype.matches = function (node) {\r\n        return (this.index_.compare(this.getStartPost(), node) <= 0 &&\r\n            this.index_.compare(node, this.getEndPost()) <= 0);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\r\n        if (newSnap.isLeafNode()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            newSnap = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        var filtered = newSnap.withIndex(this.index_);\r\n        // Don't support priorities on queries\r\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n        var self = this;\r\n        newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n            if (!self.matches(new NamedNode(key, childNode))) {\r\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\r\n            }\r\n        });\r\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.filtersNodes = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.getIndexedFilter = function () {\r\n        return this.indexedFilter_;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    /**\r\n     * @param {!QueryParams} params\r\n     * @return {!NamedNode}\r\n     * @private\r\n     */\r\n    RangedFilter.getStartPost_ = function (params) {\r\n        if (params.hasStart()) {\r\n            var startName = params.getIndexStartName();\r\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\r\n        }\r\n        else {\r\n            return params.getIndex().minPost();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!QueryParams} params\r\n     * @return {!NamedNode}\r\n     * @private\r\n     */\r\n    RangedFilter.getEndPost_ = function (params) {\r\n        if (params.hasEnd()) {\r\n            var endName = params.getIndexEndName();\r\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\r\n        }\r\n        else {\r\n            return params.getIndex().maxPost();\r\n        }\r\n    };\r\n    return RangedFilter;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n */\r\nvar LimitedFilter = /** @class */ (function () {\r\n    /**\r\n     * @param {!QueryParams} params\r\n     */\r\n    function LimitedFilter(params) {\r\n        this.rangedFilter_ = new RangedFilter(params);\r\n        this.index_ = params.getIndex();\r\n        this.limit_ = params.getLimit();\r\n        this.reverse_ = !params.isViewFromLeft();\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        if (snap.getImmediateChild(key).equals(newChild)) {\r\n            // No change\r\n            return snap;\r\n        }\r\n        else if (snap.numChildren() < this.limit_) {\r\n            return this.rangedFilter_\r\n                .getIndexedFilter()\r\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n        }\r\n        else {\r\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\r\n        var filtered;\r\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n        }\r\n        else {\r\n            if (this.limit_ * 2 < newSnap.numChildren() &&\r\n                newSnap.isIndexed(this.index_)) {\r\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\r\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n                // anchor to the startPost, endPost, or last element as appropriate\r\n                var iterator = void 0;\r\n                if (this.reverse_) {\r\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\r\n                }\r\n                else {\r\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\r\n                }\r\n                var count = 0;\r\n                while (iterator.hasNext() && count < this.limit_) {\r\n                    var next = iterator.getNext();\r\n                    var inRange = void 0;\r\n                    if (this.reverse_) {\r\n                        inRange =\r\n                            this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\r\n                    }\r\n                    else {\r\n                        inRange =\r\n                            this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\r\n                    }\r\n                    if (inRange) {\r\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        // if we have reached the end post, we cannot keep adding elemments\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\r\n                filtered = newSnap.withIndex(this.index_);\r\n                // Don't support priorities on queries\r\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n                var startPost = void 0;\r\n                var endPost = void 0;\r\n                var cmp = void 0;\r\n                var iterator = void 0;\r\n                if (this.reverse_) {\r\n                    iterator = filtered.getReverseIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getEndPost();\r\n                    endPost = this.rangedFilter_.getStartPost();\r\n                    var indexCompare_1 = this.index_.getCompare();\r\n                    cmp = function (a, b) { return indexCompare_1(b, a); };\r\n                }\r\n                else {\r\n                    iterator = filtered.getIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getStartPost();\r\n                    endPost = this.rangedFilter_.getEndPost();\r\n                    cmp = this.index_.getCompare();\r\n                }\r\n                var count = 0;\r\n                var foundStartPost = false;\r\n                while (iterator.hasNext()) {\r\n                    var next = iterator.getNext();\r\n                    if (!foundStartPost && cmp(startPost, next) <= 0) {\r\n                        // start adding\r\n                        foundStartPost = true;\r\n                    }\r\n                    var inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\r\n                    if (inRange) {\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.rangedFilter_\r\n            .getIndexedFilter()\r\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.filtersNodes = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.getIndexedFilter = function () {\r\n        return this.rangedFilter_.getIndexedFilter();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    /**\r\n     * @param {!Node} snap\r\n     * @param {string} childKey\r\n     * @param {!Node} childSnap\r\n     * @param {!CompleteChildSource} source\r\n     * @param {?ChildChangeAccumulator} changeAccumulator\r\n     * @return {!Node}\r\n     * @private\r\n     */\r\n    LimitedFilter.prototype.fullLimitUpdateChild_ = function (snap, childKey, childSnap, source, changeAccumulator) {\r\n        // TODO: rename all cache stuff etc to general snap terminology\r\n        var cmp;\r\n        if (this.reverse_) {\r\n            var indexCmp_1 = this.index_.getCompare();\r\n            cmp = function (a, b) { return indexCmp_1(b, a); };\r\n        }\r\n        else {\r\n            cmp = this.index_.getCompare();\r\n        }\r\n        var oldEventCache = snap;\r\n        util.assert(oldEventCache.numChildren() === this.limit_, '');\r\n        var newChildNamedNode = new NamedNode(childKey, childSnap);\r\n        var windowBoundary = this.reverse_\r\n            ? oldEventCache.getFirstChild(this.index_)\r\n            : oldEventCache.getLastChild(this.index_);\r\n        var inRange = this.rangedFilter_.matches(newChildNamedNode);\r\n        if (oldEventCache.hasChild(childKey)) {\r\n            var oldChildSnap = oldEventCache.getImmediateChild(childKey);\r\n            var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\r\n            while (nextChild != null &&\r\n                (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\r\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\r\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\r\n                // the limited filter...\r\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\r\n            }\r\n            var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\r\n            var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\r\n            if (remainsInWindow) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(Change.childChangedChange(childKey, childSnap, oldChildSnap));\r\n                }\r\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\r\n            }\r\n            else {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(Change.childRemovedChange(childKey, oldChildSnap));\r\n                }\r\n                var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\r\n                var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\r\n                if (nextChildInRange) {\r\n                    if (changeAccumulator != null) {\r\n                        changeAccumulator.trackChildChange(Change.childAddedChange(nextChild.name, nextChild.node));\r\n                    }\r\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\r\n                }\r\n                else {\r\n                    return newEventCache;\r\n                }\r\n            }\r\n        }\r\n        else if (childSnap.isEmpty()) {\r\n            // we're deleting a node, but it was not in the window, so ignore it\r\n            return snap;\r\n        }\r\n        else if (inRange) {\r\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(Change.childRemovedChange(windowBoundary.name, windowBoundary.node));\r\n                    changeAccumulator.trackChildChange(Change.childAddedChange(childKey, childSnap));\r\n                }\r\n                return oldEventCache\r\n                    .updateImmediateChild(childKey, childSnap)\r\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\r\n            }\r\n            else {\r\n                return snap;\r\n            }\r\n        }\r\n        else {\r\n            return snap;\r\n        }\r\n    };\r\n    return LimitedFilter;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n * @constructor\r\n */\r\nvar QueryParams = /** @class */ (function () {\r\n    function QueryParams() {\r\n        this.limitSet_ = false;\r\n        this.startSet_ = false;\r\n        this.startNameSet_ = false;\r\n        this.endSet_ = false;\r\n        this.endNameSet_ = false;\r\n        this.limit_ = 0;\r\n        this.viewFrom_ = '';\r\n        this.indexStartValue_ = null;\r\n        this.indexStartName_ = '';\r\n        this.indexEndValue_ = null;\r\n        this.indexEndName_ = '';\r\n        this.index_ = PRIORITY_INDEX;\r\n    }\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.hasStart = function () {\r\n        return this.startSet_;\r\n    };\r\n    /**\r\n     * @return {boolean} True if it would return from left.\r\n     */\r\n    QueryParams.prototype.isViewFromLeft = function () {\r\n        if (this.viewFrom_ === '') {\r\n            // limit(), rather than limitToFirst or limitToLast was called.\r\n            // This means that only one of startSet_ and endSet_ is true. Use them\r\n            // to calculate which side of the view to anchor to. If neither is set,\r\n            // anchor to the end.\r\n            return this.startSet_;\r\n        }\r\n        else {\r\n            return (this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT);\r\n        }\r\n    };\r\n    /**\r\n     * Only valid to call if hasStart() returns true\r\n     * @return {*}\r\n     */\r\n    QueryParams.prototype.getIndexStartValue = function () {\r\n        util.assert(this.startSet_, 'Only valid if start has been set');\r\n        return this.indexStartValue_;\r\n    };\r\n    /**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     * @return {!string}\r\n     */\r\n    QueryParams.prototype.getIndexStartName = function () {\r\n        util.assert(this.startSet_, 'Only valid if start has been set');\r\n        if (this.startNameSet_) {\r\n            return this.indexStartName_;\r\n        }\r\n        else {\r\n            return MIN_NAME;\r\n        }\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.hasEnd = function () {\r\n        return this.endSet_;\r\n    };\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * @return {*}\r\n     */\r\n    QueryParams.prototype.getIndexEndValue = function () {\r\n        util.assert(this.endSet_, 'Only valid if end has been set');\r\n        return this.indexEndValue_;\r\n    };\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     * @return {!string}\r\n     */\r\n    QueryParams.prototype.getIndexEndName = function () {\r\n        util.assert(this.endSet_, 'Only valid if end has been set');\r\n        if (this.endNameSet_) {\r\n            return this.indexEndName_;\r\n        }\r\n        else {\r\n            return MAX_NAME;\r\n        }\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.hasLimit = function () {\r\n        return this.limitSet_;\r\n    };\r\n    /**\r\n     * @return {boolean} True if a limit has been set and it has been explicitly anchored\r\n     */\r\n    QueryParams.prototype.hasAnchoredLimit = function () {\r\n        return this.limitSet_ && this.viewFrom_ !== '';\r\n    };\r\n    /**\r\n     * Only valid to call if hasLimit() returns true\r\n     * @return {!number}\r\n     */\r\n    QueryParams.prototype.getLimit = function () {\r\n        util.assert(this.limitSet_, 'Only valid if limit has been set');\r\n        return this.limit_;\r\n    };\r\n    /**\r\n     * @return {!Index}\r\n     */\r\n    QueryParams.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    /**\r\n     * @return {!QueryParams}\r\n     * @private\r\n     */\r\n    QueryParams.prototype.copy_ = function () {\r\n        var copy = new QueryParams();\r\n        copy.limitSet_ = this.limitSet_;\r\n        copy.limit_ = this.limit_;\r\n        copy.startSet_ = this.startSet_;\r\n        copy.indexStartValue_ = this.indexStartValue_;\r\n        copy.startNameSet_ = this.startNameSet_;\r\n        copy.indexStartName_ = this.indexStartName_;\r\n        copy.endSet_ = this.endSet_;\r\n        copy.indexEndValue_ = this.indexEndValue_;\r\n        copy.endNameSet_ = this.endNameSet_;\r\n        copy.indexEndName_ = this.indexEndName_;\r\n        copy.index_ = this.index_;\r\n        copy.viewFrom_ = this.viewFrom_;\r\n        return copy;\r\n    };\r\n    /**\r\n     * @param {!number} newLimit\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.limit = function (newLimit) {\r\n        var newParams = this.copy_();\r\n        newParams.limitSet_ = true;\r\n        newParams.limit_ = newLimit;\r\n        newParams.viewFrom_ = '';\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {!number} newLimit\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.limitToFirst = function (newLimit) {\r\n        var newParams = this.copy_();\r\n        newParams.limitSet_ = true;\r\n        newParams.limit_ = newLimit;\r\n        newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {!number} newLimit\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.limitToLast = function (newLimit) {\r\n        var newParams = this.copy_();\r\n        newParams.limitSet_ = true;\r\n        newParams.limit_ = newLimit;\r\n        newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {?string=} key\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.startAt = function (indexValue, key) {\r\n        var newParams = this.copy_();\r\n        newParams.startSet_ = true;\r\n        if (indexValue === undefined) {\r\n            indexValue = null;\r\n        }\r\n        newParams.indexStartValue_ = indexValue;\r\n        if (key != null) {\r\n            newParams.startNameSet_ = true;\r\n            newParams.indexStartName_ = key;\r\n        }\r\n        else {\r\n            newParams.startNameSet_ = false;\r\n            newParams.indexStartName_ = '';\r\n        }\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {?string=} key\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.endAt = function (indexValue, key) {\r\n        var newParams = this.copy_();\r\n        newParams.endSet_ = true;\r\n        if (indexValue === undefined) {\r\n            indexValue = null;\r\n        }\r\n        newParams.indexEndValue_ = indexValue;\r\n        if (key !== undefined) {\r\n            newParams.endNameSet_ = true;\r\n            newParams.indexEndName_ = key;\r\n        }\r\n        else {\r\n            newParams.endNameSet_ = false;\r\n            newParams.indexEndName_ = '';\r\n        }\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {!Index} index\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.orderBy = function (index) {\r\n        var newParams = this.copy_();\r\n        newParams.index_ = index;\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @return {!Object}\r\n     */\r\n    QueryParams.prototype.getQueryObject = function () {\r\n        var WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;\r\n        var obj = {};\r\n        if (this.startSet_) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;\r\n            if (this.startNameSet_) {\r\n                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;\r\n            }\r\n        }\r\n        if (this.endSet_) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;\r\n            if (this.endNameSet_) {\r\n                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;\r\n            }\r\n        }\r\n        if (this.limitSet_) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;\r\n            var viewFrom = this.viewFrom_;\r\n            if (viewFrom === '') {\r\n                if (this.isViewFromLeft()) {\r\n                    viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\r\n                }\r\n                else {\r\n                    viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\r\n                }\r\n            }\r\n            obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\r\n        }\r\n        // For now, priority index is the default, so we only specify if it's some other index\r\n        if (this.index_ !== PRIORITY_INDEX) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();\r\n        }\r\n        return obj;\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.loadsAllData = function () {\r\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.isDefault = function () {\r\n        return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\r\n    };\r\n    /**\r\n     * @return {!NodeFilter}\r\n     */\r\n    QueryParams.prototype.getNodeFilter = function () {\r\n        if (this.loadsAllData()) {\r\n            return new IndexedFilter(this.getIndex());\r\n        }\r\n        else if (this.hasLimit()) {\r\n            return new LimitedFilter(this);\r\n        }\r\n        else {\r\n            return new RangedFilter(this);\r\n        }\r\n    };\r\n    /**\r\n     * Returns a set of REST query string parameters representing this query.\r\n     *\r\n     * @return {!Object.<string,*>} query string parameters\r\n     */\r\n    QueryParams.prototype.toRestQueryStringParameters = function () {\r\n        var REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;\r\n        var qs = {};\r\n        if (this.isDefault()) {\r\n            return qs;\r\n        }\r\n        var orderBy;\r\n        if (this.index_ === PRIORITY_INDEX) {\r\n            orderBy = REST_CONSTANTS.PRIORITY_INDEX;\r\n        }\r\n        else if (this.index_ === VALUE_INDEX) {\r\n            orderBy = REST_CONSTANTS.VALUE_INDEX;\r\n        }\r\n        else if (this.index_ === KEY_INDEX) {\r\n            orderBy = REST_CONSTANTS.KEY_INDEX;\r\n        }\r\n        else {\r\n            util.assert(this.index_ instanceof PathIndex, 'Unrecognized index type!');\r\n            orderBy = this.index_.toString();\r\n        }\r\n        qs[REST_CONSTANTS.ORDER_BY] = util.stringify(orderBy);\r\n        if (this.startSet_) {\r\n            qs[REST_CONSTANTS.START_AT] = util.stringify(this.indexStartValue_);\r\n            if (this.startNameSet_) {\r\n                qs[REST_CONSTANTS.START_AT] += ',' + util.stringify(this.indexStartName_);\r\n            }\r\n        }\r\n        if (this.endSet_) {\r\n            qs[REST_CONSTANTS.END_AT] = util.stringify(this.indexEndValue_);\r\n            if (this.endNameSet_) {\r\n                qs[REST_CONSTANTS.END_AT] += ',' + util.stringify(this.indexEndName_);\r\n            }\r\n        }\r\n        if (this.limitSet_) {\r\n            if (this.isViewFromLeft()) {\r\n                qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;\r\n            }\r\n            else {\r\n                qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;\r\n            }\r\n        }\r\n        return qs;\r\n    };\r\n    /**\r\n     * Wire Protocol Constants\r\n     * @const\r\n     * @enum {string}\r\n     * @private\r\n     */\r\n    QueryParams.WIRE_PROTOCOL_CONSTANTS_ = {\r\n        INDEX_START_VALUE: 'sp',\r\n        INDEX_START_NAME: 'sn',\r\n        INDEX_END_VALUE: 'ep',\r\n        INDEX_END_NAME: 'en',\r\n        LIMIT: 'l',\r\n        VIEW_FROM: 'vf',\r\n        VIEW_FROM_LEFT: 'l',\r\n        VIEW_FROM_RIGHT: 'r',\r\n        INDEX: 'i'\r\n    };\r\n    /**\r\n     * REST Query Constants\r\n     * @const\r\n     * @enum {string}\r\n     * @private\r\n     */\r\n    QueryParams.REST_QUERY_CONSTANTS_ = {\r\n        ORDER_BY: 'orderBy',\r\n        PRIORITY_INDEX: '$priority',\r\n        VALUE_INDEX: '$value',\r\n        KEY_INDEX: '$key',\r\n        START_AT: 'startAt',\r\n        END_AT: 'endAt',\r\n        LIMIT_TO_FIRST: 'limitToFirst',\r\n        LIMIT_TO_LAST: 'limitToLast'\r\n    };\r\n    /**\r\n     * Default, empty query parameters\r\n     * @type {!QueryParams}\r\n     * @const\r\n     */\r\n    QueryParams.DEFAULT = new QueryParams();\r\n    return QueryParams;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar Reference = /** @class */ (function (_super) {\r\n    tslib.__extends(Reference, _super);\r\n    /**\r\n     * Call options:\r\n     *   new Reference(Repo, Path) or\r\n     *   new Reference(url: string, string|RepoManager)\r\n     *\r\n     * Externally - this is the firebase.database.Reference type.\r\n     *\r\n     * @param {!Repo} repo\r\n     * @param {(!Path)} path\r\n     * @extends {Query}\r\n     */\r\n    function Reference(repo, path) {\r\n        var _this = this;\r\n        if (!(repo instanceof Repo)) {\r\n            throw new Error('new Reference() no longer supported - use app.database().');\r\n        }\r\n        // call Query's constructor, passing in the repo and path.\r\n        _this = _super.call(this, repo, path, QueryParams.DEFAULT, false) || this;\r\n        return _this;\r\n    }\r\n    /** @return {?string} */\r\n    Reference.prototype.getKey = function () {\r\n        util.validateArgCount('Reference.key', 0, 0, arguments.length);\r\n        if (this.path.isEmpty()) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this.path.getBack();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!(string|Path)} pathString\r\n     * @return {!Reference}\r\n     */\r\n    Reference.prototype.child = function (pathString) {\r\n        util.validateArgCount('Reference.child', 1, 1, arguments.length);\r\n        if (typeof pathString === 'number') {\r\n            pathString = String(pathString);\r\n        }\r\n        else if (!(pathString instanceof Path)) {\r\n            if (this.path.getFront() === null) {\r\n                validateRootPathString('Reference.child', 1, pathString, false);\r\n            }\r\n            else {\r\n                validatePathString('Reference.child', 1, pathString, false);\r\n            }\r\n        }\r\n        return new Reference(this.repo, this.path.child(pathString));\r\n    };\r\n    /** @return {?Reference} */\r\n    Reference.prototype.getParent = function () {\r\n        util.validateArgCount('Reference.parent', 0, 0, arguments.length);\r\n        var parentPath = this.path.parent();\r\n        return parentPath === null ? null : new Reference(this.repo, parentPath);\r\n    };\r\n    /** @return {!Reference} */\r\n    Reference.prototype.getRoot = function () {\r\n        util.validateArgCount('Reference.root', 0, 0, arguments.length);\r\n        var ref = this;\r\n        while (ref.getParent() !== null) {\r\n            ref = ref.getParent();\r\n        }\r\n        return ref;\r\n    };\r\n    /** @return {!Database} */\r\n    Reference.prototype.databaseProp = function () {\r\n        return this.repo.database;\r\n    };\r\n    /**\r\n     * @param {*} newVal\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.set = function (newVal, onComplete) {\r\n        util.validateArgCount('Reference.set', 1, 2, arguments.length);\r\n        validateWritablePath('Reference.set', this.path);\r\n        validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);\r\n        util.validateCallback('Reference.set', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo.setWithPriority(this.path, newVal, \r\n        /*priority=*/ null, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {!Object} objectToMerge\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.update = function (objectToMerge, onComplete) {\r\n        util.validateArgCount('Reference.update', 1, 2, arguments.length);\r\n        validateWritablePath('Reference.update', this.path);\r\n        if (Array.isArray(objectToMerge)) {\r\n            var newObjectToMerge = {};\r\n            for (var i = 0; i < objectToMerge.length; ++i) {\r\n                newObjectToMerge['' + i] = objectToMerge[i];\r\n            }\r\n            objectToMerge = newObjectToMerge;\r\n            warn('Passing an Array to Firebase.update() is deprecated. ' +\r\n                'Use set() if you want to overwrite the existing data, or ' +\r\n                'an Object with integer keys if you really do want to ' +\r\n                'only update some of the children.');\r\n        }\r\n        validateFirebaseMergeDataArg('Reference.update', 1, objectToMerge, this.path, false);\r\n        util.validateCallback('Reference.update', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo.update(this.path, objectToMerge, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*} newVal\r\n     * @param {string|number|null} newPriority\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.setWithPriority = function (newVal, newPriority, onComplete) {\r\n        util.validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\r\n        validateWritablePath('Reference.setWithPriority', this.path);\r\n        validateFirebaseDataArg('Reference.setWithPriority', 1, newVal, this.path, false);\r\n        validatePriority('Reference.setWithPriority', 2, newPriority, false);\r\n        util.validateCallback('Reference.setWithPriority', 3, onComplete, true);\r\n        if (this.getKey() === '.length' || this.getKey() === '.keys') {\r\n            throw ('Reference.setWithPriority failed: ' +\r\n                this.getKey() +\r\n                ' is a read-only object.');\r\n        }\r\n        var deferred = new util.Deferred();\r\n        this.repo.setWithPriority(this.path, newVal, newPriority, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.remove = function (onComplete) {\r\n        util.validateArgCount('Reference.remove', 0, 1, arguments.length);\r\n        validateWritablePath('Reference.remove', this.path);\r\n        util.validateCallback('Reference.remove', 1, onComplete, true);\r\n        return this.set(null, onComplete);\r\n    };\r\n    /**\r\n     * @param {function(*):*} transactionUpdate\r\n     * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete\r\n     * @param {boolean=} applyLocally\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.transaction = function (transactionUpdate, onComplete, applyLocally) {\r\n        util.validateArgCount('Reference.transaction', 1, 3, arguments.length);\r\n        validateWritablePath('Reference.transaction', this.path);\r\n        util.validateCallback('Reference.transaction', 1, transactionUpdate, false);\r\n        util.validateCallback('Reference.transaction', 2, onComplete, true);\r\n        // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how\r\n        // to expose it.\r\n        validateBoolean('Reference.transaction', 3, applyLocally, true);\r\n        if (this.getKey() === '.length' || this.getKey() === '.keys') {\r\n            throw ('Reference.transaction failed: ' +\r\n                this.getKey() +\r\n                ' is a read-only object.');\r\n        }\r\n        if (applyLocally === undefined) {\r\n            applyLocally = true;\r\n        }\r\n        var deferred = new util.Deferred();\r\n        if (typeof onComplete === 'function') {\r\n            deferred.promise.catch(function () { });\r\n        }\r\n        var promiseComplete = function (error, committed, snapshot) {\r\n            if (error) {\r\n                deferred.reject(error);\r\n            }\r\n            else {\r\n                deferred.resolve(new TransactionResult(committed, snapshot));\r\n            }\r\n            if (typeof onComplete === 'function') {\r\n                onComplete(error, committed, snapshot);\r\n            }\r\n        };\r\n        this.repo.startTransaction(this.path, transactionUpdate, promiseComplete, applyLocally);\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {string|number|null} priority\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.setPriority = function (priority, onComplete) {\r\n        util.validateArgCount('Reference.setPriority', 1, 2, arguments.length);\r\n        validateWritablePath('Reference.setPriority', this.path);\r\n        validatePriority('Reference.setPriority', 1, priority, false);\r\n        util.validateCallback('Reference.setPriority', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo.setWithPriority(this.path.child('.priority'), priority, null, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*=} value\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Reference}\r\n     */\r\n    Reference.prototype.push = function (value, onComplete) {\r\n        util.validateArgCount('Reference.push', 0, 2, arguments.length);\r\n        validateWritablePath('Reference.push', this.path);\r\n        validateFirebaseDataArg('Reference.push', 1, value, this.path, true);\r\n        util.validateCallback('Reference.push', 2, onComplete, true);\r\n        var now = this.repo.serverTime();\r\n        var name = nextPushId(now);\r\n        // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.\r\n        // We use child() to create handles to two different references. The first is turned into a\r\n        // ThennableReference below by adding then() and catch() methods and is used as the\r\n        // return value of push(). The second remains a regular Reference and is used as the fulfilled\r\n        // value of the first ThennableReference.\r\n        var thennablePushRef = this.child(name);\r\n        var pushRef = this.child(name);\r\n        var promise;\r\n        if (value != null) {\r\n            promise = thennablePushRef.set(value, onComplete).then(function () { return pushRef; });\r\n        }\r\n        else {\r\n            promise = Promise.resolve(pushRef);\r\n        }\r\n        thennablePushRef.then = promise.then.bind(promise);\r\n        thennablePushRef.catch = promise.then.bind(promise, undefined);\r\n        if (typeof onComplete === 'function') {\r\n            promise.catch(function () { });\r\n        }\r\n        return thennablePushRef;\r\n    };\r\n    /**\r\n     * @return {!OnDisconnect}\r\n     */\r\n    Reference.prototype.onDisconnect = function () {\r\n        validateWritablePath('Reference.onDisconnect', this.path);\r\n        return new OnDisconnect(this.repo, this.path);\r\n    };\r\n    Object.defineProperty(Reference.prototype, \"database\", {\r\n        get: function () {\r\n            return this.databaseProp();\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"key\", {\r\n        get: function () {\r\n            return this.getKey();\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"parent\", {\r\n        get: function () {\r\n            return this.getParent();\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"root\", {\r\n        get: function () {\r\n            return this.getRoot();\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return Reference;\r\n}(Query));\r\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\r\nQuery.__referenceConstructor = Reference;\r\nSyncPoint.__referenceConstructor = Reference;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Node in a Tree.\r\n */\r\nvar TreeNode = /** @class */ (function () {\r\n    function TreeNode() {\r\n        // TODO: Consider making accessors that create children and value lazily or\r\n        // separate Internal / Leaf 'types'.\r\n        this.children = {};\r\n        this.childCount = 0;\r\n        this.value = null;\r\n    }\r\n    return TreeNode;\r\n}());\r\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\r\nvar Tree = /** @class */ (function () {\r\n    /**\r\n     * @template T\r\n     * @param {string=} name_ Optional name of the node.\r\n     * @param {Tree=} parent_ Optional parent node.\r\n     * @param {TreeNode=} node_ Optional node to wrap.\r\n     */\r\n    function Tree(name_, parent_, node_) {\r\n        if (name_ === void 0) { name_ = ''; }\r\n        if (parent_ === void 0) { parent_ = null; }\r\n        if (node_ === void 0) { node_ = new TreeNode(); }\r\n        this.name_ = name_;\r\n        this.parent_ = parent_;\r\n        this.node_ = node_;\r\n    }\r\n    /**\r\n     * Returns a sub-Tree for the given path.\r\n     *\r\n     * @param {!(string|Path)} pathObj Path to look up.\r\n     * @return {!Tree.<T>} Tree for path.\r\n     */\r\n    Tree.prototype.subTree = function (pathObj) {\r\n        // TODO: Require pathObj to be Path?\r\n        var path = pathObj instanceof Path ? pathObj : new Path(pathObj);\r\n        var child = this, next = path.getFront();\r\n        while (next !== null) {\r\n            var childNode = util.safeGet(child.node_.children, next) || new TreeNode();\r\n            child = new Tree(next, child, childNode);\r\n            path = path.popFront();\r\n            next = path.getFront();\r\n        }\r\n        return child;\r\n    };\r\n    /**\r\n     * Returns the data associated with this tree node.\r\n     *\r\n     * @return {?T} The data or null if no data exists.\r\n     */\r\n    Tree.prototype.getValue = function () {\r\n        return this.node_.value;\r\n    };\r\n    /**\r\n     * Sets data to this tree node.\r\n     *\r\n     * @param {!T} value Value to set.\r\n     */\r\n    Tree.prototype.setValue = function (value) {\r\n        util.assert(typeof value !== 'undefined', 'Cannot set value to undefined');\r\n        this.node_.value = value;\r\n        this.updateParents_();\r\n    };\r\n    /**\r\n     * Clears the contents of the tree node (its value and all children).\r\n     */\r\n    Tree.prototype.clear = function () {\r\n        this.node_.value = null;\r\n        this.node_.children = {};\r\n        this.node_.childCount = 0;\r\n        this.updateParents_();\r\n    };\r\n    /**\r\n     * @return {boolean} Whether the tree has any children.\r\n     */\r\n    Tree.prototype.hasChildren = function () {\r\n        return this.node_.childCount > 0;\r\n    };\r\n    /**\r\n     * @return {boolean} Whether the tree is empty (no value or children).\r\n     */\r\n    Tree.prototype.isEmpty = function () {\r\n        return this.getValue() === null && !this.hasChildren();\r\n    };\r\n    /**\r\n     * Calls action for each child of this tree node.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n     */\r\n    Tree.prototype.forEachChild = function (action) {\r\n        var _this = this;\r\n        each(this.node_.children, function (child, childTree) {\r\n            action(new Tree(child, _this, childTree));\r\n        });\r\n    };\r\n    /**\r\n     * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n     * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to\r\n     *   false.\r\n     * @param {boolean=} childrenFirst Whether to call action on children before calling it on\r\n     *   parent.\r\n     */\r\n    Tree.prototype.forEachDescendant = function (action, includeSelf, childrenFirst) {\r\n        if (includeSelf && !childrenFirst) {\r\n            action(this);\r\n        }\r\n        this.forEachChild(function (child) {\r\n            child.forEachDescendant(action, /*includeSelf=*/ true, childrenFirst);\r\n        });\r\n        if (includeSelf && childrenFirst) {\r\n            action(this);\r\n        }\r\n    };\r\n    /**\r\n     * Calls action on each ancestor node.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called on each parent; return\r\n     *   true to abort.\r\n     * @param {boolean=} includeSelf Whether to call action on this node as well.\r\n     * @return {boolean} true if the action callback returned true.\r\n     */\r\n    Tree.prototype.forEachAncestor = function (action, includeSelf) {\r\n        var node = includeSelf ? this : this.parent();\r\n        while (node !== null) {\r\n            if (action(node)) {\r\n                return true;\r\n            }\r\n            node = node.parent();\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Does a depth-first traversal of this node's descendants.  When a descendant with a value\r\n     * is found, action is called on it and traversal does not continue inside the node.\r\n     * Action is *not* called on this node.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n     */\r\n    Tree.prototype.forEachImmediateDescendantWithValue = function (action) {\r\n        this.forEachChild(function (child) {\r\n            if (child.getValue() !== null) {\r\n                action(child);\r\n            }\r\n            else {\r\n                child.forEachImmediateDescendantWithValue(action);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @return {!Path} The path of this tree node, as a Path.\r\n     */\r\n    Tree.prototype.path = function () {\r\n        return new Path(this.parent_ === null\r\n            ? this.name_\r\n            : this.parent_.path() + '/' + this.name_);\r\n    };\r\n    /**\r\n     * @return {string} The name of the tree node.\r\n     */\r\n    Tree.prototype.name = function () {\r\n        return this.name_;\r\n    };\r\n    /**\r\n     * @return {?Tree} The parent tree node, or null if this is the root of the tree.\r\n     */\r\n    Tree.prototype.parent = function () {\r\n        return this.parent_;\r\n    };\r\n    /**\r\n     * Adds or removes this child from its parent based on whether it's empty or not.\r\n     *\r\n     * @private\r\n     */\r\n    Tree.prototype.updateParents_ = function () {\r\n        if (this.parent_ !== null) {\r\n            this.parent_.updateChild_(this.name_, this);\r\n        }\r\n    };\r\n    /**\r\n     * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n     *\r\n     * @param {string} childName The name of the child to update.\r\n     * @param {!Tree.<T>} child The child to update.\r\n     * @private\r\n     */\r\n    Tree.prototype.updateChild_ = function (childName, child) {\r\n        var childEmpty = child.isEmpty();\r\n        var childExists = util.contains(this.node_.children, childName);\r\n        if (childEmpty && childExists) {\r\n            delete this.node_.children[childName];\r\n            this.node_.childCount--;\r\n            this.updateParents_();\r\n        }\r\n        else if (!childEmpty && !childExists) {\r\n            this.node_.children[childName] = child.node_;\r\n            this.node_.childCount++;\r\n            this.updateParents_();\r\n        }\r\n    };\r\n    return Tree;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific\r\n// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well\r\n// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.\r\n// For now it's part of Repo, but in its own file.\r\n/**\r\n * @enum {number}\r\n */\r\nvar TransactionStatus;\r\n(function (TransactionStatus) {\r\n    // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\r\n    // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\r\n    // mismatched hash.\r\n    TransactionStatus[TransactionStatus[\"RUN\"] = 0] = \"RUN\";\r\n    // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\r\n    // or rejected yet).\r\n    TransactionStatus[TransactionStatus[\"SENT\"] = 1] = \"SENT\";\r\n    // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\r\n    // removed when we get a chance to prune completed ones.\r\n    TransactionStatus[TransactionStatus[\"COMPLETED\"] = 2] = \"COMPLETED\";\r\n    // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\r\n    // If it comes back as unsuccessful, we'll abort it.\r\n    TransactionStatus[TransactionStatus[\"SENT_NEEDS_ABORT\"] = 3] = \"SENT_NEEDS_ABORT\";\r\n    // Temporary state used to mark transactions that need to be aborted.\r\n    TransactionStatus[TransactionStatus[\"NEEDS_ABORT\"] = 4] = \"NEEDS_ABORT\";\r\n})(TransactionStatus || (TransactionStatus = {}));\r\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's\r\n * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.\r\n * @type {number}\r\n * @const\r\n * @private\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nRepo.MAX_TRANSACTION_RETRIES_ = 25;\r\n/**\r\n * Setup the transaction data structures\r\n * @private\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nRepo.prototype.transactionsInit_ = function () {\r\n    /**\r\n     * Stores queues of outstanding transactions for Firebase locations.\r\n     *\r\n     * @type {!Tree.<Array.<!Transaction>>}\r\n     * @private\r\n     */\r\n    this.transactionQueueTree_ = new Tree();\r\n};\r\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.\r\n *\r\n * @param {!Path} path Path at which to do transaction.\r\n * @param {function(*):*} transactionUpdate Update callback.\r\n * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.\r\n * @param {boolean} applyLocally Whether or not to make intermediate results visible\r\n */\r\nRepo.prototype.startTransaction = function (path, transactionUpdate, onComplete, applyLocally) {\r\n    this.log_('transaction on ' + path);\r\n    // Add a watch to make sure we get server updates.\r\n    var valueCallback = function () { };\r\n    var watchRef = new Reference(this, path);\r\n    watchRef.on('value', valueCallback);\r\n    var unwatcher = function () {\r\n        watchRef.off('value', valueCallback);\r\n    };\r\n    // Initialize transaction.\r\n    var transaction = {\r\n        path: path,\r\n        update: transactionUpdate,\r\n        onComplete: onComplete,\r\n        // One of TransactionStatus enums.\r\n        status: null,\r\n        // Used when combining transactions at different locations to figure out which one goes first.\r\n        order: LUIDGenerator(),\r\n        // Whether to raise local events for this transaction.\r\n        applyLocally: applyLocally,\r\n        // Count of how many times we've retried the transaction.\r\n        retryCount: 0,\r\n        // Function to call to clean up our .on() listener.\r\n        unwatcher: unwatcher,\r\n        // Stores why a transaction was aborted.\r\n        abortReason: null,\r\n        currentWriteId: null,\r\n        currentInputSnapshot: null,\r\n        currentOutputSnapshotRaw: null,\r\n        currentOutputSnapshotResolved: null\r\n    };\r\n    // Run transaction initially.\r\n    var currentState = this.getLatestState_(path);\r\n    transaction.currentInputSnapshot = currentState;\r\n    var newVal = transaction.update(currentState.val());\r\n    if (newVal === undefined) {\r\n        // Abort transaction.\r\n        transaction.unwatcher();\r\n        transaction.currentOutputSnapshotRaw = null;\r\n        transaction.currentOutputSnapshotResolved = null;\r\n        if (transaction.onComplete) {\r\n            // We just set the input snapshot, so this cast should be safe\r\n            var snapshot = new DataSnapshot(transaction.currentInputSnapshot, new Reference(this, transaction.path), PRIORITY_INDEX);\r\n            transaction.onComplete(null, false, snapshot);\r\n        }\r\n    }\r\n    else {\r\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\r\n        // Mark as run and add to our queue.\r\n        transaction.status = TransactionStatus.RUN;\r\n        var queueNode = this.transactionQueueTree_.subTree(path);\r\n        var nodeQueue = queueNode.getValue() || [];\r\n        nodeQueue.push(transaction);\r\n        queueNode.setValue(nodeQueue);\r\n        // Update visibleData and raise events\r\n        // Note: We intentionally raise events after updating all of our transaction state, since the user could\r\n        // start new transactions from the event callbacks.\r\n        var priorityForNode = void 0;\r\n        if (typeof newVal === 'object' &&\r\n            newVal !== null &&\r\n            util.contains(newVal, '.priority')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            priorityForNode = util.safeGet(newVal, '.priority');\r\n            util.assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\r\n                'Priority must be a valid string, finite number, server value, or null.');\r\n        }\r\n        else {\r\n            var currentNode = this.serverSyncTree_.calcCompleteEventCache(path) ||\r\n                ChildrenNode.EMPTY_NODE;\r\n            priorityForNode = currentNode.getPriority().val();\r\n        }\r\n        priorityForNode /** @type {null|number|string} */ = priorityForNode;\r\n        var serverValues = this.generateServerValues();\r\n        var newNodeUnresolved = nodeFromJSON$1(newVal, priorityForNode);\r\n        var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\r\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\r\n        transaction.currentOutputSnapshotResolved = newNode;\r\n        transaction.currentWriteId = this.getNextWriteId_();\r\n        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, transaction.currentWriteId, transaction.applyLocally);\r\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n        this.sendReadyTransactions_();\r\n    }\r\n};\r\n/**\r\n * @param {!Path} path\r\n * @param {Array.<number>=} excludeSets A specific set to exclude\r\n * @return {Node}\r\n * @private\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nRepo.prototype.getLatestState_ = function (path, excludeSets) {\r\n    return (this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) ||\r\n        ChildrenNode.EMPTY_NODE);\r\n};\r\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding transactions to\r\n * complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively with a particular\r\n * transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.\r\n * @private\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nRepo.prototype.sendReadyTransactions_ = function (node) {\r\n    var _this = this;\r\n    if (node === void 0) { node = this.transactionQueueTree_; }\r\n    // Before recursing, make sure any completed transactions are removed.\r\n    if (!node) {\r\n        this.pruneCompletedTransactionsBelowNode_(node);\r\n    }\r\n    if (node.getValue() !== null) {\r\n        var queue = this.buildTransactionQueue_(node);\r\n        util.assert(queue.length > 0, 'Sending zero length transaction queue');\r\n        var allRun = queue.every(function (transaction) { return transaction.status === TransactionStatus.RUN; });\r\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\r\n        if (allRun) {\r\n            this.sendTransactionQueue_(node.path(), queue);\r\n        }\r\n    }\r\n    else if (node.hasChildren()) {\r\n        node.forEachChild(function (childNode) {\r\n            _this.sendReadyTransactions_(childNode);\r\n        });\r\n    }\r\n};\r\n/**\r\n * Given a list of run transactions, send them to the server and then handle the result (success or failure).\r\n *\r\n * @param {!Path} path The location of the queue.\r\n * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.\r\n * @private\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nRepo.prototype.sendTransactionQueue_ = function (path, queue) {\r\n    var _this = this;\r\n    // Mark transactions as sent and increment retry count!\r\n    var setsToIgnore = queue.map(function (txn) {\r\n        return txn.currentWriteId;\r\n    });\r\n    var latestState = this.getLatestState_(path, setsToIgnore);\r\n    var snapToSend = latestState;\r\n    var latestHash = latestState.hash();\r\n    for (var i = 0; i < queue.length; i++) {\r\n        var txn = queue[i];\r\n        util.assert(txn.status === TransactionStatus.RUN, 'tryToSendTransactionQueue_: items in queue should all be run.');\r\n        txn.status = TransactionStatus.SENT;\r\n        txn.retryCount++;\r\n        var relativePath = Path.relativePath(path, txn.path);\r\n        // If we've gotten to this point, the output snapshot must be defined.\r\n        snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\r\n    }\r\n    var dataToSend = snapToSend.val(true);\r\n    var pathToSend = path;\r\n    // Send the put.\r\n    this.server_.put(pathToSend.toString(), dataToSend, function (status) {\r\n        _this.log_('transaction put response', {\r\n            path: pathToSend.toString(),\r\n            status: status\r\n        });\r\n        var events = [];\r\n        if (status === 'ok') {\r\n            // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\r\n            // the callback could trigger more transactions or sets.\r\n            var callbacks = [];\r\n            for (var i = 0; i < queue.length; i++) {\r\n                queue[i].status = TransactionStatus.COMPLETED;\r\n                events = events.concat(_this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId));\r\n                if (queue[i].onComplete) {\r\n                    // We never unset the output snapshot, and given that this transaction is complete, it should be set\r\n                    var node = queue[i].currentOutputSnapshotResolved;\r\n                    var ref = new Reference(_this, queue[i].path);\r\n                    var snapshot = new DataSnapshot(node, ref, PRIORITY_INDEX);\r\n                    callbacks.push(queue[i].onComplete.bind(null, null, true, snapshot));\r\n                }\r\n                queue[i].unwatcher();\r\n            }\r\n            // Now remove the completed transactions.\r\n            _this.pruneCompletedTransactionsBelowNode_(_this.transactionQueueTree_.subTree(path));\r\n            // There may be pending transactions that we can now send.\r\n            _this.sendReadyTransactions_();\r\n            _this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n            // Finally, trigger onComplete callbacks.\r\n            for (var i = 0; i < callbacks.length; i++) {\r\n                exceptionGuard(callbacks[i]);\r\n            }\r\n        }\r\n        else {\r\n            // transactions are no longer sent.  Update their status appropriately.\r\n            if (status === 'datastale') {\r\n                for (var i = 0; i < queue.length; i++) {\r\n                    if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\r\n                        queue[i].status = TransactionStatus.NEEDS_ABORT;\r\n                    }\r\n                    else {\r\n                        queue[i].status = TransactionStatus.RUN;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\r\n                for (var i = 0; i < queue.length; i++) {\r\n                    queue[i].status = TransactionStatus.NEEDS_ABORT;\r\n                    queue[i].abortReason = status;\r\n                }\r\n            }\r\n            _this.rerunTransactions_(path);\r\n        }\r\n    }, latestHash);\r\n};\r\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to\r\n * be raised for.\r\n *\r\n * @param {!Path} changedPath The path in mergedData that changed.\r\n * @return {!Path} The rootmost path that was affected by rerunning transactions.\r\n * @private\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nRepo.prototype.rerunTransactions_ = function (changedPath) {\r\n    var rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);\r\n    var path = rootMostTransactionNode.path();\r\n    var queue = this.buildTransactionQueue_(rootMostTransactionNode);\r\n    this.rerunTransactionQueue_(queue, path);\r\n    return path;\r\n};\r\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).\r\n *\r\n * @param {Array.<Transaction>} queue The queue of transactions to run.\r\n * @param {!Path} path The path the queue is for.\r\n * @private\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nRepo.prototype.rerunTransactionQueue_ = function (queue, path) {\r\n    if (queue.length === 0) {\r\n        return; // Nothing to do!\r\n    }\r\n    // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\r\n    // the callback could trigger more transactions or sets.\r\n    var callbacks = [];\r\n    var events = [];\r\n    // Ignore all of the sets we're going to re-run.\r\n    var txnsToRerun = queue.filter(function (q) {\r\n        return q.status === TransactionStatus.RUN;\r\n    });\r\n    var setsToIgnore = txnsToRerun.map(function (q) {\r\n        return q.currentWriteId;\r\n    });\r\n    for (var i = 0; i < queue.length; i++) {\r\n        var transaction = queue[i];\r\n        var relativePath = Path.relativePath(path, transaction.path);\r\n        var abortTransaction = false, abortReason = void 0;\r\n        util.assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\r\n        if (transaction.status === TransactionStatus.NEEDS_ABORT) {\r\n            abortTransaction = true;\r\n            abortReason = transaction.abortReason;\r\n            events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\r\n        }\r\n        else if (transaction.status === TransactionStatus.RUN) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            if (transaction.retryCount >= Repo.MAX_TRANSACTION_RETRIES_) {\r\n                abortTransaction = true;\r\n                abortReason = 'maxretry';\r\n                events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\r\n            }\r\n            else {\r\n                // This code reruns a transaction\r\n                var currentNode = this.getLatestState_(transaction.path, setsToIgnore);\r\n                transaction.currentInputSnapshot = currentNode;\r\n                var newData = queue[i].update(currentNode.val());\r\n                if (newData !== undefined) {\r\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\r\n                    var newDataNode = nodeFromJSON$1(newData);\r\n                    var hasExplicitPriority = typeof newData === 'object' &&\r\n                        newData != null &&\r\n                        util.contains(newData, '.priority');\r\n                    if (!hasExplicitPriority) {\r\n                        // Keep the old priority if there wasn't a priority explicitly specified.\r\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\r\n                    }\r\n                    var oldWriteId = transaction.currentWriteId;\r\n                    var serverValues = this.generateServerValues();\r\n                    var newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\r\n                    transaction.currentOutputSnapshotRaw = newDataNode;\r\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\r\n                    transaction.currentWriteId = this.getNextWriteId_();\r\n                    // Mutates setsToIgnore in place\r\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\r\n                    events = events.concat(this.serverSyncTree_.applyUserOverwrite(transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\r\n                    events = events.concat(this.serverSyncTree_.ackUserWrite(oldWriteId, true));\r\n                }\r\n                else {\r\n                    abortTransaction = true;\r\n                    abortReason = 'nodata';\r\n                    events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\r\n                }\r\n            }\r\n        }\r\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n        events = [];\r\n        if (abortTransaction) {\r\n            // Abort.\r\n            queue[i].status = TransactionStatus.COMPLETED;\r\n            // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).\r\n            // So defer the unwatcher until we're done.\r\n            (function (unwatcher) {\r\n                setTimeout(unwatcher, Math.floor(0));\r\n            })(queue[i].unwatcher);\r\n            if (queue[i].onComplete) {\r\n                if (abortReason === 'nodata') {\r\n                    var ref = new Reference(this, queue[i].path);\r\n                    // We set this field immediately, so it's safe to cast to an actual snapshot\r\n                    var lastInput /** @type {!Node} */ = queue[i].currentInputSnapshot;\r\n                    var snapshot = new DataSnapshot(lastInput, ref, PRIORITY_INDEX);\r\n                    callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));\r\n                }\r\n                else {\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error(abortReason), false, null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Clean up completed transactions.\r\n    this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);\r\n    // Now fire callbacks, now that we're in a good, known state.\r\n    for (var i = 0; i < callbacks.length; i++) {\r\n        exceptionGuard(callbacks[i]);\r\n    }\r\n    // Try to send the transaction result to the server.\r\n    this.sendReadyTransactions_();\r\n};\r\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns\r\n * the node for the given path if there are no pending transactions on any ancestor.\r\n *\r\n * @param {!Path} path The location to start at.\r\n * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.\r\n * @private\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nRepo.prototype.getAncestorTransactionNode_ = function (path) {\r\n    var front;\r\n    // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.\r\n    var transactionNode = this.transactionQueueTree_;\r\n    front = path.getFront();\r\n    while (front !== null && transactionNode.getValue() === null) {\r\n        transactionNode = transactionNode.subTree(front);\r\n        path = path.popFront();\r\n        front = path.getFront();\r\n    }\r\n    return transactionNode;\r\n};\r\n/**\r\n * Builds the queue of all transactions at or below the specified transactionNode.\r\n *\r\n * @param {!Tree.<Array.<Transaction>>} transactionNode\r\n * @return {Array.<Transaction>} The generated queue.\r\n * @private\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nRepo.prototype.buildTransactionQueue_ = function (transactionNode) {\r\n    // Walk any child transaction queues and aggregate them into a single queue.\r\n    var transactionQueue = [];\r\n    this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue);\r\n    // Sort them by the order the transactions were created.\r\n    transactionQueue.sort(function (a, b) {\r\n        return a.order - b.order;\r\n    });\r\n    return transactionQueue;\r\n};\r\n/**\r\n * @param {!Tree.<Array.<Transaction>>} node\r\n * @param {Array.<Transaction>} queue\r\n * @private\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nRepo.prototype.aggregateTransactionQueuesForNode_ = function (node, queue) {\r\n    var _this = this;\r\n    var nodeQueue = node.getValue();\r\n    if (nodeQueue !== null) {\r\n        for (var i = 0; i < nodeQueue.length; i++) {\r\n            queue.push(nodeQueue[i]);\r\n        }\r\n    }\r\n    node.forEachChild(function (child) {\r\n        _this.aggregateTransactionQueuesForNode_(child, queue);\r\n    });\r\n};\r\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n *\r\n * @param {!Tree.<Array.<!Transaction>>} node\r\n * @private\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nRepo.prototype.pruneCompletedTransactionsBelowNode_ = function (node) {\r\n    var _this = this;\r\n    var queue = node.getValue();\r\n    if (queue) {\r\n        var to = 0;\r\n        for (var from = 0; from < queue.length; from++) {\r\n            if (queue[from].status !== TransactionStatus.COMPLETED) {\r\n                queue[to] = queue[from];\r\n                to++;\r\n            }\r\n        }\r\n        queue.length = to;\r\n        node.setValue(queue.length > 0 ? queue : null);\r\n    }\r\n    node.forEachChild(function (childNode) {\r\n        _this.pruneCompletedTransactionsBelowNode_(childNode);\r\n    });\r\n};\r\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()\r\n * since we consider them incompatible with transactions.\r\n *\r\n * @param {!Path} path Path for which we want to abort related transactions.\r\n * @return {!Path}\r\n * @private\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nRepo.prototype.abortTransactions_ = function (path) {\r\n    var _this = this;\r\n    var affectedPath = this.getAncestorTransactionNode_(path).path();\r\n    var transactionNode = this.transactionQueueTree_.subTree(path);\r\n    transactionNode.forEachAncestor(function (node) {\r\n        _this.abortTransactionsOnNode_(node);\r\n    });\r\n    this.abortTransactionsOnNode_(transactionNode);\r\n    transactionNode.forEachDescendant(function (node) {\r\n        _this.abortTransactionsOnNode_(node);\r\n    });\r\n    return affectedPath;\r\n};\r\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.\r\n * @private\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nRepo.prototype.abortTransactionsOnNode_ = function (node) {\r\n    var queue = node.getValue();\r\n    if (queue !== null) {\r\n        // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\r\n        // the callback could trigger more transactions or sets.\r\n        var callbacks = [];\r\n        // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones\r\n        // can be immediately aborted and removed.\r\n        var events = [];\r\n        var lastSent = -1;\r\n        for (var i = 0; i < queue.length; i++) {\r\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) ;\r\n            else if (queue[i].status === TransactionStatus.SENT) {\r\n                util.assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\r\n                lastSent = i;\r\n                // Mark transaction for abort when it comes back.\r\n                queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\r\n                queue[i].abortReason = 'set';\r\n            }\r\n            else {\r\n                util.assert(queue[i].status === TransactionStatus.RUN, 'Unexpected transaction status in abort');\r\n                // We can abort it immediately.\r\n                queue[i].unwatcher();\r\n                events = events.concat(this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true));\r\n                if (queue[i].onComplete) {\r\n                    var snapshot = null;\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, snapshot));\r\n                }\r\n            }\r\n        }\r\n        if (lastSent === -1) {\r\n            // We're not waiting for any sent transactions.  We can clear the queue.\r\n            node.setValue(null);\r\n        }\r\n        else {\r\n            // Remove the transactions we aborted.\r\n            queue.length = lastSent + 1;\r\n        }\r\n        // Now fire the callbacks.\r\n        this.eventQueue_.raiseEventsForChangedPath(node.path(), events);\r\n        for (var i = 0; i < callbacks.length; i++) {\r\n            exceptionGuard(callbacks[i]);\r\n        }\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\r\nvar FirebaseAuthTokenProvider = /** @class */ (function () {\r\n    function FirebaseAuthTokenProvider(app_, authProvider_) {\r\n        var _this = this;\r\n        this.app_ = app_;\r\n        this.authProvider_ = authProvider_;\r\n        this.auth_ = null;\r\n        this.auth_ = authProvider_.getImmediate({ optional: true });\r\n        if (!this.auth_) {\r\n            authProvider_.get().then(function (auth) { return (_this.auth_ = auth); });\r\n        }\r\n    }\r\n    /**\r\n     * @param {boolean} forceRefresh\r\n     * @return {!Promise<FirebaseAuthTokenData>}\r\n     */\r\n    FirebaseAuthTokenProvider.prototype.getToken = function (forceRefresh) {\r\n        if (!this.auth_) {\r\n            return Promise.resolve(null);\r\n        }\r\n        return this.auth_.getToken(forceRefresh).catch(function (error) {\r\n            // TODO: Need to figure out all the cases this is raised and whether\r\n            // this makes sense.\r\n            if (error && error.code === 'auth/token-not-initialized') {\r\n                log('Got auth/token-not-initialized error.  Treating as null token.');\r\n                return null;\r\n            }\r\n            else {\r\n                return Promise.reject(error);\r\n            }\r\n        });\r\n    };\r\n    FirebaseAuthTokenProvider.prototype.addTokenChangeListener = function (listener) {\r\n        // TODO: We might want to wrap the listener and call it with no args to\r\n        // avoid a leaky abstraction, but that makes removing the listener harder.\r\n        if (this.auth_) {\r\n            this.auth_.addAuthTokenListener(listener);\r\n        }\r\n        else {\r\n            setTimeout(function () { return listener(null); }, 0);\r\n            this.authProvider_\r\n                .get()\r\n                .then(function (auth) { return auth.addAuthTokenListener(listener); });\r\n        }\r\n    };\r\n    FirebaseAuthTokenProvider.prototype.removeTokenChangeListener = function (listener) {\r\n        this.authProvider_\r\n            .get()\r\n            .then(function (auth) { return auth.removeAuthTokenListener(listener); });\r\n    };\r\n    FirebaseAuthTokenProvider.prototype.notifyForInvalidToken = function () {\r\n        var errorMessage = 'Provided authentication credentials for the app named \"' +\r\n            this.app_.name +\r\n            '\" are invalid. This usually indicates your app was not ' +\r\n            'initialized correctly. ';\r\n        if ('credential' in this.app_.options) {\r\n            errorMessage +=\r\n                'Make sure the \"credential\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else if ('serviceAccount' in this.app_.options) {\r\n            errorMessage +=\r\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else {\r\n            errorMessage +=\r\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\r\n                    'initializeApp() match the values provided for your app at ' +\r\n                    'https://console.firebase.google.com/.';\r\n        }\r\n        warn(errorMessage);\r\n    };\r\n    return FirebaseAuthTokenProvider;\r\n}());\r\n/* Auth token provider that the Admin SDK uses to connect to the Emulator. */\r\nvar EmulatorAdminTokenProvider = /** @class */ (function () {\r\n    function EmulatorAdminTokenProvider() {\r\n    }\r\n    EmulatorAdminTokenProvider.prototype.getToken = function (forceRefresh) {\r\n        return Promise.resolve({\r\n            accessToken: EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN\r\n        });\r\n    };\r\n    EmulatorAdminTokenProvider.prototype.addTokenChangeListener = function (listener) {\r\n        // Invoke the listener immediately to match the behavior in Firebase Auth\r\n        // (see packages/auth/src/auth.js#L1807)\r\n        listener(EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN);\r\n    };\r\n    EmulatorAdminTokenProvider.prototype.removeTokenChangeListener = function (listener) { };\r\n    EmulatorAdminTokenProvider.prototype.notifyForInvalidToken = function () { };\r\n    EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN = 'owner';\r\n    return EmulatorAdminTokenProvider;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This variable is also defined in the firebase node.js admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\r\nvar FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\r\nvar _staticInstance;\r\n/**\r\n * Creates and caches Repo instances.\r\n */\r\nvar RepoManager = /** @class */ (function () {\r\n    function RepoManager() {\r\n        /**\r\n         * @private {!Object.<string, Object<string, !fb.core.Repo>>}\r\n         */\r\n        this.repos_ = {};\r\n        /**\r\n         * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\r\n         * @private {boolean}\r\n         */\r\n        this.useRestClient_ = false;\r\n    }\r\n    RepoManager.getInstance = function () {\r\n        if (!_staticInstance) {\r\n            _staticInstance = new RepoManager();\r\n        }\r\n        return _staticInstance;\r\n    };\r\n    // TODO(koss): Remove these functions unless used in tests?\r\n    RepoManager.prototype.interrupt = function () {\r\n        var e_1, _a, e_2, _b;\r\n        try {\r\n            for (var _c = tslib.__values(Object.keys(this.repos_)), _d = _c.next(); !_d.done; _d = _c.next()) {\r\n                var appName = _d.value;\r\n                try {\r\n                    for (var _e = (e_2 = void 0, tslib.__values(Object.keys(this.repos_[appName]))), _f = _e.next(); !_f.done; _f = _e.next()) {\r\n                        var dbUrl = _f.value;\r\n                        this.repos_[appName][dbUrl].interrupt();\r\n                    }\r\n                }\r\n                catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n                finally {\r\n                    try {\r\n                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\r\n                    }\r\n                    finally { if (e_2) throw e_2.error; }\r\n                }\r\n            }\r\n        }\r\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n        finally {\r\n            try {\r\n                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\r\n            }\r\n            finally { if (e_1) throw e_1.error; }\r\n        }\r\n    };\r\n    RepoManager.prototype.resume = function () {\r\n        var e_3, _a, e_4, _b;\r\n        try {\r\n            for (var _c = tslib.__values(Object.keys(this.repos_)), _d = _c.next(); !_d.done; _d = _c.next()) {\r\n                var appName = _d.value;\r\n                try {\r\n                    for (var _e = (e_4 = void 0, tslib.__values(Object.keys(this.repos_[appName]))), _f = _e.next(); !_f.done; _f = _e.next()) {\r\n                        var dbUrl = _f.value;\r\n                        this.repos_[appName][dbUrl].resume();\r\n                    }\r\n                }\r\n                catch (e_4_1) { e_4 = { error: e_4_1 }; }\r\n                finally {\r\n                    try {\r\n                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\r\n                    }\r\n                    finally { if (e_4) throw e_4.error; }\r\n                }\r\n            }\r\n        }\r\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\r\n        finally {\r\n            try {\r\n                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\r\n            }\r\n            finally { if (e_3) throw e_3.error; }\r\n        }\r\n    };\r\n    /**\r\n     * This function should only ever be called to CREATE a new database instance.\r\n     *\r\n     * @param {!FirebaseApp} app\r\n     * @return {!Database}\r\n     */\r\n    RepoManager.prototype.databaseFromApp = function (app, authProvider, url, nodeAdmin) {\r\n        var dbUrl = url || app.options.databaseURL;\r\n        if (dbUrl === undefined) {\r\n            if (!app.options.projectId) {\r\n                fatal(\"Can't determine Firebase Database URL. Be sure to include \" +\r\n                    ' a Project ID when calling firebase.initializeApp().');\r\n            }\r\n            log('Using default host for project ', app.options.projectId);\r\n            dbUrl = app.options.projectId + \"-default-rtdb.firebaseio.com\";\r\n        }\r\n        var parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n        var repoInfo = parsedUrl.repoInfo;\r\n        var isEmulator;\r\n        var dbEmulatorHost = undefined;\r\n        if (typeof process !== 'undefined') {\r\n            dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\r\n        }\r\n        if (dbEmulatorHost) {\r\n            isEmulator = true;\r\n            dbUrl = \"http://\" + dbEmulatorHost + \"?ns=\" + repoInfo.namespace;\r\n            parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n            repoInfo = parsedUrl.repoInfo;\r\n        }\r\n        else {\r\n            isEmulator = !parsedUrl.repoInfo.secure;\r\n        }\r\n        var authTokenProvider = nodeAdmin && isEmulator\r\n            ? new EmulatorAdminTokenProvider()\r\n            : new FirebaseAuthTokenProvider(app, authProvider);\r\n        validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\r\n        if (!parsedUrl.path.isEmpty()) {\r\n            fatal('Database URL must point to the root of a Firebase Database ' +\r\n                '(not including a child path).');\r\n        }\r\n        var repo = this.createRepo(repoInfo, app, authTokenProvider);\r\n        return repo.database;\r\n    };\r\n    /**\r\n     * Remove the repo and make sure it is disconnected.\r\n     *\r\n     * @param {!Repo} repo\r\n     */\r\n    RepoManager.prototype.deleteRepo = function (repo) {\r\n        var appRepos = util.safeGet(this.repos_, repo.app.name);\r\n        // This should never happen...\r\n        if (!appRepos || util.safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {\r\n            fatal(\"Database \" + repo.app.name + \"(\" + repo.repoInfo_ + \") has already been deleted.\");\r\n        }\r\n        repo.interrupt();\r\n        delete appRepos[repo.repoInfo_.toURLString()];\r\n    };\r\n    /**\r\n     * Ensures a repo doesn't already exist and then creates one using the\r\n     * provided app.\r\n     *\r\n     * @param {!RepoInfo} repoInfo The metadata about the Repo\r\n     * @param {!FirebaseApp} app\r\n     * @return {!Repo} The Repo object for the specified server / repoName.\r\n     */\r\n    RepoManager.prototype.createRepo = function (repoInfo, app, authTokenProvider) {\r\n        var appRepos = util.safeGet(this.repos_, app.name);\r\n        if (!appRepos) {\r\n            appRepos = {};\r\n            this.repos_[app.name] = appRepos;\r\n        }\r\n        var repo = util.safeGet(appRepos, repoInfo.toURLString());\r\n        if (repo) {\r\n            fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\r\n        }\r\n        repo = new Repo(repoInfo, this.useRestClient_, app, authTokenProvider);\r\n        appRepos[repoInfo.toURLString()] = repo;\r\n        return repo;\r\n    };\r\n    /**\r\n     * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n     * @param {boolean} forceRestClient\r\n     */\r\n    RepoManager.prototype.forceRestClient = function (forceRestClient) {\r\n        this.useRestClient_ = forceRestClient;\r\n    };\r\n    return RepoManager;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Class representing a firebase database.\r\n * @implements {FirebaseService}\r\n */\r\nvar Database = /** @class */ (function () {\r\n    /**\r\n     * The constructor should not be called by users of our public API.\r\n     * @param {!Repo} repo_\r\n     */\r\n    function Database(repo_) {\r\n        this.repo_ = repo_;\r\n        if (!(repo_ instanceof Repo)) {\r\n            fatal(\"Don't call new Database() directly - please use firebase.database().\");\r\n        }\r\n        /** @type {Reference} */\r\n        this.root_ = new Reference(repo_, Path.Empty);\r\n        this.INTERNAL = new DatabaseInternals(this);\r\n    }\r\n    Object.defineProperty(Database.prototype, \"app\", {\r\n        get: function () {\r\n            return this.repo_.app;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Database.prototype.ref = function (path) {\r\n        this.checkDeleted_('ref');\r\n        util.validateArgCount('database.ref', 0, 1, arguments.length);\r\n        if (path instanceof Reference) {\r\n            return this.refFromURL(path.toString());\r\n        }\r\n        return path !== undefined ? this.root_.child(path) : this.root_;\r\n    };\r\n    /**\r\n     * Returns a reference to the root or the path specified in url.\r\n     * We throw a exception if the url is not in the same domain as the\r\n     * current repo.\r\n     * @param {string} url\r\n     * @return {!Reference} Firebase reference.\r\n     */\r\n    Database.prototype.refFromURL = function (url) {\r\n        /** @const {string} */\r\n        var apiName = 'database.refFromURL';\r\n        this.checkDeleted_(apiName);\r\n        util.validateArgCount(apiName, 1, 1, arguments.length);\r\n        var parsedURL = parseRepoInfo(url, this.repo_.repoInfo_.nodeAdmin);\r\n        validateUrl(apiName, 1, parsedURL);\r\n        var repoInfo = parsedURL.repoInfo;\r\n        if (repoInfo.host !== this.repo_.repoInfo_.host) {\r\n            fatal(apiName +\r\n                ': Host name does not match the current database: ' +\r\n                '(found ' +\r\n                repoInfo.host +\r\n                ' but expected ' +\r\n                this.repo_.repoInfo_.host +\r\n                ')');\r\n        }\r\n        return this.ref(parsedURL.path.toString());\r\n    };\r\n    /**\r\n     * @param {string} apiName\r\n     */\r\n    Database.prototype.checkDeleted_ = function (apiName) {\r\n        if (this.repo_ === null) {\r\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\r\n        }\r\n    };\r\n    // Make individual repo go offline.\r\n    Database.prototype.goOffline = function () {\r\n        util.validateArgCount('database.goOffline', 0, 0, arguments.length);\r\n        this.checkDeleted_('goOffline');\r\n        this.repo_.interrupt();\r\n    };\r\n    Database.prototype.goOnline = function () {\r\n        util.validateArgCount('database.goOnline', 0, 0, arguments.length);\r\n        this.checkDeleted_('goOnline');\r\n        this.repo_.resume();\r\n    };\r\n    Database.ServerValue = {\r\n        TIMESTAMP: {\r\n            '.sv': 'timestamp'\r\n        },\r\n        increment: function (delta) {\r\n            return {\r\n                '.sv': {\r\n                    'increment': delta\r\n                }\r\n            };\r\n        }\r\n    };\r\n    return Database;\r\n}());\r\nvar DatabaseInternals = /** @class */ (function () {\r\n    /** @param {!Database} database */\r\n    function DatabaseInternals(database) {\r\n        this.database = database;\r\n    }\r\n    /** @return {Promise<void>} */\r\n    DatabaseInternals.prototype.delete = function () {\r\n        return tslib.__awaiter(this, void 0, void 0, function () {\r\n            return tslib.__generator(this, function (_a) {\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                this.database.checkDeleted_('delete');\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                RepoManager.getInstance().deleteRepo(this.database.repo_);\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                this.database.repo_ = null;\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                this.database.root_ = null;\r\n                this.database.INTERNAL = null;\r\n                this.database = null;\r\n                return [2 /*return*/];\r\n            });\r\n        });\r\n    };\r\n    return DatabaseInternals;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * INTERNAL methods for internal-use only (tests, etc.).\r\n *\r\n * Customers shouldn't use these or else should be aware that they could break at any time.\r\n *\r\n * @const\r\n */\r\nvar forceLongPolling = function () {\r\n    WebSocketConnection.forceDisallow();\r\n    BrowserPollConnection.forceAllow();\r\n};\r\nvar forceWebSockets = function () {\r\n    BrowserPollConnection.forceDisallow();\r\n};\r\n/* Used by App Manager */\r\nvar isWebSocketsAvailable = function () {\r\n    return WebSocketConnection['isAvailable']();\r\n};\r\nvar setSecurityDebugCallback = function (ref, callback) {\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    ref.repo.persistentConnection_.securityDebugCallback_ = callback;\r\n};\r\nvar stats = function (ref, showDelta) {\r\n    ref.repo.stats(showDelta);\r\n};\r\nvar statsIncrementCounter = function (ref, metric) {\r\n    ref.repo.statsIncrementCounter(metric);\r\n};\r\nvar dataUpdateCount = function (ref) {\r\n    return ref.repo.dataUpdateCount;\r\n};\r\nvar interceptServerData = function (ref, callback) {\r\n    return ref.repo.interceptServerData_(callback);\r\n};\n\nvar INTERNAL = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  forceLongPolling: forceLongPolling,\n  forceWebSockets: forceWebSockets,\n  isWebSocketsAvailable: isWebSocketsAvailable,\n  setSecurityDebugCallback: setSecurityDebugCallback,\n  stats: stats,\n  statsIncrementCounter: statsIncrementCounter,\n  dataUpdateCount: dataUpdateCount,\n  interceptServerData: interceptServerData\n});\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar DataConnection = PersistentConnection;\r\n/**\r\n * @param {!string} pathString\r\n * @param {function(*)} onComplete\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\r\n    this.sendRequest('q', { p: pathString }, onComplete);\r\n};\r\n/**\r\n * @param {*} data\r\n * @param {function(*)} onEcho\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.echo = function (data, onEcho) {\r\n    this.sendRequest('echo', { d: data }, onEcho);\r\n};\r\n// RealTimeConnection properties that we use in tests.\r\nvar RealTimeConnection = Connection;\r\n/**\r\n * @param {function(): string} newHash\r\n * @return {function()}\r\n */\r\nvar hijackHash = function (newHash) {\r\n    var oldPut = PersistentConnection.prototype.put;\r\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\r\n        if (hash !== undefined) {\r\n            hash = newHash();\r\n        }\r\n        oldPut.call(this, pathString, data, onComplete, hash);\r\n    };\r\n    return function () {\r\n        PersistentConnection.prototype.put = oldPut;\r\n    };\r\n};\r\n/**\r\n * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}\r\n */\r\nvar ConnectionTarget = RepoInfo;\r\n/**\r\n * @param {!Query} query\r\n * @return {!string}\r\n */\r\nvar queryIdentifier = function (query) {\r\n    return query.queryIdentifier();\r\n};\r\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n *\r\n * @param {boolean} forceRestClient\r\n */\r\nvar forceRestClient = function (forceRestClient) {\r\n    RepoManager.getInstance().forceRestClient(forceRestClient);\r\n};\n\nvar TEST_ACCESS = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  DataConnection: DataConnection,\n  RealTimeConnection: RealTimeConnection,\n  hijackHash: hijackHash,\n  ConnectionTarget: ConnectionTarget,\n  queryIdentifier: queryIdentifier,\n  forceRestClient: forceRestClient\n});\n\nvar name = \"@firebase/database\";\nvar version = \"0.6.13\";\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar ServerValue = Database.ServerValue;\r\nfunction registerDatabase(instance) {\r\n    // set SDK_VERSION\r\n    setSDKVersion(instance.SDK_VERSION);\r\n    // Register the Database Service with the 'firebase' namespace.\r\n    var namespace = instance.INTERNAL.registerComponent(new component.Component('database', function (container, url) {\r\n        /* Dependencies */\r\n        // getImmediate for FirebaseApp will always succeed\r\n        var app = container.getProvider('app').getImmediate();\r\n        var authProvider = container.getProvider('auth-internal');\r\n        return RepoManager.getInstance().databaseFromApp(app, authProvider, url);\r\n    }, \"PUBLIC\" /* PUBLIC */)\r\n        .setServiceProps(\r\n    // firebase.database namespace properties\r\n    {\r\n        Reference: Reference,\r\n        Query: Query,\r\n        Database: Database,\r\n        DataSnapshot: DataSnapshot,\r\n        enableLogging: enableLogging,\r\n        INTERNAL: INTERNAL,\r\n        ServerValue: ServerValue,\r\n        TEST_ACCESS: TEST_ACCESS\r\n    })\r\n        .setMultipleInstances(true));\r\n    instance.registerVersion(name, version);\r\n    if (util.isNodeSdk()) {\r\n        module.exports = namespace;\r\n    }\r\n}\r\nregisterDatabase(firebase__default['default']);\n\nexports.DataSnapshot = DataSnapshot;\nexports.Database = Database;\nexports.OnDisconnect = OnDisconnect;\nexports.Query = Query;\nexports.Reference = Reference;\nexports.ServerValue = ServerValue;\nexports.enableLogging = enableLogging;\nexports.registerDatabase = registerDatabase;\n"]},"metadata":{},"sourceType":"script"}